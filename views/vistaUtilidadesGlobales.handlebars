<div class="row flex-column justify-content-center mt-3 " style="width: 95%;">
    <h1 class="mt-5">Gráficas de Utilidades por Reservación</h1>
    <div class="row mb-5 ">
        <div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 mb-3" style="width: 800px; height: 400px;">
            <canvas id="chart-line" class="utCharts"></canvas>
        </div>

        <div class="col-12 col-md-12 col-lg-6 col-xl-6 mb-3" style="width: 800px; height: 400px;">
            <p>Utilidades del mes: <strong>${{totalEarnings}}</strong></p>
            <canvas id="doughnut-chart" class="utCharts"></canvas>
        </div>
    </div>

    <div class="row mb-5 mt-3 ">
        <div class="col-12 col-md-12 col-lg-6 col-xl-6 mb-3" style="width: 800px; height: 400px;">
            <canvas id="userMontos-chart" class="utCharts"></canvas>
        </div>


        <div class="col-12 col-md-12 col-lg-6 col-xl-6 mb-3" style="width: 800px; height: 400px;">
            <canvas id="chaletUtilities-chart" class="utCharts"></canvas>
        </div>
    </div>



    <div class="col-12">

        <h1 class="mt-3">Utilidades Globales</h1>
        <div class="row mb-3">
            <div class="col-md-2">
                <label for="startDate" class="form-label">Fecha Inicio:</label>
                <input type="date" class="form-control" id="startDate">
            </div>
            <div class="col-md-2">
                <label for="endDate" class="form-label">Fecha Fin:</label>
                <input type="date" class="form-control" id="endDate">
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button id="clearDates" class="btn btn-secondary"><span><i class="fa fa-eraser"
                            aria-hidden="true"></i></span></button>
            </div>
        </div>
        <div class="table-responsive">

            <table class="table table-dark table-hover text-center nowrap" id="tablaUtilidades">
                <thead class="table-light">
                    <tr>
                        <th scope="col">Habitación</th>
                        <th scope="col">Admin Ligado</th>
                        <th scope="col">Concepto</th>
                        <th scope="col">Id Reserva</th>
                        <th scope="col">Monto</th>
                        <th scope="col">Noches reservadas</th>
                        <th scope="col">Check In</th>
                        <th scope="col">Check Out</th>
                        <th scope="col">Estatus Reserva</th>
                        <th scope="col">Usuario</th>
                        {{!-- <th scope="col">Estatus Utilidad</th> --}}
                        <th scope="col">Total Reserva</th>
                        <th scope="col">Pagado Reserva</th>
                        <th scope="col">Pendiente Reserva</th>
                    </tr>
                </thead>
                <tbody>
                    {{#if utilidades.length}}
                    {{#each utilidades}}
                    <tr>
                        <td>{{this.nombreHabitacion}}</td>
                        <td>{{this.chaletAdmin}}</td>
                        <td>{{this.concepto}}</td>
                        <td>{{this.idReserva}}</td>
                        <td>${{this.monto}}</td>
                        <td>{{this.nochesReservadas}}</td>
                        <td>{{this.fecha}}</td>
                        <td>{{this.checkOut}}</td>
                                                
                        {{#if (eq this.statusReserva "ACTIVE")}}
                        <td>Activa</td>
                        {{else if (eq this.statusReserva "PLAYGROUND")}}
                        <td>Playground</td>
                        {{else if (eq this.statusReserva "CANCELLED")}}
                        <td>Cancelada</td>
                        {{else if (eq this.statusReserva "NO-SHOW")}}
                        <td>No Show</td>
                        {{else if (eq this.statusReserva "PENDING")}}
                        <td>Pendiente</td>
                        {{else}}
                        <td>{{this.statusReserva}}</td>
                        {{/if}}
                        <td>{{this.nombreUsuario}}</td>
                        <!--
                        {{#if (eq this.status "pendiente")}}
                        <td><span class="badge bg-warning text-dark">Pendiente</span></td>
                        {{else if (eq this.status "aplicado")}}
                        <td><span class="badge bg-success text-dark">Aplicado</span></td>
                        {{else}}
                        <td>{{this.status}}</td>
                        {{/if}} -->
                        <td>${{this.totalReserva}}</td>
                        <td>${{this.pagadoReserva}}</td>
                        <td>${{this.restanteReserva}}</td>
                    </tr>
                    {{/each}}
                    {{else}}
                    <tr>
                        <td colspan="9">No se encontraron utilidades</td>
                    </tr>

                    {{/if}}
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="4"><b>Total</b></td>
                        <td id="totalMonto"></td>
                        <td></td>
                        <td></td>
                        <td></td> 
                        <td></td> 
                        <td colspan="1"></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>





<script>
    document.addEventListener("DOMContentLoaded", function () {

        var table = document.getElementById("tablaUtilidades");
        if (table) {
            var dataTable = new DataTable(table, {
                "ordering": false, // Puedes especificar aquí el orden inicial de las columnas
                "paging": true, // Habilita la paginación
                "lengthMenu": [5, 10, 25, 50], // Define el menú de longitud de página
                "pageLength": 10, // Establece la longitud de página inicial
                "dom": 'Bfrtip', // Añade los botones a la interfaz
                "search": {
                    "smart": true
                },
                "buttons": [
                    {
                        extend: 'csvHtml5',
                        text: 'Exportar a CSV',
                        footer: true,
                        exportOptions: {
                            format: {
                                footer: function(data, columnIdx) {
                                    if (columnIdx === 4) {

                                        return data;
                                    }
                                    return ''
                                }
                            }
                        }

                    },
                    {
                        extend: 'pdfHtml5',
                        text: 'Exportar a PDF',
                        title: function () {
                            var minDate = document.getElementById('startDate').value;
                            var maxDate = document.getElementById('endDate').value;
                            let mensaje = ""
                            if (minDate && maxDate) {
                                mensaje = `Reporte de utilidades del ${moment(minDate).format('DD-MM-YYYY')} al ${moment(maxDate).format('DD-MM-YYYY')}`;
                            } else if (minDate) {
                                mensaje = `Reporte de utilidades desde ${moment(minDate).format('DD-MM-YYYY')}`;
                            } else if (maxDate) {
                                mensaje = `Reporte de utilidades hasta el ${moment(maxDate).format('DD-MM-YYYY')}`;
                            } else {
                                mensaje = 'Reporte de utilidades globales';
                            }
                            return mensaje;
                        },
                        customize: function (doc) {
                            // Calculate total for all filtered data
                            var total = dataTable.column(3, { search: 'applied' }).data().reduce(function (a, b) {
                                return a + parseFloat(b.replace(/[^\d.-]/g, '')); // Remove any currency symbols before parsing
                            }, 0);

                            // Add a footer with the total amount
                            doc.content.push({
                                text: 'Total: $' + total.toFixed(2),
                                alignment: 'right',
                                margin: [0, 10, 0, 0] // margin: [left, top, right, bottom]
                            });
                        }

                    }
                ],
                "initComplete": function () {
                    // Aplica las clases a los botones después de la inicialización
                    var buttons = document.querySelectorAll('.dt-button');
                    buttons.forEach(function (button) {
                        button.classList.add('btn', 'btn-info');
                    });

                    this.api()
                        .columns([0, 9])
                        .every(function () {
                            let column = this;

                            // Create select element
                            let select = document.createElement('select');
                            select.classList.add('d-flex', 'justify-content-start');
                            select.add(new Option('Mostrar todo', ''));
                            column.footer().replaceChildren(select);

                            // Apply listener for user change in value
                            select.addEventListener('change', function () {
                                column
                                    .search(select.value)
                                    .draw();
                            });

                            // Add list of options
                            column
                                .data()
                                .unique()
                                .sort()
                                .each(function (d, j) {
                                    select.add(new Option(d));
                                });
                        });
                },
                "drawCallback": function () {
                    // Calculate and update the total monto
                    var api = this.api();
                    var total = api.column(4, { search: 'applied' }).data().reduce(function (a, b) {
                        return a + parseFloat(b.replace(/[^\d.-]/g, '')); // Remove any currency symbols before parsing
                    }, 0);
                    document.getElementById('totalMonto').textContent = `$${total.toFixed(2)}`;
                    updateChart(api);
                    updateUsersChart(api);
                    updateChaletsChart(api);
                }
            });

            DataTable.ext.search.push(function (settings, data, dataIndex) {
                var minDate = moment(document.getElementById('startDate').value, "YYYY-MM-DD").startOf('day');
                var maxDate = moment(document.getElementById('endDate').value, "YYYY-MM-DD").endOf('day');
                var targetDate = moment(data[6], "DD/MM/YYYY").startOf('day'); // Assuming date is in the 3rd column

                if ((isNaN(minDate) && isNaN(maxDate)) ||
                    (isNaN(minDate) && targetDate <= maxDate) ||
                    (minDate <= targetDate && isNaN(maxDate)) ||
                    (minDate <= targetDate && targetDate <= maxDate)) {
                    return true;
                }
                return false;
            });

            document.getElementById('startDate').addEventListener('change', function () {
                dataTable.draw();
            });

            document.getElementById('endDate').addEventListener('change', function () {
                dataTable.draw();
            });

            document.getElementById('clearDates').addEventListener('click', function () {
                document.getElementById('startDate').value = '';
                document.getElementById('endDate').value = '';
                dataTable.draw();
            });
        }

    });

    chartInstance = new Chart(document.getElementById("chart-line").getContext("2d"), {
        type: "line",
        data: {
            labels: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
            datasets: [{
                label: "Comisión del mes",
                tension: 0.4,
                borderWidth: 4,
                pointRadius: 5,
                pointBackgroundColor: "rgba(255, 99, 132, 0.8)",
                pointBorderColor: "transparent",
                borderColor: "rgba(255, 99, 132, 0.8)",
                backgroundColor: "transparent",
                fill: true,
                data: Array(12).fill(0), // Initialize with zeros
                maxBarThickness: 6
            }],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false,
                }
            },
            interaction: {
                intersect: false,
                mode: 'index',
            },
            scales: {
                y: {
                    grid: {
                        drawBorder: false,
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: false,
                        borderDash: [5, 5],
                        color: 'rgba(255, 99, 132, 0.2)'
                    },
                    ticks: {
                        beginAtZero: true,
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                        color: "#f8f9fa"
                    },
                },
                x: {
                    grid: {
                        drawBorder: false,
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: false,
                        borderDash: [5, 5],
                        color: 'rgba(255, 99, 132, 0.2)'
                    },
                    ticks: {
                        display: true,
                        color: '#f8f9fa',
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                    }
                },
            },
        }
    });

    // Function to update the chart with filtered data
    function updateChart(api) {
        console.log("UpdateChart data: ")
        var monthlyData = Array(12).fill(0); // Initialize array for 12 months

        api.rows({ search: 'applied' }).every(function (rowIdx, tableLoop, rowLoop) {
            var data = this.data();
            var date = moment(data[6], "DD/MM/YYYY"); // Assuming date is in the 4rd column
            var monthIndex = date.month(); // Get the month index (0-based)
            var amount = parseFloat(data[4].replace(/[^\d.-]/g, '')); // Parse the amount


            if (!isNaN(monthIndex) && !isNaN(amount)) {
                monthlyData[monthIndex] += amount; // Accumulate amount for each month
            }
        });


        // Update the chart data and redraw
        if (chartInstance) {
            chartInstance.data.datasets[0].data = monthlyData;
            chartInstance.update();
        }
    }

    function updateUsersChart(api) {
        console.log("UpdateUsersChart data: ")
        // Group data by usuario
        var groupedData = {};
        api.rows({ search: 'applied' }).every(function () {
            var data = this.data();
            var usuario = data[9];
            var monto = parseFloat(data[4].replace(/[^\d.-]/g, ''));

            if (!groupedData[usuario]) {
                groupedData[usuario] = 0;
            }
            groupedData[usuario] += monto;
        });

        console.log(groupedData);

        // Convert groupedData to array of objects
        const userMontoArray = Object.keys(groupedData).map(usuario => ({
            usuario,
            monto: groupedData[usuario]
        }));

        // Sort array by monto in descending order
        userMontoArray.sort((a, b) => b.monto - a.monto);

        // Extract sorted labels and data
        const labels = userMontoArray.map(item => item.usuario);
        const data = userMontoArray.map(item => item.monto);
        const backgroundColors = generateRandomColors(labels.length);

        // Update the user montos chart
        userMontosChart.data.labels = labels;
        userMontosChart.data.datasets[0].data = data;
        userMontosChart.data.datasets[0].backgroundColor = backgroundColors;
        userMontosChart.update();
    }

    function updateChaletsChart(api) {
        console.log("UpdateChalets data: ")
        // Group data by usuario
        var groupedData = {};
        api.rows({ search: 'applied' }).every(function () {
            var data = this.data();
            var habitacion = data[0];
            var monto = parseFloat(data[4].replace(/[^\d.-]/g, ''));


            if (!groupedData[habitacion] && habitacion !== "N/A") {
                groupedData[habitacion] = 0;
            }
            groupedData[habitacion] += monto;
        });

        console.log(groupedData)

        // Convert groupedData to array of objects
        const chaletMontoArray = Object.keys(groupedData).map(habitacion => ({
            habitacion,
            monto: groupedData[habitacion]
        }));

        // Sort array by monto in descending order
        chaletMontoArray.sort((a, b) => b.monto - a.monto);

        // Extract sorted labels and data
        const labels = chaletMontoArray.map(item => item.habitacion);
        const data = chaletMontoArray.map(item => item.monto);
        const backgroundColors = generateRandomColors(labels.length);

        // Update the user montos chart
        montosChaletsChart.data.labels = labels;
        montosChaletsChart.data.datasets[0].data = data;
        montosChaletsChart.data.datasets[0].backgroundColor = backgroundColors;
        montosChaletsChart.update();
    }

    const ctx = document.getElementById('doughnut-chart').getContext('2d');
    const totalEarnings = {{ totalEarnings }};
    const limit = {{ limit }};
    const remaining = limit - totalEarnings;

    const doughnutChartData = {
        labels: ['Ganancias'],
        datasets: [{
            data: [totalEarnings, remaining],
            backgroundColor: [
                'rgba(75, 192, 192, 0.6)', // Color para ganancias
                'rgba(255, 255, 255, 0.0)'  // Color transparente para restante
            ],
            borderColor: [
                'rgba(75, 192, 192, 1)',
                'rgba(255, 255, 255, 0.0)'  // Color transparente para restante
            ],
            borderWidth: 1
        }]
    };

    const doughnutChartOptions = {
        responsive: true,
        maintainAspectRatio: false, // Mantener la relación de aspecto
        plugins: {
            legend: {
                display: false, // Ocultar la leyenda
            },
            tooltip: {
                callbacks: {
                    label: function (tooltipItem) {
                        // Mostrar solo la etiqueta de ganancias
                        if (tooltipItem.label === 'Ganancias') {
                            const value = tooltipItem.raw;
                            return `${value}`;
                        }
                        return null;
                    }
                }
            }
        }
    };

    new Chart(ctx, {
        type: 'doughnut',
        data: doughnutChartData,
        options: doughnutChartOptions
    });

    //const userMontos = {{{ json userMontos }}}
    //userMontos.sort((a, b) => b.monto - a.monto);

    const ctxUsers = document.getElementById('userMontos-chart').getContext('2d');
    userMontosChart = new Chart(ctxUsers, {
        type: 'pie',
        data: {
            labels: [],
            datasets: [{
                label: 'Comisiones por usuario',
                data: [],
                backgroundColor: [],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'Comisiones por usuario'
                }
            }
        }
    });
    const ctxChalets = document.getElementById('chaletUtilities-chart').getContext('2d');

    const montosChaletsChart = new Chart(ctxChalets, {
        type: 'pie',
        data: {
            labels: [],
            datasets: [{
                label: 'Comisiones por habitación',
                data: [],
                backgroundColor: [],
                borderColor: [
                    'rgba(255, 99, 132, 1)',

                ],
                borderWidth: 1,
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'Comisiones por habitación'
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            return `${tooltipItem.label || ''}: $${tooltipItem.raw.toFixed(2)}`;
                        }
                    }
                }
            }
        }
    })

    function generateRandomColors(numColors) {
        const colors = [];
        for (let i = 0; i < numColors; i++) {
            const color = `hsl(${Math.floor(Math.random() * 360)}, 70%, 60%)`;
            colors.push(color);
        }
        return colors;
    }



</script>