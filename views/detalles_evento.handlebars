<button class="btn btn-light float-start ml-1" role="button" title="Volver a inicio" onclick="window.location='/'">
    <i class="fa fa-arrow-left" aria-hidden="true"></i>
</button>
<div class="left hidden-xs" id="reservationtools">

    {{!-- <span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Check-In">
        <li type="button" id="checkin" data-command="checkin" class="btn"><i class="fa fa-sign-in fa-lg"
                aria-hidden="true"></i></li>
    </span>

    <span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Check-Out">
        <li type="button" id="checkout" data-command="checkout" class="btn"><i class="fa fa-sign-out fa-lg"
                aria-hidden="true"></i></li>
    </span> --}}
    <span data-toggle="tooltip" data-placement="bottom" title="Cancelar" data-original-title="Cancelar ">
        <li type="button" id="eliminar-reserva-btn" data-command="cancel" class="btn btn-cancel"><i
                class="fa fa-trash fa-lg" aria-hidden="true"></i></li>
    </span>

    <span title="|">|</span>
    <span data-toggle="tooltip" data-placement="bottom" title="Editar reserva" data-original-title="Editar reserva">
        <button type="button" data-bs-toggle="modal" data-bs-target="#edit_event_modal" class="btn"><i
                class="fa fa-pencil" aria-hidden="true"></i>
            <div class="ripple-container"></div>
        </button>
    </span>

    <span data-toggle="tooltip" data-placement="bottom" title="Enviar Reserva a Cliente"
        data-original-title="Enviar Reserva a Cliente">
        <button type="button" data-bs-toggle="modal" class="btn" onclick="copiarURL()">
            <i class="fa fa-share-alt" aria-hidden="true"></i>
            <div class="ripple-container"></div>
        </button>
    </span>

    <span data-toggle="tooltip" data-placement="bottom">
        <button type="button" data-bs-toggle="modal" data-bs-target="#edit_status_modal" class="btn btn-secondary">
            Modificar Estatus
        </button>
    </span>

    <span class="ml-5 p-3">
        {{#if (eq evento.status "active")}}
            <span class="badge bg-success p-2 fs-6" >Estatus: Activo</span>
        {{else if (eq evento.status "cancelled")}}
            <span class="badge bg-danger p-2 fs-6" >Estatus: Cancelado</span>
        {{else if (eq evento.status "reserva de dueño")}}
            <span class="badge bg-info p-2 fs-6">Reserva de dueño o inversionista</span>
        {{else if (eq evento.status "playground")}}
            <span class="badge bg-light p-2 fs-6 text-dark">Estatus: Playground</span>
        {{else if (eq evento.status "pending")}}
            <span class="badge bg-warning p-2 fs-6">Estatus: Pendiente</span>
        {{/if}}
    </span>
    {{!--
    <span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Reubicar reserva">
        <button type="button" id="btn-reubicar-reserva" class="btn btn-reubicar-reserva"><i class="fa fa-arrows"
                aria-hidden="true"></i></button>
    </span>
    <span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Agrupar reservas">
        <button type="button" id="btn-MultiBooking" data-toggle="modal" data-target="#modalMultiBooking" class="btn"><i
                class="fa fa-users" aria-hidden="true"></i></button>
    </span>
    <span title="|">|</span>
    <span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Enviar confirmación">
        <button class="btn" type="button" data-toggle="modal" data-target="#modalSendConfirmation" data-id="">
            <i class="fa fa-envelope "></i>
        </button>
    </span>
    <span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Cobrar">
        <button type="button" data-toggle="modal" data-target="#modalCheckPayDisabled" class="btn"><i
                class="fa fa-credit-card" aria-hidden="true"></i></button>
    </span>
    <span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Llave">
        <li type="button" data-toggle="modal" data-target="#modalTesa" class="btn">
            <i class="fa fa-besom"></i><i class="fa fa-key"></i>
        </li>
    </span>
    <span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Histórico">
        <a href="#customer_summary" data-id="9864398" data-toggle="modal" data-target="#modalPreviewCustomer"
            class="btn btn-previewCustomer">
            <i class="fa fa-user"></i>
            <div class="ripple-container"></div>
        </a>
    </span>


    <span class="popover-action " data-toggle="popover" data-trigger="focus" data-placement="bottom"
        data-content="<ul class='popover-action-ul'><a href='#' onclick='loadChangeStatusHK($(this))' data-rcode='1619215546' data-id='8725170' class='btn-changestatus' data-action='changestatus'>Cambio de limpieza</a><hr><a href='#' onclick='loadEditRoomHK($(this))' data-cleanroom='0' data-dayweekclean='' data-numdoor='' data-rcode='1619215546' data-rscode='8725170' class='btn-splitBooking' data-action='configRoom'>Configurar limpiezas</a></ul>"
        data-html="true" data-original-title="" title="">
        <button class="btn" type="button" style="margin-bottom: -2px;">
            <i class="fa fa-besom disabled"></i><i class="hkIcon"></i>
            <div class="ripple-container"></div>
        </button>
    </span>

    --}}

</div>


<div class="row">
    <div class="col-sm-12 col-md-12 col-lg-7 col-xl-7">
        <div class="row card-details bg-dark">
            <div class="col-xs-12 col-sm-6 no-padding">


                <div class="col-xs-1 mb-3" style="width: 70px;">
                    <a onclick=""><img src="https://panel.hotelgest.com/files/media/male_profile_sm.jpg"
                            id="profile-pic-alone" class="rounded-circle"></a>
                </div>

                <div class="col-xs-9 col-lg-7">
                    <small class="limit-width" data-toggle="tooltip" data-placement="bottom"
                        title="{{habitacion.propertyDetails.name}}"
                        data-original-title="{{habitacion.propertyDetails.name}}"></small>
                    <h3 class="detailsRoom fs-4 fw-bolder text-uppercase" style="margin-bottom: 5px;">
                        {{habitacion.propertyDetails.name}}
                    </h3>
                    <h3 class="bold text-uppercase fs-5 text-uppercase">
                        {{cliente.firstName}} {{cliente.lastName}}
                    </h3>


                    <hr>
                </div>


                <div class="col-xs-12">
                    <div class="col-xs-12 no-padding-left" style="margin-top: 5px;">
                    </div>
                    <h4></h4>
                    <div class="col-xs-12 no-padding">
                        <h4 class="fw-bold fs-6" style="margin-top: 5px; margin-bottom:0px;">
                            <button class="btn btn-style-blue enviar-email-btn" type="button" id="enviar-email-btn" data-toggle="modal"
                                data-id="">
                                <i class="fa fa-envelope "></i> <b>{{cliente.email}}</b> | Enviar E-mail
                                <div class="ripple-container"></div>
                            </button>
                            <div class="ripple-container"></div>
                        </h4>

                    </div>

                    <div class="col-xs-12 no-padding">
                        <h4 class="fw-bold fs-6" style="margin-top: 5px; margin-bottom:0px;">
                            <button class="btn btn-style-blue enviar-email-btn" type="button"
                                id="enviar-whats-btn" data-id="">
                                <i class="fa fa-mobile-phone" aria-hidden="true"></i> <b>{{cliente.phone}}</b> | Enviar
                                Whatsapp
                                <div class="ripple-container"></div>
                            </button>
                            <div class="ripple-container"></div>
                        </h4>

                    </div>


                    <br>


                    <br>
                </div>
            </div>

            <div class="col-xs-12 col-sm-6">
                <div class="col-xs-6 no-padding-left">
                    <small>Llegada</small>
                    <h4 class="font-bold"> <i class="fa fa-sign-in" aria-hidden="true"></i> {{evento.arrivalDate}} </h4>
                </div>
                <div class="col-xs-3 no-padding-left">
                    <small> Noches&nbsp;&nbsp;&nbsp;</small>
                    <h4 class="font-bold"> <i class="fa fa-moon" aria-hidden="true"></i> {{evento.nNights}}</h4>
                </div>
                <div class="col-xs-2 no-padding-left">
                </div>
                <div class="col-xs-6 no-padding-left">
                    <small>Salida</small>
                    <h4 class="font-bold"> <i class="fa fa-sign-out" aria-hidden="true"></i> {{evento.departureDate}}
                    </h4>
                </div>
                <div class="col-xs-6 no-padding-left">
                    <small> Recibida</small>
                    <h4 class="font-bold">{{evento.reservationDate}}</h4>
                </div>
                <div class="col-xs-6 no-padding-left origin">
                    <small> Origen </small>
                    <h4 class="font-bold">{{evento.ota_name}} </h4>
                </div>

                <input type="hidden" id="reservacion_id" name="reservacion_id" value="{{evento._id}}">
                <input type="hidden" id="total-reserva-value" name="total-reserva-value" value="{{evento.total}}">
                <input type="hidden" id="descuento-total-reserva" name="descuento-total-reserva"
                    value="{{evento.discount}}">
                <input type="hidden" id="pagos-totales" name="pagos-totales" value="{{evento.pagoTotal}}">



            </div>
        </div>
    </div>
    <div class="col-sm-12 col-md-12 col-lg-5 col-xl-5">
        <h3 class="d-inline-block mr-3 ml-3">Notas</h3>
        <a name="" id="" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#add_notes_modal" role="button"><i
                class="fa fa-plus-circle" aria-hidden="true"></i></a>
        <div class="card-details m-3" style="background-color: #faf1d2; height: auto; width: 80%;">
            <div class="row">
                <div class="col-6">
                    <a href="#" id="comentarios-btn" class="fw-bold" style="text-decoration: none !important;"><p style="color: black; text-decoration: none !important;">COMENTARIOS</p></a>
                </div>
                <div class="col-6">
                    <a href="#" id="notasprivadas-btn" style="text-decoration: none !important;"><p style="color: black">NOTAS PRIVADAS</p></a>
                </div>

            </div>
            {{#if evento.notes}}
            {{#each evento.notes}}
            <div class="nota-container" style="display: block;">
                <p class="text-black fs-5">{{this.texto}}</p>
                <button class="btn btn-eliminar btn-sm" style="display: none;" onclick="eliminarNota('{{this._id}}')"><i
                        class="fa fa-trash" aria-hidden="true"></i></button>
            </div>
            {{/each}}
            {{/if}}

            {{#if evento.privateNotes}}
            {{#each evento.privateNotes}}
            <div class="nota-privada-container d-none" >
                <p class="text-black fs-5 blur-text " data-bs-texto="{{this.texto}}">{{this.texto}}</p>
                <button class="btn btn-eliminar btn-sm ml-2 mr-1 mb-2" style="display: none; position: inherit !important;" onclick="eliminarNota('{{this._id}}')"><i
                        class="fa fa-trash" aria-hidden="true"></i></button>
                <button class="btn btn-ver btn-sm mb-2" style="display: none;" onclick="verNotaPrivada('{{this.texto}}')">
                    <i class="fa fa-eye" aria-hidden="true" ></i></button>
            </div>
            {{/each}}
            {{/if}}
        </div>
    </div>
</div>



<div class="row mt-3">
    <div class="col-sm-12 col-md-12 col-lg-4 col-xl-4">
        <h3 class="d-inline-block text-wrap">Artículos / </h3>
        <h3>Servicios Adicionales <a name="" id="" class="btn btn-dark" data-bs-toggle="modal"
                data-bs-target="#add_services_modal" role="button"><i class="fa fa-plus-circle"
                    aria-hidden="true"></i></a></h3>

        <div class="bg-dark h-auto pt-1 pr-1 pl-1 pb-1 rounded-3">
            <div class="article-row row rounded">
                <div class="col-8">
                    <p>Reservación {{evento.nNights}} noches</p>

                </div>
                <div class="col-4 text-right">
                    <p class="fs-5">
                        <span class="badge bg-info">$ {{evento.total}}</span>
                    </p>
                </div>
            </div>
        </div>

        {{#if evento.discount}}
        <div class="bg-dark h-auto pt-1 pr-1 pl-1 pb-1 rounded-3">
            <div class="article-row row rounded">
                <div class="col-8">
                    <p>Descuento</p>

                </div>
                <div class="col-4 text-right">
                    <p class="fs-5">
                        <span class="badge bg-info">{{evento.discount}}%</span>
                    </p>
                </div>
            </div>
        </div>
        {{/if}}


        {{#if rackServicios}}
        {{#each rackServicios}}
        <div class="bg-dark h-auto pt-1 pr-1 pl-1 pb-1 rounded-3">
            <div class="rack-article article-row row rounded">
                <div class="col-8">
                    <p>{{this.descripcion}}</p>
                    <p>Insertado el {{this.fecha}}</p>
                </div>
                <div class="col-4 text-right">
                    <p class="fs-5">
                        <span class="badge bg-info">$ {{this.costo}}</span>
                    </p>

                    <p class="fs-5 mt-5 text-center">
                        <button class="btn btn-eliminar-servicio btn-sm" style="display: none;"
                            onclick="eliminarServicio('{{this._id}}')">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                    </p>


                </div>

            </div>
        </div>
        {{/each}}
        {{/if}}
    </div>

    <input type="hidden" value="{{rackServicios.totalServicios}}" id="total-servicios">
    <input type="hidden" value="{{cliente._id}}" id="cliente-id">
    <input type="hidden" value="{{cliente.email}}" id="cliente-email">
    <input type="hidden" value="{{cliente.phone}}" id="cliente-phone">
    <input type="hidden" value="{{cliente.address}}" id="cliente-address">
    


    <div class="col-sm-12 col-md-12 col-lg-4 col-xl-4 mt-3">
        <h3 class="d-inline-block mr-3 ml-3">Pagos</h3>
        <a name="" id="" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#add_payment_modal"
            role="button"><i class="fa fa-plus-circle" aria-hidden="true"></i></a>
        <div class="bg-dark">

            <table class="table table-hover table-payment">
                <thead class="table-dark">
                    <tr>
                        <th>Nº Op.</th>
                        <th>Fecha</th>
                        <th>Importe</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="rows-payment">
                    {{#if pagos}}
                    {{#each pagos}}
                    <tr>
                        <td>
                            <span data-toggle="tooltip" data-html="true"
                                title="{{this.codigoOperacion}} - {{this.notas}}  - {{this.metodoPago}} -  {{this.fechaPago}} ">
                                <i class="fa fa-info-circle"></i>
                            </span>
                        </td>
                        <td>{{this.fechaPago}}</td>
                        <td>${{this.importe}}</td>
                        <td class="text-center">
                            <button type="button" class="btn" data-bs-toggle="modal"
                                data-bs-target="#edit_payment_modal" data-payment-id="{{this._id}}">
                                <i class="fa fa-pencil" aria-hidden="true"></i>
                            </button>
                            <button type="button" class="btn" onclick="eliminarPago('{{this._id}}')">
                                <i class="fa fa-trash" aria-hidden="true"></i>
                            </button>
                        </td>
                        {{/each}}
                        {{else}}
                        <td colspan="4" class="text-center">No se han agregado pagos</td>
                        {{/if}}
                    </tr>
                </tbody>
            </table>
            <div class="row total-section fs-5 p-3">

                <div class="col-6 mb-2">
                    <label class="text-white fw-bold">Total </label>
                </div>

                <div class="col-6 text-right mb-2">
                    <div class="badge badge-primary"
                        style="padding: 10px; min-width: 85px;margin: 0px; background-color: #e3e9f5;color: #213888;">
                        <span>$ </span>
                        <span id="total-reserva"> </span>
                        <span> MXN</span>
                    </div>
                </div>

                <div class="col-6 mb-2">
                    <label class="text-white fw-bold">IVA </label>
                </div>

                <div class="col-6 text-right mb-2">
                    <div class="badge badge-primary"
                        style="padding: 10px; min-width: 85px;margin: 0px; background-color: #ffecd7;color: #213888;">
                        <span>$ </span>
                        <span id="total-iva"> 0</span>
                        <span> MXN</span>
                    </div>
                </div>

                <div class="col-6 mb-2">
                    <label class="text-white fw-bold">Pagado </label>
                </div>

                <div class="col-6 text-right mb-2">
                    <div class="badge badge-primary"
                        style="padding: 10px; min-width: 85px;margin: 0px; background-color: #e3e9f5;color: #213888;">
                        <span>$ </span>
                        <span id="total-pagado"> 0</span>
                        <span> MXN</span>
                    </div>
                </div>

                <div class="col-6 mb-2">
                    <label class="text-white fw-bolder">Pendiente </label>
                </div>

                <div class="col-6 text-right mb-2">
                    <div class="badge badge-danger"
                        style="padding: 10px; min-width: 85px;margin: 0px; background-color: #fededc;color: #f85959;">
                        <span>$ </span>
                        <span id="total-pendiente" class="fw-bold fs-5"> </span>
                        <span> MXN</span>
                    </div>
                </div>


            </div>
        </div>

    </div>

    <div class="col-sm-12 col-md-12 col-lg-4 col-xl-4">
        <h3>Facturas</h3>
        <div class="bg-dark h-auto">
            <table class="table table-hover table-payment" style="width: 100%;">
                <thead class="table-dark">
                    <tr>
                        <th>Nº Fact.</th>
                        <th>Fecha</th>
                        <th>Importe</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="rows-payment">

                </tbody>
            </table>
        </div>
    </div>
    <h3 class="d-inline-block mr-3 ml-3 mt-3" onclick="toggleContent()">
        Historial de actividad de reserva
        <span class="toggle-button">+</span>
    </h3>
    <div class="content-logs">
        <div class="container-logs">
            <div class="rightbox">
                <div class="rb-container">
                    <ul class="rb">
                        {{#if logs}}
                        {{#each logs}}
                        <li class="rb-item" ng-repeat="itembx">
                            <div class="timestamp">
                                <b>{{this.fecha}}</b> <br> {{this.hora}}
                            </div>
                            <div class="item-title">{{this.acciones}}</div>
                        </li>
                        {{/each}}
                        {{/if}}
                        {{!-- Placeholder for example logs
                        <li class="rb-item" ng-repeat="itembx">
                            <div class="timestamp">
                                19th May 2020<br> 3:00 PM
                            </div>
                            <div class="item-title">Mia Redwood commented on your last post.</div>
                        </li>
                        <li class="rb-item" ng-repeat="itembx">
                            <div class="timestamp">
                                17st June 2020<br> 7:00 PM
                            </div>
                            <div class="item-title">Lucas McAlister just send you a message.</div>
                        </li>
                        --}}
                    </ul>
                </div>
            </div>

            <div class="row flex-nowrap justify-content-center mt-3 " style="width: 95%;">
                <div class="col-10">
                    <h4>Tabla de eventos</h4>
                    <table class="table table-dark table-hover text-center" id="tablaLogs">
                        <thead class="table-light">
                            <tr>
                                <th scope="col">Usuario</th>
                                <th scope="col">Acción</th>
                                <th scope="col">Tipo</th>
                                <th scope="col">Fecha y Hora</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#if logs.length}}
                            {{#each logs}}
                            <tr>
                                <td>{{this.nombreUsuario}}</td>
                                <td>{{this.acciones}}</td>
                                <td>{{this.type}}</td>
                                <td>{{this.fecha}} {{this.hora}}</td>

                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
            </div>
            {{/if}}
        </div>


    </div> {{!-- Cierre content logs--}}

</div> {{!-- Cierre row --}}



<!-- Modals agregar pago -->

<div class="modal fade" id="add_payment_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Agregar pago</h5>
                <button type="button" class="close" onclick="$('#add_payment_modal').modal('hide');" aria-label="Close">
                    &times;

            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row mt-2">
                        <div class="col-sm-5">
                            <div class="form-group">
                                <label for="payment_emision_date">Fecha de emisión</label>
                                <input type="date" name="payment_emision_date" id="payment_emision_date"
                                    class="form-control onlydatepicker" placeholder="Fecha de pago">
                            </div>
                        </div>

                    </div>
                    <div class="row mt-2">
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="importe_pago">Importe</label>
                                <input type="number" name="importe_pago" id="importe_pago-habitacion"
                                    class="form-control" placeholder="0.00 MXN" min="0.00" step="0.01">
                            </div>
                        </div>


                    </div> <!-- Cierre row -->

                    <div class="row mt-2">
                        <div class="col-6">
                            <div class="mb-3">
                                <label for="payment-method" class="form-label">Método de pago</label>
                                <select class="form-select form-select-md" name="payment-method" id="payment_method"
                                    required>
                                    <option selected disabled value="0">Selecciona un método de pago</option>
                                    <option value="Recibio dueño">Recibió dueño</option>
                                    <option value="Tarjeta de Debito">Tarjeta de débito</option>
                                    <option value="Tarjeta de Credito">Tarjeta de crédito</option>
                                    <option value="Efectivo">Efectivo</option>
                                    <option value="Transferencia">Transferencia</option>
                                </select>
                            </div>

                        </div>

                        <div class="row mt-2">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label for="codigo-operacion-pago">Código de operación</label>
                                    <input type="text" name="codigo-operacion-pago"
                                        id="codigo-operacion-pago-habitacion" class="form-control" placeholder="001122">
                                    <span class="help-text" style="color: gray;font-size: 14px;">No es obligatorio
                                        pero
                                        puede servir de referencia.</span>

                                </div>
                            </div>
                        </div>


                    </div> <!-- Cierre row -->

                    <div class="row">
                        <div class="ml-2">
                            <label for="payment-notes" class="form-label">Notas</label>
                            <textarea class="form-control" name="payment-notes" id="payment-notes" rows="2"
                                placeholder="Nombre del banco, preautorización, etc."></textarea>


                        </div>
                    </div>




                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="add-payment-btn">Agregar pago</button>
            </div>
        </div>
    </div>
</div>
<!-- End popup dialog box -->




{{!-- Modal editar pago --}}

<div class="modal fade" id="edit_payment_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Editar pago</h5>
                <button type="button" class="close" onclick="$('#edit_payment_modal').modal('hide');"
                    aria-label="Close">
                    &times;

            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row mt-2">
                        <div class="col-sm-5">
                            <div class="form-group">
                                <label for="payment_emision_date">Fecha de emisión</label>
                                <input type="date" name="payment_emision_date" id="edit_payment_emision_date"
                                    class="form-control onlydatepicker" placeholder="Fecha de pago">
                            </div>
                        </div>

                    </div>
                    <div class="row mt-2">
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="importe_pago">Importe</label>
                                <input type="number" name="importe_pago" id="edit_importe_pago-habitacion"
                                    class="form-control" placeholder="0.00 MXN" min="0.00" step="0.01">
                            </div>
                        </div>


                    </div> <!-- Cierre row -->

                    <div class="row mt-2">
                        <div class="col-6">
                            <div class="mb-3">
                                <label for="payment-method" class="form-label">Método de pago</label>
                                <select class="form-select form-select-md" name="payment-method"
                                    id="edit_payment_method" required>
                                    <option selected disabled value="0">Selecciona un método de pago</option>
                                    <option value="Recibio dueño">Recibió dueño</option>
                                    <option value="Tarjeta de Debito">Tarjeta de débito</option>
                                    <option value="Tarjeta de Credito">Tarjeta de crédito</option>
                                    <option value="Efectivo">Efectivo</option>
                                    <option value="Transferencia">Transferencia</option>
                                </select>
                            </div>

                        </div>

                        <div class="row mt-2">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label for="edit_codigo-operacion-pago">Código de operación</label>
                                    <input type="text" name="edit_codigo-operacion-pago"
                                        id="edit-codigo-operacion-pago-habitacion" class="form-control"
                                        placeholder="001122">
                                    <span class="help-text" style="color: gray;font-size: 14px;">No es obligatorio
                                        pero
                                        puede servir de referencia.</span>

                                </div>
                            </div>
                        </div>


                    </div> <!-- Cierre row -->

                    <div class="row">
                        <div class="ml-2">
                            <label for="payment-notes" class="form-label">Notas</label>
                            <textarea class="form-control" name="payment-notes" id="edit_payment-notes" rows="2"
                                placeholder="Nombre del banco, preautorización, etc."></textarea>


                        </div>
                    </div>




                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="edit-payment-btn">Editar pago</button>
            </div>
        </div>
    </div>
</div>
<!-- End popup dialog box -->


<!-- Modal editar reserva -->
<div class="modal fade" id="edit_event_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Editar reserva</h5>
                <button type="button" class="close" onclick="$('#edit_event_modal').modal('hide');" aria-label="Close">
                    &times;
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row">
                        <div class="col-sm-4">
                            <div class="form-group">
                                <div class="mb-3">
                                    <label for="" class="form-label">Cliente</label>
                                    <input type="text" class="form-control" name="" id="edit-name-cliente"
                                        aria-describedby="helpId" placeholder=""
                                        value="{{cliente.firstName}} {{cliente.lastName}}" readonly>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-sm-5">
                            <div class="form-group">
                                <label for="event_start_date">Fecha llegada</label>
                                <input type="date" name="event_start_date" id="edit_start_date"
                                    class="form-control onlydatepicker" placeholder="Event start date">
                            </div>
                        </div>
                        <div class="col-sm-5">
                            <div class="form-group">
                                <label for="event_end_date">Fecha salida</label>
                                <input type="date" name="event_end_date" id="edit_end_date" class="form-control"
                                    placeholder="Event end date">
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="event_end_date">Noches: </label>
                                <input type="number" name="event_nights" id="edit_nights" class="form-control"
                                    placeholder="" min="1" disabled>
                            </div>
                        </div>
                    </div>

                    <div class="form-item">
                        <p id="txtReservationError" name="errMsg" class="error"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="save-event-btn">Editar reserva</button>
            </div>
        </div>
    </div>
</div>
<!-- End popup dialog box -->

<!-- Modal editar reserva -->
<div class="modal fade" id="edit_status_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Editar reserva</h5>
                <button type="button" class="close" onclick="$('#edit_status_modal').modal('hide');" aria-label="Close">
                    &times;
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row">
                        <div class="col-sm-4">
                            <div class="form-group">
                                <div class="mb-3">
                                    <div class="mb-3">
                                        <label for="" class="form-label">Estatus</label>
                                        <select class="form-select form-select-md" name="" id="select-modificar-status">
                                            <option selected disabled>Selecciona</option>
                                            {{#if (eq evento.status "active")}}
                                                <option value="playground">Playground</option>
                                                <option value="no-show">No show</option>
                                            {{else if (eq evento.status "no-show")}}
                                                <option value="0">No se puede modificar el status</option>
                                            {{else if (eq evento.status "playground")}}
                                                <option value="active">Reserva activa</option>
                                                <option value="no-show">No show</option>
                                            {{else if (eq evento.status "cancelled")}}
                                                <option value="0">No se puede modificar el status</option>
                                            {{else if (eq evento.status "pending")}}
                                                <option value="active">Reserva activa</option>
                                                <option value="no-show">No show</option>
                                                <option value="playground">Playground</option>
                                            {{else}}
                                                <option value="0">No se puede modificar el status</option>
                                            {{/if}}
                                        </select>
                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>

                    <div class="form-item">
                        <p id="txtReservationError" name="errMsg" class="error"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                    {{#if (eq evento.status "no-show")}}
                    <button type="button" class="btn btn-primary" id="update-status-btn" disabled>Modificar estatus</button>
                    {{else if (eq evento.status "cancelled")}}
                    <button type="button" class="btn btn-primary" id="update-status-btn" disabled>Modificar estatus</button>
                    {{else}}
                    <button type="button" class="btn btn-primary" id="update-status-btn">Modificar estatus</button>
                    {{/if}}
            </div>
        </div>
    </div>
</div>
<!-- End popup dialog box -->


{{!-- Modal Agregar Notas --}}

<div class="modal fade" id="add_notes_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Agregar nota</h5>
                <button type="button" class="close" onclick="$('#add_notes_modal').modal('hide');" aria-label="Close">
                    &times;
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="tipo-nota" class="form-label">Tipo de nota: </label>
                                <select class="form-select form-select-md" name="tipo-nota" id="tipo-nota-select">
                                    <option selected value="Nota para cliente">Nota para cliente</option>
                                    <option value="Nota privada">Nota privada</option>
                                </select>
                            </div>
                        </div>
                        
                    </div>
                    <div class="row">
                        <div class="ml-2">
                            <label for="add-note-input" class="form-label">Notas</label>
                            <textarea class="form-control" name="add-note-input" id="add-note-input" rows="3"
                                placeholder="Añade una nueva nota para esta reserva"></textarea>
                        </div>
                    </div>

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="add-note-btn">Agregar nota</button>
            </div>
        </div>
    </div>
</div>

{{!-- End Modal Notas --}}



{{!-- Modal Agregar servicios adicionales --}}
<div class="modal fade" id="add_services_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Agregar servicios adicionales</h5>
                <button type="button" class="close" onclick="$('#add_services_modal').modal('hide');"
                    aria-label="Close">
                    &times;

            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row mt-2">
                        <div class="col-sm-5">
                            <div class="form-group">
                                <label for="select-service">Servicio: </label>
                                <select name="select-service" id="select-service-id" class="form-select form-select-md"
                                    required>
                                    <option value="0" selected="true" disabled="true"> Selecciona un servicio --
                                    </option>
                                    {{#if servicios}}
                                    {{#each servicios}}
                                    <option value="{{this.service}}" data-bs-serviceId="{{this._id}}"
                                        data-bs-description="{{this.description}}" data-bs-price="{{this.finalPrice}}">
                                        {{this.service}}</option>
                                    {{/each}}
                                    {{else}}
                                    <option value="-1">No se encontraron servicios</option>
                                    {{/if}}
                                </select>
                            </div>
                        </div>

                    </div>



                    <div class="row">
                        <div class="ml-2">
                            <label for="description-services" class="form-label">Descripcion servicio: </label>
                            <textarea class="form-control" name="description-services" id="description-service" rows="2"
                                placeholder="Descripción del servicio"></textarea>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-3">
                            <label for="description-services" class="form-label" style="margin-bottom: 0px;">Costo:
                            </label>
                            <div class="input-group ig-shopping-price">
                                <input type="number" class="form-control bg-light text-black" id="price-service"
                                    aria-label="Amount (to the nearest dollar)" min="0.00" placeholder="Total" readonly>
                                <div class="input-group-append">
                                    <span class="input-group-text">$ M.N.</span>
                                </div>
                            </div>

                            <input type="hidden" id="id-servicio">

                        </div>
                    </div>

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="add-service-btn">Agregar servicio</button>
            </div>
        </div>
    </div>
</div>

{{!-- Fin Modal agregar servicios adicionales --}}


<!-- Modal modificar cliente -->
<div class="modal fade" id="modifyClientEntryModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <form id="frmUpdateClient" action="/api/servicios/editar-servicio" method="put" class="modal-dialog modal-lg"
        role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Completar datos de cliente</h5>
                <button type="button" class="close" onclick="$('#modifyClientEntryModal').modal('hide');"
                    aria-label="Close">
                    &times;
                </button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row mt-2">
                    <p class="bg-warning rounded p-2 object-fit-contain text-dark m-3 mr-4" style="width: 95%;">Para poder continuar con la acción, es necesario ingresar los datos del cliente (Correo, teléfono y dirección) o seleccionar un cliente.</p>
                    <div class="mb-3 ml-2">
                        <label for="" class="form-label">Selecciona una opción: </label>
                        <select class="form-select form-select-md" name="" id="seleccionar-opcion-cliente">
                            <option selected>Selecciona --</option>
                            <option value="completar-datos-cliente">Completar datos de cliente</option>
                            <option value="seleccionar-cliente">Seleccionar un cliente existente</option>
                        </select>
                    </div>
                    
                    <div class="col-sm-8 d-none" id="select-client-container">
                            <div class="form-group select-container">
                                <label for="lblClient">Cliente</label>
                                <input type="text" class="form-control form-select-search" 
                                        id="lblClient" 
                                        autocomplete="off"
                                        placeholder="Buscar y seleccionar cliente..."
                                        required>
                                <div class="select-options">
                                    {{#if clientes}}
                                        {{#each clientes}}
                                            <div class="select-option" data-value="{{this.email}}" data-label="{{this.firstName}} {{this.lastName}} ({{this.email}})">
                                                {{this.firstName}} {{this.lastName}} ({{this.email}})
                                            </div>
                                        {{/each}}
                                    {{else}}
                                        <div class="select-option" data-value="0">No se encontraron clientes</div>
                                    {{/if}}
                                </div>
                                <input type="hidden" name="lblClient" id="lblClientValue">


                            </div>
                        </div>
                        <div class="d-none" id="completar-datos-cliente-container">
                            <div class="col-sm-12 mb-2">
                                <div class="form-group">
                                    <label for="txtClientNameUpd">Nombre</label>
                                    <input type="text" name="txtClientNameUpd" id="txtClientNameUpd"
                                        class="form-control onlydatepicker" placeholder="Nombre" value="{{cliente.firstName}}">
                                </div>
                            </div>
                            <div class="col-sm-12 mb-2">
                                <div class="form-group">
                                    <label for="txtClientLastnameUpd">Apellido</label>
                                    <input type="text" name="txtClientLastnameUpd" id="txtClientLastnameUpd"
                                        class="form-control" placeholder="Apellido" value="{{cliente.lastName}}">
                                </div>
                            </div>
                            <div class="col-sm-12 mb-2">
                                <div class="form-group input-container-tel">
                                    <label for="txtClientPhoneUpd">Teléfono</label>
                                    <input type="text" name="txtClientPhoneUpd" id="txtClientPhoneUpd" class="form-control"
                                        placeholder="Teléfono">
                                    <div class="character-count" id="count1">0/10</div>
                                    
                                </div>
                            </div>
                            <div class="col-sm-12 mb-2">
                                <div class="form-group">
                                    <label for="txtClientAddressUpd">Dirección</label>
                                    <input type="text" name="txtClientAddressUpd" id="txtClientAddressUpd"
                                        class="form-control" placeholder="Dirección">
                                </div>
                            </div>
                            <div class="col-sm-12 mb-2">
                                <div class="form-group">
                                    <label for="txtClientEmailUpd">Email</label>
                                    <input type="email" name="txtClientEmailUpd" id="txtClientEmailUpd" class="form-control"
                                        placeholder="Email">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-8 mb-2 ml-2">
                                    <label for="slctClientIdTypeUpd" class="form-label">Tipo de identificación</label>
                                    <select name="slctClientIdTypeUpd" id="slctClientIdTypeUpd" class="form-select form-select-md" required>
                                        <option value="" selected disabled> Selecciona el tipo de identificación del cliente
                                        </option>
                                        <option value="INE">INE</option>
                                        <option value="Pasaporte">Pasaporte</option>
                                        <option value="Licencia de conducir">Licencia de conducir</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-sm-12 mb-2">
                                <div class="form-group">
                                    <label for="txtClientIdNumberUpd">Número de identificación</label>
                                    <input type="text" name="txtClientIdNumberUpd" id="txtClientIdNumberUpd"
                                        class="form-control" placeholder="Tipo de identificación">
                                </div>
                            </div>

                        </div>
                    </div> <!-- Cierre row -->
                </div>
            </div>
            <div class="form-item">
                <p id="txtUpdClientError" name="errMsg" class="error"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="btnUpdateClient">Modificar Cliente</button>
            </div>
        </div>
    </form>
</div>

<!-- Modal Aprobaciones vendedores -->
<!-- if you want to close by clicking outside the modal, delete the last endpoint:data-bs-backdrop and data-bs-keyboard -->
<div class="modal fade" id="vendedorModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false"
    role="dialog"aria-labelledby="modalTitleId"aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitleId">
                    Confirmar solicitud de cambio de fechas
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Estás a punto de solicitar un cambio de fechas para esta reserva</p>
                <div class="row mt-2">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="event_start_date">Fecha llegada actual</label>
                            <input type="date" name="event_start_date" id="actual_start_date"
                                class="form-control" placeholder="Event start date">
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="event_end_date">Fecha salida actual</label>
                            <input type="date" name="event_end_date" id="actual_end_date" class="form-control"
                                placeholder="Event end date">
                        </div>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="event_start_date">Fecha llegada nueva</label>
                            <input type="date" name="event_start_date" id="new_start_date"
                                class="form-control" placeholder="Event start date">
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="event_end_date">Fecha salida nueva</label>
                            <input type="date" name="event_end_date" id="new_end_date" class="form-control"
                                placeholder="Event end date">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                >
                    Close
                </button>
                <button type="button" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>


<script>

    function toggleContent() {
        const content = document.querySelector('.content-logs');
        const toggleButton = document.querySelector('.toggle-button');

        if (content.style.display === 'none' || content.style.display === '') {
            content.style.display = 'block';
            toggleButton.textContent = '-';
        } else {
            content.style.display = 'none';
            toggleButton.textContent = '+';
        }
    }

    document.addEventListener("DOMContentLoaded", function () {


        var table = document.getElementById("tablaLogs");
        if (table) {

            var dataTable = new DataTable(table, {
                "order": [[3, 'asc']], // Puedes especificar aquí el orden inicial de las columnas
                "paging": true, // Habilita la paginación
                "lengthMenu": [5, 10, 25, 50], // Define el menú de longitud de página
                "pageLength": 10 // Establece la longitud de página inicial
            });
        }

    });

    // Obtener todos los contenedores de nota
    const notaContainers = document.querySelectorAll('.nota-container');
    const notaPrivadaContainers = document.querySelectorAll('.nota-privada-container');

    // Agregar evento de mouseenter a cada contenedor de nota
    notaContainers.forEach(container => {
        container.addEventListener('mouseenter', () => {
            // Mostrar el botón de eliminar al hacer hover
            const btnEliminar = container.querySelector('.btn-eliminar');
            btnEliminar.style.display = 'block';
        });

        // Agregar evento de mouseleave a cada contenedor de nota
        container.addEventListener('mouseleave', () => {
            // Ocultar el botón de eliminar al dejar de hacer hover
            const btnEliminar = container.querySelector('.btn-eliminar');
            btnEliminar.style.display = 'none';
        });
    });

    notaPrivadaContainers.forEach(container => {
        container.addEventListener('mouseenter', () => {
            // Mostrar el botón de eliminar al hacer hover
            const btnEliminar = container.querySelector('.btn-eliminar');
            const btnVer = container.querySelector('.btn-ver');
            btnEliminar.style.display = 'block';
            btnVer.style.display = 'block';
        });

        // Agregar evento de mouseleave a cada contenedor de nota
        container.addEventListener('mouseleave', () => {
            // Ocultar el botón de eliminar al dejar de hacer hover
            const btnEliminar = container.querySelector('.btn-eliminar');
            const btnVer = container.querySelector('.btn-ver');

            btnEliminar.style.display = 'none';
            btnVer.style.display = 'none';
        });
    });

    const rackContainers = document.querySelectorAll('.rack-article');

    // Agregar evento de mouseenter a cada contenedor de nota
    rackContainers.forEach(container => {
        container.addEventListener('mouseenter', () => {
            // Mostrar el botón de eliminar al hacer hover
            const btnEliminar = container.querySelector('.btn-eliminar-servicio');
            btnEliminar.style.display = 'block';
        });

        // Agregar evento de mouseleave a cada contenedor de nota
        container.addEventListener('mouseleave', () => {
            // Ocultar el botón de eliminar al dejar de hacer hover
            const btnEliminar = container.querySelector('.btn-eliminar-servicio');
            btnEliminar.style.display = 'none';
        });
    });

    const editPaymentModal = document.getElementById('edit_payment_modal');
    const editPaymentBtn = document.querySelector('#edit-payment-btn');
    const addPaymentBtn = document.querySelector('#add-payment-btn');

    const editarFechaPagoInput = document.querySelector('#edit_payment_emision_date')
    const editarImporteInput = document.querySelector('#edit_importe_pago-habitacion');
    const editarMetodoPagoInput = document.querySelector('#edit_payment_method');
    const editarCodigoOperacionInput = document.querySelector('#edit-codigo-operacion-pago-habitacion');
    const editarNotasInput = document.querySelector('#edit_payment-notes');

    let paymentId;

    let isClientUpdated = false;
    const modificarClienteModal = new bootstrap.Modal(document.getElementById('modifyClientEntryModal'));


    addPaymentBtn.addEventListener('click', async function (event) {
        event.preventDefault();
        console.log("Se ejecuta la funcion")

        Swal.fire({
            title: 'Generando pago...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const clienteEmail = document.getElementById('cliente-email').value;
        const clientePhone = document.getElementById('cliente-phone').value;
        const clienteAddress = document.getElementById('cliente-address').value;

        console.log(clienteEmail)
        console.log(clientePhone)
        console.log(clienteAddress)

        // Validación de los campos
        if ((!clienteEmail ||!clientePhone ||!clienteAddress) || (clienteEmail == "undefined" || clientePhone == "undefined" || clienteAddress == "undefined")) {
            Swal.close()
            modificarClienteModal.show()
            return;
        }



        try {
            const fechaPago = document.querySelector('#payment_emision_date').value;
            const importe = document.querySelector('#importe_pago-habitacion').value;
            const metodoPago = document.querySelector('#payment_method').value;
            const codigoOperacion = document.querySelector('#codigo-operacion-pago-habitacion').value;
            const notas = document.querySelector('#payment-notes').value;
            const reservacionId = document.querySelector('#reservacion_id').value;

            // Validación de la fecha de pago
            if (!fechaPago || fechaPago === undefined) {
                throw new Error('Ingresa una fecha de pago para el pago.');
            }

            // Validación del importe
            if (!importe || importe === undefined) {
                throw new Error('Importe no puede estar vacío.');
            }

            // Validación del método de pago
            if (!metodoPago || metodoPago == 0) {
                throw new Error('Método de pago no puede estar vacío.');
            }


            const bodyNuevoPago = {
                fechaPago: new Date(fechaPago),
                importe: importe,
                metodoPago: metodoPago,
                codigoOperacion: codigoOperacion,
                reservacionId: reservacionId,
                notas: notas
            };


            const response = await fetch(`/api/pagos`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(bodyNuevoPago)
            });

            Swal.close(); // Close the loading indicator

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: '¡Completado!',
                    text: 'Pago registrado correctamente.',
                    confirmButtonText: 'Aceptar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        location.reload();
                    }
                });
            } else {
                const errorData = await response.json();
                throw new Error(errorData.mensaje);
            }

        } catch (error) {
            Swal.close(); // Close the loading indicator
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message,
                confirmButtonText: 'Aceptar'
            });
        }

    });

    editPaymentBtn.addEventListener('click', async function (event) {
        event.preventDefault();

        try {
            // Validación de la fecha de pago
            if (!editarFechaPagoInput.value || editarFechaPagoInput.value === undefined) {
                throw new Error('Ingresa una fecha de pago para el pago.');
            }

            // Validación del importe
            if (!editarImporteInput.value || editarImporteInput.value === undefined) {
                throw new Error('Importe no puede estar vacío.');
            }

            // Validación del método de pago
            if (!editarMetodoPagoInput.value || editarMetodoPagoInput.value == 0) {
                throw new Error('Método de pago no puede estar vacío.');
            }

            const bodyPago = {
                fechaPago: editarFechaPagoInput.value,
                importe: editarImporteInput.value,
                metodoPago: editarMetodoPagoInput.value,
                codigoOperacion: editarCodigoOperacionInput.value,
                notas: editarNotasInput.value,
                reservacionId: document.querySelector('#reservacion_id').value
            };

            const response = await fetch(`/api/pagos/${paymentId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(bodyPago)
            });

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: '¡Completado!',
                    text: 'Pago actualizado correctamente.',
                    confirmButtonText: 'Aceptar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        location.reload();
                    }
                });
            } else {
                const errorData = await response.json();
                throw new Error(errorData.mensaje);
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message,
                confirmButtonText: 'Aceptar'
            });
        }
    });

    // Obtener los datos para editar el pago e incrustarlos en el modal

    editPaymentModal.addEventListener('show.bs.modal', async function (event) {
        const button = event.relatedTarget; // Botón que abrió el modal
        paymentId = button.getAttribute('data-payment-id'); // ID del pago

        try {
            const datosDePago = await obtenerDatosDePago(paymentId);
            const { fechaPago, importe, metodoPago, codigoOperacion, notas, reservacionId } = datosDePago;
            const fechaFormateada = datosDePago.fechaPago.substring(0, 10); // Recortar la fecha para eliminar la parte de la hora

            editarFechaPagoInput.value = fechaFormateada;
            editarImporteInput.value = importe;
            editarMetodoPagoInput.value = metodoPago;
            if (codigoOperacion) editarCodigoOperacionInput.value = codigoOperacion;
            if (notas) editarNotasInput.value = notas;
        } catch (error) {
            console.error('Error al obtener los datos del pago:', error);
            throw new Error('Error al obtener los datos del pago: ', error);
        }
    });

    document.querySelector('#save-event-btn').addEventListener('click', handleReservationUpdate);


    async function handleReservationUpdate(event) {
        event.preventDefault();
        
        try {
            // Get reservation data
            const reservationData = getReservationFormData();
            
            // Format dates
            const formattedDates = formatReservationDates(reservationData);
            
            // Calculate new total if not owner reservation
            const nuevoTotal = await calculateNewTotal(reservationData, formattedDates);
            
            // Confirm update with user
            const shouldProceed = await confirmReservationUpdate(reservationData.isReservaDueno, nuevoTotal, reservationData.totalServicios);
            
            if (shouldProceed) {
                // Check availability
                const isAvailable = await checkDateAvailability(
                    reservationData.resourceId,
                    formattedDates.eventDateStart,
                    formattedDates.eventDateEnd,
                    reservationData.reservacionId
                );
                
                if (!isAvailable) {
                    throw new Error('Fechas no disponibles. Intenta con otras fechas.');
                }

                const privilegio = '{{evento.privilege}}'
                if (privilegio === "Vendedor") {
                    openVendedorModal(reservationData, formattedDates, nuevoTotal);
                    return;
                }
                
                // Update reservation
                await updateReservation(reservationData, formattedDates, nuevoTotal);
                
                // Show success message and reload page
                await showSuccessMessage();
            }
        } catch (error) {
            console.error('Error al actualizar la reserva:', error);
            await showErrorMessage(error.message);
        }
    }

    async function openVendedorModal(reservationData, formattedDates, nuevoTotal) {
        const editModal = document.getElementById('edit_event_modal');
        
        // Method 1: Using Bootstrap's Modal instance if it exists
        const bsModal = bootstrap.Modal.getInstance(editModal);
        if (bsModal) {
            bsModal.hide();
        }
        // Extract previous dates from the form
        console.log("Nuevo total Open vendedor: ")
        console.log(nuevoTotal)
        // Format dates for display (convert to local format)
        const formatDisplayDate = (dateStr) => {
            return moment(dateStr).format('DD/MM/YYYY');
        };
        
        const previousArrivalDate = "{{ evento.arrivalDate }}";
        const previousDepartureDate = "{{ evento.departureDate }}";
        // Get the new dates from the formattedDates
        const newArrivalDate = formattedDates.eventDateStart;
        const newDepartureDate = formattedDates.eventDateEnd;
        
        const result = await Swal.fire({
            title: 'Solicitud de cambio de fechas',
            html: `
                <div class="text-left">
                    <p>Estás por solicitar un cambio de fechas para la reservación:</p>
                    <p><strong>Fechas actuales:</strong></p>
                    <p>Llegada: ${previousArrivalDate}</p>
                    <p>Salida: ${previousDepartureDate}</p>
                    <p><strong>Nuevas fechas solicitadas:</strong></p>
                    <p>Llegada: ${formatDisplayDate(newArrivalDate)}</p>
                    <p>Salida: ${formatDisplayDate(newDepartureDate)}</p>
                    <p><strong>Nuevo precio (pendiente):</strong></p>
                    <p>$${nuevoTotal.precioAsignado}</p>
                    <p><strong>Motivo:</strong></p>
                    <textarea id="swal-textarea" 
                    class=""
                    placeholder="Indica el motivo por el cual solicitas el cambio de fechas"
                    rows="4" 
                    style="width: 90%; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
                    </textarea>                    
                    <p class="mt-2" style="color: #777; font-size: 0.9em;">Esta solicitud será enviada a los administradores para su aprobación.</p>
                </div>
            `,


            footer: "Esta solicitud será enviada a los administradores para su aprobación",
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Enviar solicitud',
            cancelButtonText: 'Cancelar',
            focusConfirm: false,
            didOpen: () => {
            // Focus the textarea when modal opens
            document.getElementById("swal-textarea").focus();
        },
        preConfirm: () => {
            const reason = document.getElementById("swal-textarea").value.trim();
            if (!reason) {
                Swal.showValidationMessage('Por favor indica el motivo para el cambio de fechas');
                return false;
            }
            return reason;
        }
        });
        
        if (result.isConfirmed) {
            try {
                const reason = result.value.trim();
            
                // Send request to admin for approval
                await requestDateChangeApproval(
                    reservationData.reservacionId,
                    previousArrivalDate,
                    previousDepartureDate,
                    newArrivalDate,
                    newDepartureDate,
                    nuevoTotal,
                    reason
                );
                
                // Show success message to vendor
                await Swal.fire(
                    'Solicitud enviada',
                    'Tu solicitud de cambio de fechas ha sido enviada a los administradores para su aprobación.',
                    'success'
                );
                
                // Reload page or redirect as needed
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
                
            } catch (error) {
                console.error('Error al enviar solicitud de cambio de fechas:', error);
                await Swal.fire(
                    'Error',
                    error.message || 'Hubo un error al enviar la solicitud de cambio de fechas.',
                    'error'
                );
            }
        }
    }

    async function requestDateChangeApproval(reservationId, prevArrivalDate, prevDepartureDate, newArrivalDate, newDepartureDate, totalInfo, reason) {
        const clientId = document.querySelector('#cliente-id').value;
        const response = await fetch('/api/aprobaciones', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                reservationId,
                dateChanges: {
                    newArrivalDate: newArrivalDate,
                    newDepartureDate: newDepartureDate
                },
                newPrice: totalInfo.precioAsignado,
                mainReason: reason,
                clientId,
                infoPrices: totalInfo
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Error al enviar solicitud');
        }
        
        return await response.json();
    }

    function getReservationFormData() {
        const eventStatus = "{{ evento.status }}";
        const isReservaDueno = eventStatus === "reserva de dueño";
        
        return {
            eventStatus,
            isReservaDueno,
            nightsInput: document.querySelector('#edit_nights').value,
            arrivalDateInput: document.getElementById('edit_start_date').value,
            departureDateInput: document.getElementById('edit_end_date').value,
            reservacionId: document.querySelector('#reservacion_id').value,
            comisionVendedor: {{ evento.comisionVendedor }},
            resourceId: '{{ evento.resourceId }}',
            totalServicios: parseFloat(document.querySelector('#total-servicios').value || 0),
            chaletName: '{{habitacion.propertyDetails.name}}'
        };
    }

    function formatReservationDates(data) {
        // Keep the same date formatting strategy
        return {
            eventDateStart: moment.utc(data.arrivalDateInput).format('YYYY-MM-DD'),
            eventDateEnd: moment.utc(data.departureDateInput).format('YYYY-MM-DD')
        };
    }

    async function calculateNewTotal(data, formattedDates) {
        const nuevoTotal = data.isReservaDueno 
            ? {} 
            : await obtenerNuevoTotal(
                data.resourceId, 
                formattedDates.eventDateStart, 
                formattedDates.eventDateEnd, 
                data.comisionVendedor, 
                data.nightsInput
            );
        
        // Add additional properties to the total object
        nuevoTotal.chaletName = data.chaletName;
        nuevoTotal.idReserva = data.reservacionId;
        nuevoTotal.arrivalDate = formattedDates.eventDateStart;
        nuevoTotal.departureDate = formattedDates.eventDateEnd;
        
        return nuevoTotal;
    }

    async function confirmReservationUpdate(isOwnerReservation, nuevoTotal, totalServicios) {
        let mensaje = isOwnerReservation 
            ? '' 
            : `El nuevo total será de $${(nuevoTotal.precioAsignado || 0) + totalServicios}`;
        
        const confirmacion = await Swal.fire({
            title: '¿Está seguro que desea actualizar la reserva?',
            text: mensaje,
            icon: 'warning',
            showCancelButton: true,
        });
        
        return confirmacion.isConfirmed;
    }

    async function checkDateAvailability(resourceId, arrivalDate, departureDate, reservationId) {
        try {
            const response = await fetch(`/api/check-availability/?resourceId=${resourceId}&arrivalDate=${arrivalDate}&departureDate=${departureDate}&eventId=${reservationId}`);
            const result = await response.json();
            
            return result.available;
        } catch (error) {
            console.error('Error al verificar disponibilidad:', error);
            return false;
        }
    }

    async function updateReservation(data, formattedDates, nuevoTotal) {
        // Prepare data for reservation update
        const nuevasFechas = {
            nNights: data.nightsInput,
            arrivalDate: data.arrivalDateInput,
            departureDate: data.departureDateInput,
            total: data.isReservaDueno ? 0 : (nuevoTotal.precioAsignado || 0)
        };
        
        // Update reservation
        const response = await fetch(`/api/eventos/${data.reservacionId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(nuevasFechas)
        });
        
        if (!response.ok) {
            throw new Error('Error al actualizar la reserva. Por favor, inténtalo de nuevo más tarde.');
        }
        
        const eventStatus = "{{ evento.status }}";
        if (eventStatus !== "reserva de dueño") {
            nuevoTotal.nNights = data.nightsInput;
            // Add commissions
            const agregarComisiones = await fetch('/api/utilidades/reserva', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(nuevoTotal)
            });
            
            if (!agregarComisiones.ok) {
                const additionalErrorData = await agregarComisiones.json();
                const additionalErrors = additionalErrorData.error;
                throw new Error("Error en la solicitud adicional: " + additionalErrors[0].message.toLowerCase() + ".");
            }
            
            const additionalData = await agregarComisiones.json();
            console.log('Additional data received:', additionalData);
        }
        
        return response;
    }

    async function showSuccessMessage() {
        return Swal.fire({
            icon: 'success',
            title: '¡Completado!',
            text: 'Reserva actualizada correctamente.',
            confirmButtonText: 'Aceptar'
        }).then((result) => {
            if (result.isConfirmed) {
                location.reload();
            }
        });
    }

    async function showErrorMessage(message) {
        return Swal.fire({
            icon: 'error',
            title: 'Error',
            text: message || 'Ha ocurrido un error al actualizar la reserva.',
            confirmButtonText: 'Aceptar'
        });
    }

    // Helper function to check date availability (refactored from original code)
    async function availableDate(resourceId, arrivalDate, departureDate) {
        try {
            if (!arrivalDate || !departureDate) {
                return false;
            }

            const reservacionId = document.querySelector('#reservacion_id').value;
            
            const response = await fetch(`/api/check-availability/?resourceId=${resourceId}&arrivalDate=${arrivalDate}&departureDate=${departureDate}&eventId=${reservacionId}`);
            const result = await response.json();
            
            return result.available;
        } catch (error) {
            console.error('Ha ocurrido un error al verificar disponibilidad:', error.message);
            return false;
        }
    }

    const updateStatusBtn = document.querySelector('#update-status-btn');
    updateStatusBtn.addEventListener('click', async function (event) {
        event.preventDefault();
        await editarStatusReserva();

    });

    async function editarStatusReserva() {
        const selectModificarStatus = document.querySelector('#select-modificar-status');
        const selectedValue = selectModificarStatus.value;
        const reservacionId = document.querySelector('#reservacion_id').value;

        console.log(selectModificarStatus.value);
        
        const clienteEmail = document.getElementById('cliente-email').value;
        const clientePhone = document.getElementById('cliente-phone').value;
        const clienteAddress = document.getElementById('cliente-address').value;

        console.log(clienteEmail)
        console.log(clientePhone)
        console.log(clienteAddress)

        if (selectModificarStatus.value === "active"){
            // Validación de los campos
            if ((!clienteEmail ||!clientePhone ||!clienteAddress) || (clienteEmail == "undefined" || clientePhone == "undefined" || clienteAddress == "undefined")) {
                modificarClienteModal.show()
                return;
            }

        }

        try {
            const response = await fetch(`/api/eventos/move-to-playground`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    idReserva: reservacionId,
                    status: selectedValue
                })
            });
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Estatus de reserva modificado',
                    text: 'La reserva ha cambiado a status: ' + selectedValue,
                    confirmationText: 'Aceptar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.reload();
                    }
                })
            } else {
                const data = await response.json()
                throw new Error('Error al modificar el status de la reserva: ' + data.message);
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message,
                showConfirmButton: false,
                timer: 3000

            })
        }
    }

    async function obtenerDatosDeReserva() {
        try {
            const reservacionId = document.querySelector('#reservacion_id').value;

            const response = await fetch(`/api/eventos/route/${reservacionId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const data = await response.json(); // Esperar a que la promesa se resuelva
            return data;
        } catch (error) {
            throw new Error(error);
        }
    }

    async function obtenerDatosDePago(paymentId) {
        try {
            const response = await fetch(`/api/pagos/${paymentId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const data = await response.json(); // Esperar a que la promesa se resuelva
            return data;
        } catch (error) {
            throw new Error(error);
        }
    }

    async function eliminarPago(idPago) {
        try {
            const confirmacion = await Swal.fire({
                icon: 'warning',
                title: '¿Estás seguro?',
                text: 'Esta acción eliminará el pago de forma permanente.',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            });

            if (confirmacion.isConfirmed) {
                const response = await fetch(`/api/pagos/${idPago}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: 'Pago eliminado correctamente.',
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload();
                        }
                    });
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.mensaje);
                }
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message,
                confirmButtonText: 'Aceptar'
            });
        }
    }

    async function obtenerNuevoTotal(resourceId, arrivalDate, departureDate, comisionVendedor, nNights) {
        console.log('obtener total ');
        console.log("arrrivalDate: " + arrivalDate);
        console.log("departureDate: " + departureDate);

        // const fechaInicio = new Date(`${arrivalDate.value}T00:00:00`); // Agregar la hora en formato UTC
        // const fechaFin = new Date(`${departureDate.value}T00:00:00`); // Agregar la hora en formato UTC
        const fechaInicio = new Date(`${arrivalDate}T00:00:00`); // Agregar la hora en formato UTC
        const fechaFin = new Date(`${departureDate}T00:00:00`); // Agregar la hora en formato UTC
        const arrivalYear = fechaInicio.getFullYear();
        const arrivalMonth = (fechaInicio.getMonth() + 1).toString().padStart(2, '0'); // Asegura que el mes tenga dos dígitos
        const arrivalDay = fechaInicio.getDate().toString().padStart(2, '0'); // Asegura que el día tenga dos dígitos
        const arrivalDateSend = `${arrivalYear}-${arrivalMonth}-${arrivalDay}`;

        const departureYear = fechaFin.getFullYear();
        const departureMonth = (fechaFin.getMonth() + 1).toString().padStart(2, '0'); // Asegura que el mes tenga dos dígitos
        const departureDay = fechaFin.getDate().toString().padStart(2, '0'); // Asegura que el día tenga dos dígitos
        const departureDateSend = `${departureYear}-${departureMonth}-${departureDay}`;

        console.log(arrivalDateSend)
        console.log(departureDateSend)

        if (arrivalDateSend && departureDateSend && resourceId) {
            // Aquí puedes ejecutar la acción deseada
            console.log("Los tres elementos tienen un valor. Ejecutar acción...");
            const fechas = obtenerRangoFechas(arrivalDateSend, departureDateSend)
            const habitacionId = resourceId

            console.log("fechas: " + fechas)
            console.log("Nights: " + nNights)

            const resultados = []

            try {

                for (const fecha of fechas) {
                    const year = fecha.getFullYear();
                    const month = (fecha.getMonth() + 1).toString().padStart(2, '0'); // Asegura que el mes tenga dos dígitos
                    const day = fecha.getDate().toString().padStart(2, '0'); // Asegura que el día tenga dos dígitos
                    const formatedDate = `${year}-${month}-${day}`;

                    const response = await fetch(`/api/consulta-fechas?fecha=${formatedDate}&habitacionid=${habitacionId}`);

                    // Verificar el estado de la respuesta
                    if (!response.ok) {
                        throw new Error('Error en la solicitud fetch: ' + response.statusText);
                    }

                    // Convertir la respuesta a JSON
                    const data = await response.json();

                    // Agregar el resultado al array de resultados
                    resultados.push(data);

                }
                console.log(resultados)
                let totalPrecios = 0
                let totalCostoBase = 0



                resultados.forEach(resultado => {
                    if (nNights > 1) {
                        if (resultado.precio_base_2noches) {
                            totalPrecios += resultado.precio_base_2noches
                            totalCostoBase += resultado.costo_base_2noches
                        } else {
                            console.log('no hay precios disponibles')
                        }
                    } else {
                        if (resultado.precio_modificado) {
                            totalPrecios += resultado.precio_modificado
                            totalCostoBase += resultado.costo_base

                        } else {
                            console.log('No hay precios disponibles')
                        }
                    }
                })

                console.log("Total precios: ", totalPrecios)

                // Asignar comisiones
                comisionVendedor = 0
                
                // totalPrecios += comisionVendedor // Precio maximo permitido

                // console.log("Total precios con comisiones: ", totalPrecios)
                const comisionUsuarios = await obtenerComisiones(nNights, habitacionId)
                let precioMinimoPermitidoSinComision = comisionUsuarios.minComission + totalPrecios // Sumar comisiones al precio minimo
                console.log("Precio minimo permitido: ", precioMinimoPermitidoSinComision)
                const precioMinimoPermitido = precioMinimoPermitidoSinComision;
                console.log("Precio total de la reserva", precioMinimoPermitido);
                const precioMaximoPermitido = totalPrecios + comisionUsuarios.finalComission // Precio maximo permitido
                // console.log("Total precios con comisiones: ", totalPrecios)
                const preciosComisiones = {
                    precioMinimo: precioMinimoPermitidoSinComision,
                    precioMaximo: precioMaximoPermitido,
                    costoBase: totalCostoBase,
                    totalSinComisiones: totalPrecios,
                    precioAsignado: precioMinimoPermitido
                }

                console.log(preciosComisiones)

                
                return preciosComisiones

                // preciosTotalesGlobal = totalPrecios // Monto maximo en variable global

                // totalCostoBaseInput.value = totalCostoBase

                // console.log('Precios totales global: ', preciosTotalesGlobal)


            } catch (error) {
                console.error('Ha ocurrido un error: ', error.message);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: "Error en la solicitud: " + error.message,
                    confirmButtonText: 'Aceptar'
                })

            }

        }
    }

    async function obtenerComisiones(nNights, habitacionId) {
        try {
            const response = await fetch(`/api/utilidades?nnights=${nNights}&habitacionid=${habitacionId}`);
            const data = await response.json();
            console.log(data);
            const minComission = data.minComission
            const finalComission = data.finalComission
            const comisiones = { minComission: minComission, finalComission: finalComission }
            return comisiones

        } catch (error) {
            console.log(error.message);
        }
    }

    const eliminarReservaBtn = document.querySelector('#eliminar-reserva-btn')
    eliminarReservaBtn.addEventListener('click', async function (event) {
        try {
            const reservacionId = document.querySelector('#reservacion_id').value;

            const confirmacion = await Swal.fire({
                icon: 'warning',
                title: '¿Estás seguro?',
                text: 'Esta acción cancelará la reserva de forma permanente.',
                showCancelButton: true,
            });

            if (confirmacion.isConfirmed) {
                const response = await fetch(`/api/eventos/move-to-playground`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        idReserva: reservacionId,
                        status: 'cancelled'
                    })
                });
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: 'Reserva cancelada correctamente.',
                        confirmButtonText: 'Aceptar',
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/'

                        }
                    })
                } else {
                    const data = await response.json()
                    console.log(data.error)
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.error,
                        confirmButtonText: 'Aceptar'
                    });
                }
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message,
                confirmButtonText: 'Aceptar'
            });
        }
    });

    const addNoteBtn = document.querySelector('#add-note-btn');

    addNoteBtn.addEventListener('click', async function (event) {
        event.preventDefault();

        try {
            const reservacionId = document.querySelector('#reservacion_id').value;
            const noteInput = document.querySelector('#add-note-input').value;
            const tipoNotaSelect = document.querySelector('#tipo-nota-select').value;

            if (!noteInput || noteInput === undefined) {
                throw new Error('Ingresa una nota para la reserva.');
            }

            const bodyNota = {
                texto: noteInput,
                tipoNota: tipoNotaSelect
            };

            const response = await fetch(`/api/notas/${reservacionId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(bodyNota)
            })

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: '¡Completado!',
                    text: 'Nota agregada correctamente.',
                    confirmButtonText: 'Aceptar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        location.reload();
                    }
                });

            } else {
                const errorData = await response.json(); // Obtener el mensaje de error del backend
                throw new Error(errorData.message || 'Error al agregar la nota. Por favor, inténtalo de nuevo más tarde.');
            }

        } catch (e) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: e.message,
                confirmButtonText: 'Aceptar'
            });
        }
    });

    function obtenerRangoFechas(arrivalDate, departureDate) {
        const fechaInicio = new Date(`${arrivalDate}T00:00:00`); // Agregar la hora en formato UTC
        const fechaFin = new Date(`${departureDate}T00:00:00`); // Agregar la hora en formato UTC

        const fechas = [];
        let fechaActual = new Date(fechaInicio);

        while (fechaActual < fechaFin) {
            fechas.push(new Date(fechaActual));
            fechaActual.setDate(fechaActual.getDate() + 1);
        }
        return fechas;
    }

    async function eliminarNota(idNota) {

        try {
            const reservacionId = document.querySelector('#reservacion_id').value;

            const confirmacion = await Swal.fire({
                icon: 'warning',
                title: '¿Estás seguro?',
                text: 'Esta acción eliminará la nota de forma permanente.',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            })
            if (confirmacion.isConfirmed) {

                const response = await fetch(`/api/notas?idReserva=${reservacionId}&idNota=${idNota}`, {
                    method: 'DELETE', // O el método HTTP que estés utilizando para eliminar la nota
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: 'Nota eliminada correctamente.',
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload();
                        }
                    });

                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Error al eliminar la nota. Por favor, inténtalo de nuevo más tarde.');
                }
            }
        } catch (e) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: e.message,
                confirmButtonText: 'Aceptar'
            })
        }
    }
    async function eliminarServicio(idServicio) {

        try {
            const reservacionId = document.querySelector('#reservacion_id').value;

            const confirmacion = await Swal.fire({
                icon: 'warning',
                title: '¿Estás seguro?',
                text: 'Esta acción eliminará el servicio y sus comisiones de forma permanente.',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            })
            if (confirmacion.isConfirmed) {

                const response = await fetch(`/api/rackservicios/${idServicio}`, {
                    method: 'DELETE', // O el método HTTP que estés utilizando para eliminar la nota
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: 'Servicio eliminado correctamente.',
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload();
                        }
                    });

                } else {
                    throw new Error('Error al eliminar la nota. Por favor, inténtalo de nuevo más tarde.');
                }
            }
        } catch (e) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: e.message,
                confirmButtonText: 'Aceptar'
            })
        }
    }

    function calcularTotales() {
        const totalReservaInput = document.querySelector('#total-reserva');
        const totalIvaInput = document.querySelector('#total-iva');
        const totalPagado = document.querySelector('#total-pagado');
        const totalPendiente = document.querySelector('#total-pendiente');

        const totalServicios = parseFloat(document.querySelector('#total-servicios').value);

        const pagosTotales = parseFloat(document.querySelector('#pagos-totales').value);

        const totalReserva = parseFloat(document.querySelector('#total-reserva-value').value);
        let descuentoTotalReserva = parseFloat(document.querySelector('#descuento-total-reserva').value);

        const iva = 0.16;

        console.log(descuentoTotalReserva);
        if (isNaN(descuentoTotalReserva) || descuentoTotalReserva === undefined || descuentoTotalReserva === null) {
            descuentoTotalReserva = 0;
        }
        let preTotal = totalReserva * (descuentoTotalReserva / 100);
        let total = totalReserva - preTotal;
        total += totalServicios;
        total = total.toFixed(2); // Formatear a dos decimales como máximo

        console.log(totalServicios)
        totalReservaInput.textContent = total;

        let totalIva = total * iva;
        totalIva = totalIva.toFixed(2); // Formatear a dos decimales como máximo
        totalIvaInput.textContent = totalIva;

        totalPagado.textContent = pagosTotales.toFixed(2); // Formatear a dos decimales como máximo

        let totalPendienteValue = total - pagosTotales;
        totalPendienteValue = totalPendienteValue.toFixed(2); // Formatear a dos decimales como máximo
        totalPendiente.textContent = totalPendienteValue;
    }


    calcularTotales()

    const selectServiceInput = document.getElementById('select-service-id');
    const descriptionService = document.getElementById('description-service');
    const priceService = document.getElementById('price-service');
    const idServicio = document.getElementById('id-servicio');

    selectServiceInput.addEventListener('change', function () {
        const selectedOption = selectServiceInput.options[selectServiceInput.selectedIndex];
        const description = selectedOption.getAttribute('data-bs-description');
        const price = selectedOption.getAttribute('data-bs-price');
        const serviceId = selectedOption.getAttribute('data-bs-serviceId');


        if (description != undefined && description != null && description.trim() !== '') {
            descriptionService.value = description;
        } else {
            descriptionService.value = ''
        }

        if (price != undefined && price != null && price.trim() !== '') {
            priceService.value = price;
        } else {
            priceService.value = ''
        }

        idServicio.value = serviceId;

    });

    const addServiceBtn = document.querySelector('#add-service-btn');

    addServiceBtn.addEventListener('click', async function (event) {
        event.preventDefault();

        try {
            const reservacionId = document.querySelector('#reservacion_id').value;
            const newService = {
                id_reserva: reservacionId,
                id_servicio: idServicio.value,
                descripcion: descriptionService.value,
                fecha: Date.now(),
                status: 'Pendiente',
                costo: priceService.value
            }

            const response = await fetch(`/api/rackServicios`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newService)

            })


            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: '¡Completado!',
                    text: 'Servicio agregado correctamente.',
                    confirmButtonText: 'Aceptar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        location.reload();
                    }
                });
            } else {
                throw new Error('Error al agregar el servicio. Por favor, inténtalo de nuevo más tarde o verifica que todos los campos están completos');
            }


        } catch (e) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: e.message,
                confirmButtonText: 'Aceptar'
            })
        }
    });





    const editReservationModal = document.getElementById('edit_event_modal');
    editReservationModal.addEventListener('show.bs.modal', async function (event) {
        const nightsInput = document.querySelector('#edit_nights');
        const arrivalDateInput = document.getElementById('edit_start_date')
        const departureDateInput = document.getElementById('edit_end_date')

        try {
            const datosReserva = await obtenerDatosDeReserva();
            const { arrivalDate, departureDate, nNights } = datosReserva;

            arrivalDateInput.value = arrivalDate.substring(0, 10);
            departureDateInput.value = departureDate.substring(0, 10);
            nightsInput.value = nNights;



        } catch (error) {
            console.error('Error al obtener los datos de reserva:', error);
            throw new Error('Error al obtener los datos de reserva: ', error);
        }
    });

    const nightsInput = document.querySelector('#edit_nights');
    const arrivalDateInput = document.getElementById('edit_start_date')
    const departureDateInput = document.getElementById('edit_end_date')


    arrivalDateInput.addEventListener('change', calculateNightDifference);
    departureDateInput.addEventListener('change', calculateNightDifference);




    function calculateNightDifference() {
        const arrivalValue = new Date(arrivalDateInput.value);
        const departureValue = new Date(departureDateInput.value);

        // Verifica si las fechas son válidas
        if (!isNaN(arrivalValue) && !isNaN(departureValue) && departureValue >= arrivalValue) {
            const timeDifference = departureValue.getTime() - arrivalValue.getTime();
            const nightDifference = Math.ceil(timeDifference / (1000 * 3600 * 24)); // Calcula la diferencia en días

            nightsInput.value = nightDifference
        } else {
            nightsInput.value = 0
        }
    }

    function copiarURL() {
        // URL que deseas copiar al portapapeles
        const reservacionId = document.querySelector('#reservacion_id').value;

        var url = `${window.location.origin}/instrucciones/${reservacionId}`;

        // Crear un elemento de entrada para almacenar el URL
        var input = document.createElement('input');
        input.setAttribute('value', url);
        document.body.appendChild(input);

        // Seleccionar y copiar el URL al portapapeles
        input.select();
        document.execCommand('copy');

        // Eliminar el elemento de entrada
        document.body.removeChild(input);

        // Mostrar una notificación de que el URL se copió al portapapeles
        alert('URL copiado al portapapeles: ' + url);
    }

    function verNotaPrivada(texto) {
        const el = document.querySelector(`[data-bs-texto="${texto}"]`);
        const privilegio = '{{evento.privilege}}'
        console.log(privilegio)
        if (!(privilegio === "Administrador") && !(privilegio === "Vendedor")) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No tienes privilegios para ver esta información',
                confirmButtonText: 'Aceptar'
            })
            return false;
        }

        const textoOriginal = descifrarMensaje(texto, 3);
        el.textContent = textoOriginal;
        el.classList.toggle('blur-text')
        console.log(textoOriginal);
    }

    function descifrarMensaje(mensajeCifrado, desplazamiento) {
        return cifrarMensaje(mensajeCifrado, -desplazamiento);
    }

    function cifrarMensaje(mensaje, desplazamiento) {
        desplazamiento = (desplazamiento % 26 + 26) % 26; // Asegurar que el desplazamiento esté en el rango adecuado

        return mensaje.replace(/[a-zA-Z]/g, function(letra) {
            var codigo = letra.charCodeAt(0);
            var inicio = letra >= 'a' ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);
            return String.fromCharCode(inicio + (codigo - inicio + desplazamiento) % 26);
    });
}

    const notaContainer = document.querySelectorAll('.nota-container');
    const notaPrivadaContainer = document.querySelectorAll('.nota-privada-container');
    const comentariosBtn = document.querySelector('#comentarios-btn');
    const notasPrivadasBtn = document.querySelector('#notasprivadas-btn');
    
    comentariosBtn.addEventListener('click', function (e) {
        e.preventDefault();
        notaPrivadaContainer.forEach(function(element) {
            element.classList.add('d-none');
        });
        notaContainer.forEach(function(element) {
            element.classList.remove('d-none');
        });
        comentariosBtn.classList.add('fw-bold');
        notasPrivadasBtn.classList.remove('fw-bold');
    });

    notasPrivadasBtn.addEventListener('click', function (e) {
        e.preventDefault();
        notaContainer.forEach(function(element) {
            element.classList.add('d-none');
        });
        notaPrivadaContainer.forEach(function(element) {
            element.classList.remove('d-none');
        });
        notasPrivadasBtn.classList.add('fw-bold');
        comentariosBtn.classList.remove('fw-bold');
    });

    const enviarWhatsBtn = document.querySelector('#enviar-whats-btn');
    enviarWhatsBtn.addEventListener('click', async function (e) {
        e.preventDefault();

        const reservacionId = "{{evento._id}}"
        console.log(reservacionId)

        try {
            const confirmation = await Swal.fire({
                title: 'Enviar WhatsApp',
                text: '¿Estás seguro de enviar la reservación  por Whatsapp al cliente?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Si',
                cancelButtonText: 'No'
            })

            if (confirmation.isConfirmed){
                console.log("Confirmado!!")
                const response = await fetch(`/api/whatsapp/send-whatsapp`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        idReserva: reservacionId
                    })
                })

                if (!response.ok) {
                    const errorData = await response.json(); // Extract the error data
                    const errorMessage = errorData.error && errorData.error[0] && errorData.error[0].message
                        ? errorData.error[0].message
                        : 'Error en la solicitud'; // Fallback if message is not found
                    throw new Error(errorMessage);
                }
            
                const dataR = await response.json();
                console.log(dataR);

                Swal.fire({
                    icon:'success',
                    title: '¡Completado!',
                    text: 'Las instrucciones han sido enviadas por Whatsapp correctamente.',
                    confirmButtonText: 'Aceptar'
                })
            }

        } catch (error){
            console.error('Error al enviar Whatsapp:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Hubo un error al intentar enviar la reservación por Whatsapp.',
                confirmButtonText: 'Aceptar'
            })
        }

        

    })

    const enviarCorreoReserva = document.querySelector('#enviar-email-btn');
    enviarCorreoReserva.addEventListener('click', async function (e) {
        e.preventDefault();

        const reservacionId = "{{evento._id}}"
        const emailCliente = document.querySelector('#cliente-email').value
        console.log(reservacionId)

        try {
            const confirmation = await Swal.fire({
                title: 'Enviar Email',
                text: '¿Estás seguro de enviar la reservación por Email al cliente?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Si',
                cancelButtonText: 'No'
            })

            if (confirmation.isConfirmed){
                console.log("Confirmado!!")
                const response = await fetch(`/api/email/send-email`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        reservationId: reservacionId,
                        email: emailCliente
                    })
                })

                if (!response.ok) {
                    const errorData = await response.json(); // Extract the error data
                    const errorMessage = errorData.error && errorData.error[0] && errorData.error[0].message
                        ? errorData.error[0].message
                        : 'Error en la solicitud'; // Fallback if message is not found
                    throw new Error(errorMessage);
                }
            
                const dataR = await response.json();
                console.log(dataR);

                Swal.fire({
                    icon:'success',
                    title: '¡Completado!',
                    text: 'Las instrucciones han sido enviadas por Whatsapp correctamente.',
                    confirmButtonText: 'Aceptar'
                })
            }

        } catch (error){
            console.error('Error al enviar Whatsapp:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Hubo un error al intentar enviar la reservación por Whatsapp.',
                confirmButtonText: 'Aceptar'
            })
        }

        

    })

    var btnUpdateClient = document.getElementById("btnUpdateClient");

    if (btnUpdateClient) {
        btnUpdateClient.addEventListener("click", async (event) => {
            event.preventDefault();
            
            const selectClientOption = document.getElementById('seleccionar-opcion-cliente').value;
            const reservacionId = "{{evento._id}}"
            

            if (selectClientOption === "completar-datos-cliente"){

                if (document.getElementById("txtClientPhoneUpd").value.trim().length > 10) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'El número de teléfono debe tener 10 dígitos.',
                        confirmButtonText: 'Aceptar'
                    })
                    return;
                }

                const clientId = document.querySelector('#cliente-id').value;
                const data = {
                    firstName: document.getElementById("txtClientNameUpd").value.trim(),
                    lastName: document.getElementById("txtClientLastnameUpd").value.trim(),
                    phone: document.getElementById("txtClientPhoneUpd").value.trim(),
                    address: document.getElementById("txtClientAddressUpd").value.trim(),
                    email: document.getElementById("txtClientEmailUpd").value.trim(),
                    identificationType: document.getElementById("slctClientIdTypeUpd").value.trim(),
                    identificationNumber: document.getElementById("txtClientIdNumberUpd").value.trim()
                };

                try {
                    const response = await fetch(`/api/clientes/editar-cliente/${clientId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        const errorMessage = errorData?.error?.[0]?.message.toLowerCase() || "Unknown error";
                        
                        return Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: "Error en la solicitud: " + errorMessage + ".",
                            confirmButtonText: 'Aceptar'
                        });
                    }

                    const updatedData = await response.json();
                    document.getElementById('cliente-email').value = updatedData.clienteToUpdate.email;
                    document.getElementById('cliente-phone').value = updatedData.clienteToUpdate.phone;
                    document.getElementById('cliente-address').value = updatedData.clienteToUpdate.address;

                    isClientUpdated = true;

                    const moveToActiveResponse = await fetch(`/api/eventos/move-to-playground`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            idReserva: reservacionId,
                            status: 'active'
                        })
                    });

                    if (!moveToActiveResponse.ok) {
                        const errorData = await moveToActiveResponse.json();
                        const errorMessage = errorData.message || "Unknown error";
                        throw new Error(errorMessage);
                    }

                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: "Cliente actualizado con éxito y reserva activada.",
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            //$('#modifyClientEntryModal').modal('hide');
                            location.reload();
                            
                        }
                    });
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al enviar la solicitud: ' + error.message.toLowerCase() + '.',
                        confirmButtonText: 'Aceptar'
                    });
                }
            } else if (selectClientOption === "seleccionar-cliente"){
                const clientId = document.querySelector('#lblClientValue').value;
                console.log("Client email: ", clientId);

                try {
                    const response = await fetch('/api/clientes/asignar-cliente', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            email: clientId,
                            idReservation: reservacionId
                        })

                    })

                    if (!response.ok) {
                        const errorData = await response.json();
                        const errorMessage = errorData.message || "Unknown error";
                        return Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: "Error en la solicitud: " + errorMessage + ".",
                            confirmButtonText: 'Aceptar'
                        });
                    }

                    const moveToActiveResponse = await fetch(`/api/eventos/move-to-playground`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            idReserva: reservacionId,
                            status: 'active'
                        })
                    });

                    if (!moveToActiveResponse.ok) {
                        const errorData = await moveToActiveResponse.json();
                        const errorMessage = errorData.message || "Unknown error";
                        throw new Error(errorMessage);
                    }

                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: "Cliente asignado con éxito y reserva movida a activa.",
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload();
                        }
                    });

                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al enviar la solicitud: ' + error.message.toLowerCase() + '.',
                        confirmButtonText: 'Aceptar'
                    })
                }
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Por favor, selecciona una opción.',
                    confirmButtonText: 'Aceptar'
                })
                return;
            }
        });
    }

    function updateCharacterCount(inputElement, countElement, max) {
            const update = () => {
                let value = inputElement.value;
                
                // Allow only numbers
                value = value.replace(/[^0-9]/g, '');
                inputElement.value = value;

                const length = value.length;
                countElement.textContent = `${length}/${max}`;
                countElement.classList.toggle('exceeded', length > max);
            };

            inputElement.addEventListener('input', update);
            update();
        }

        updateCharacterCount(
            document.getElementById('txtClientPhoneUpd'),
            document.getElementById('count1'),
            10
        );

    const selectClientOption = document.getElementById('seleccionar-opcion-cliente');

    selectClientOption.addEventListener('change', function() {
        const selectedOption = this.value;
        console.log('Opcion seleccionada:', selectedOption);

        const seleccionarClienteContainer = document.getElementById('select-client-container');
        const completarDatosContainer = document.getElementById('completar-datos-cliente-container');

        switch(selectedOption) {
            case 'completar-datos-cliente':
                if (!seleccionarClienteContainer.classList.contains('d-none')) {
                    seleccionarClienteContainer.classList.add('d-none');
                }
                if (completarDatosContainer.classList.contains('d-none')) {
                    completarDatosContainer.classList.remove('d-none');
                }
                break;
            case 'seleccionar-cliente':
                if (!completarDatosContainer.classList.contains('d-none')) {
                    completarDatosContainer.classList.add('d-none');
                }
                if (seleccionarClienteContainer.classList.contains('d-none')) {
                    seleccionarClienteContainer.classList.remove('d-none');
                }
                break;
            default:
                if (!seleccionarClienteContainer.classList.contains('d-none')) {
                    seleccionarClienteContainer.classList.add('d-none');
                }
                if (!completarDatosContainer.classList.contains('d-none')) {
                    completarDatosContainer.classList.add('d-none');
                }
                break;
        }   
    })

    const searchInput = document.getElementById('lblClient');
    const optionsContainer = document.querySelector('.select-options');
    const hiddenInput = document.getElementById('lblClientValue');
    let allOptions = Array.from(document.querySelectorAll('.select-option'));

    window.addNewClientOption = function(clientData) {
        // Create new option element
        const newOption = document.createElement('div');
        newOption.className = 'select-option';
        newOption.dataset.value = clientData.email;
        newOption.dataset.label = `${clientData.firstName} ${clientData.lastName} (${clientData.email})`;
        newOption.textContent = `${clientData.firstName} ${clientData.lastName} (${clientData.email})`;

        // Add the new option to the container
        optionsContainer.appendChild(newOption);

        // Update allOptions array
        allOptions = Array.from(document.querySelectorAll('.select-option'));

        // Set the new option as selected
        searchInput.value = newOption.dataset.label;
        hiddenInput.value = newOption.dataset.value;
    };

    // Function to filter options
    function filterOptions(searchText) {
        const filteredOptions = allOptions.filter(option => {
            const optionText = option.textContent.toLowerCase();
            return optionText.includes(searchText.toLowerCase());
        });

        // Hide all options first
        allOptions.forEach(option => option.style.display = 'none');

        // Show filtered options
        filteredOptions.forEach(option => option.style.display = 'block');

        // Show/hide options container based on whether there are results
        optionsContainer.style.display = filteredOptions.length > 0 ? 'block' : 'none';
    }

    // Input event handler
    searchInput.addEventListener('input', (e) => {
        filterOptions(e.target.value);
    });

    // Focus event handler
    searchInput.addEventListener('focus', () => {
        optionsContainer.style.display = 'block';
        filterOptions(searchInput.value);
    });

    // Click handler for options
    optionsContainer.addEventListener('click', (e) => {
        const option = e.target.closest('.select-option');
        if (option) {
            const value = option.dataset.value;
            const label = option.dataset.label || option.textContent;
            
            searchInput.value = label;
            hiddenInput.value = value;
            optionsContainer.style.display = 'none';
        }
    });

    // Close options when clicking outside
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.select-container')) {
            optionsContainer.style.display = 'none';
        }
    });

    // Keyboard navigation
    searchInput.addEventListener('keydown', (e) => {
        const visibleOptions = Array.from(optionsContainer.querySelectorAll('.select-option')).filter(
            option => option.style.display !== 'none'
        );
        const currentIndex = visibleOptions.findIndex(option => option.classList.contains('selected'));

        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                if (currentIndex < visibleOptions.length - 1) {
                    visibleOptions.forEach(opt => opt.classList.remove('selected'));
                    visibleOptions[currentIndex + 1].classList.add('selected');
                }
                break;
            case 'ArrowUp':
                e.preventDefault();
                if (currentIndex > 0) {
                    visibleOptions.forEach(opt => opt.classList.remove('selected'));
                    visibleOptions[currentIndex - 1].classList.add('selected');
                }
                break;
            case 'Enter':
                e.preventDefault();
                const selectedOption = visibleOptions.find(opt => opt.classList.contains('selected'));
                if (selectedOption) {
                    const value = selectedOption.dataset.value;
                    const label = selectedOption.dataset.label || selectedOption.textContent;
                    searchInput.value = label;
                    hiddenInput.value = value;
                    optionsContainer.style.display = 'none';
                }
                break;
        }
    });

</script>