<div class="calendar-header">
    <div class="bg-dark mb-3">
        <a name="" id="crear-reserva-btn" class="btn btn-secondary btn-sm m-3" href="#" role="button"
            data-bs-toggle="modal" data-bs-target="#user_entry_modal">Alta de Usuario</a>
    </div>
</div>

<div class="row flex-nowrap justify-content-center mt-3" style="width: 95%;">
    <div class="col-10">
        <h1>Lista de usuarios</h1>
        <div class="table-responsive">

            <table class="table table-dark table-hover" id="tablaUsuarios">
                <thead class="table-light">
                    <tr>
                        <th scope="col">Nombre</th>
                        <th scope="col">Apellido</th>
                        <th scope="col">Email</th>
                        <th scope="col">Celular</th>
                        <th scope="col">Privilegio</th>
                        <th scope="col">Administrador</th>
                        <th scope="col">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each users}}
                    <tr>
                        <td>{{firstName}}</td>
                        <td>{{lastName}}</td>
                        <td>{{email}}</td>
                        <td>{{phone}}</td>
                        <td>{{privilege}}</td>
                        <td>{{adminname}}</td>
                        <td class="text-center">
                            <button type="button" class="btn btn-primary" data-client-firstName="{{firstName}}"
                                data-client-lastName="{{lastName}}" data-client-email="{{email}}" data-client-phone="{{phone}}"
                                data-client-privilege="{{privilege}}" data-client-adminname="{{administrator}}"
                                data-client-color="{{color}}" {{#if investorType}}
                                data-client-investorType="{{investorType}}"
                                {{/if}} data-bs-toggle="modal"
                                data-bs-target="#modify-user_entry_modal" onclick="showClientEmail(this)">
                                <i class="fa fa-pencil" aria-hidden="true"></i>
                            </button>
                            <button type="button" class="btn btn-danger" data-client-email="{{email}}" onclick="deleteUser(this)">
                                <i class="fa fa-trash" aria-hidden="true"></i>
                            </button>
                            <div class="form-item">
                                <p name="errMsg" class="error"></p>
                            </div>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>

    </div>
</div>

{{!-- Modals --}}
<!-- Modal Alta usuario -->
<div class="modal fade" id="user_entry_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <form id="frmNewUser" action="/api/auth/crear-usuario" method="post" class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Alta de Usuario</h5>
                <button type="button" class="close" onclick="$('#user_entry_modal').modal('hide');" aria-label="Close">
                    &times;
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row mt-2">
                        <div class="col-sm-12 mb-2">
                            <div class="form-group">
                                <label for="txtUserName">Nombre</label>
                                <input type="text" name="txtUserName" id="txtUserName"
                                    class="form-control onlydatepicker" placeholder="Nombre">
                            </div>
                        </div>
                        <div class="col-sm-12 mb-2">
                            <div class="form-group">
                                <label for="txtUserLastname">Apellido</label>
                                <input type="text" name="txtUserLastname" id="txtUserLastname" class="form-control"
                                    placeholder="Apellido">
                            </div>
                        </div>
                        <div class="col-sm-12 mb-2">
                            <div class="form-group">
                                <label for="txtUserEmail">Email: </label>
                                <input type="email" name="txtUserEmail" id="txtUserEmail" class="form-control"
                                    placeholder="Email">
                            </div>
                        </div>
                        <div class="col-sm-12 mb-2">
                            <label for="userPhoneNmbName">Teléfono: </label>
                            <div class="input-group mb-3"
                                style="background-color: #FFF !important; color: #000 !important">
                                <span class="input-group-text">+52</span>
                                <input type="tel" class="form-control" placeholder="3312345678" name="userPhoneNmbName"
                                    id="userPhoneNmb">
                            </div>

                        </div>
                        <div class="col-sm-12 mb-2">
                            <div class="form-group">
                                <label for="txtUserPassword">Contraseña: </label>
                                <input type="password" name="txtUserPassword" id="txtUserPassword" class="form-control"
                                    placeholder="Contraseña">
                            </div>
                        </div>
                        <div class="row">
                            <label for="slctUserPrivileges">Privilegio: </label>
                        </div>
                        <div class="row">
                            <div class="col-8">
                                <select name="slctUserPrivileges" id="slctUserPrivileges"
                                    class="form-select form-select-md" required>
                                    <option value="" selected disabled> Selecciona un privilegio para el usuario--
                                    </option>
                                    <option value="Administrador">Administrador</option>
                                    <option value="Vendedor">Vendedor</option>
                                    <option value="Limpieza">Limpieza</option>
                                    <option value="Servicios adicionales">Servicios adicionales</option>
                                    <option value="Dueño de cabañas">Dueño de cabañas</option>
                                    <option value="Inversionistas">Inversionistas</option>
                                    <option value="Colaborador dueño">Colaborador de dueño de cabañas</option>

                                </select>

                            </div>
                        </div>
                        <div class="row mt-2">
                            <label for="slctUserAdmin" id="relatedLabel">Administrador ligado: </label>
                        </div>
                        <div class="row">
                            <div class="col-8" id="relatedSelectContainer">
                                <select id="slctUserAdmin" name="slctUserAdmin" class="form-select form-select-md">
                                    <option value="" selected="true" disabled="true"> Selecciona un administrador para
                                        el usuario --</option>
                                    {{#if admins}}
                                    {{#each admins}}
                                    <option value="{{this._id}}">{{this.firstName}} {{this.lastName}}</option>
                                    {{/each}}
                                    {{else}}
                                    <option value="0">No se encontraron administradores</option>
                                    {{/if}}
                                </select>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <label for="select-investorType" id="labelSelectInvestorType" class="d-none">Tipo de
                                Inversionista: </label>
                        </div>

                        <div class="row">
                            <div class="col-8 d-none" id="containerSelectInvestorType">
                                <select id="select-investorType" name="select-investorType"
                                    class="form-select form-select-md">
                                    <option value="Asimilado">Tipo Asimilado</option>
                                    <option value="RESICO Fisico">RESICO Físico</option>
                                    <option value="PF con AE y PM">PF con AE y PM</option>
                                </select>
                            </div>
                        </div>

                        <div class="row mt-2">
                            <label for="exampleColorInput" class="form-label">Color de colaborador: </label>
                            <div class="col-3">
                                <input type="color" class="form-control form-control-color" id="colaboratorColor"
                                    value="#563d7c" title="Choose your color">
                            </div>
                        </div>
                        <div class="form-item">
                            <p id="txtInsertUserError" name="errMsg" class="error"></p>
                        </div>
                        <div class="modal_footer" style="display: flex; justify-content: right; margin: 10px 0;">
                            <button type="submit" class="btn btn-primary" id="btnSaveUser">Guardar Usuario</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-item">
            <p id="txtUpdUserError" name="errMsg" class="error"></p>
        </div>
    </form>
</div>
<!-- End Modal Alta usuario -->

{{!-- Modal modificar usuario --}}
<div class="modal fade" id="modify-user_entry_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <form id="frmUpdateUser" action="/api/usuarios/editar-usuario" method="put" class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Modificar Usuario</h5>
                <button type="button" class="close" onclick="$('#modify-user_entry_modal').modal('hide');"
                    aria-label="Close">
                    &times;
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row mt-2">
                        <div class="col-sm-12 mb-2">
                            <div class="form-group">
                                <label for="txtUserNameUpdlbl">Nombre</label>
                                <input type="text" name="txtUserNameUpdlbl" id="txtUserNameUpd"
                                    class="form-control onlydatepicker" placeholder="Nombre">
                            </div>
                        </div>
                        <div class="col-sm-12 mb-2">
                            <div class="form-group">
                                <label for="txtUserLastnameUpdlbl">Apellido</label>
                                <input type="text" name="txtUserLastnameUpdlbl" id="txtUserLastnameUpd"
                                    class="form-control" placeholder="Apellido">
                            </div>
                        </div>
                        <div class="col-sm-12 mb-2">
                            <div class="form-group">
                                <label for="txtUserEmailUpdlbl">Email: </label>
                                <input type="email" name="txtUserEmailUpdlbl" id="txtUserEmailUpd" class="form-control"
                                    placeholder="Email" disabled="true">
                            </div>
                        </div>
                            <div class="col-sm-12 mb-2">
                            <label for="userPhoneNmbNameUpd">Teléfono: </label>
                            <div class="input-group mb-3"
                                style="background-color: #FFF !important; color: #000 !important">
                                <span class="input-group-text">+52</span>
                                <input type="tel" class="form-control" placeholder="3312345678" name="userPhoneNmbNameUpd"
                                    id="userPhoneNmbUpd">
                            </div>
                        </div>
                        <div class="col-sm-12 mb-2">
                            <div class="form-group">
                                <label for="txtUserPasswordUpdlbl">Cambiar Contraseña: </label>
                                <input type="password" name="txtUserPasswordUpdlbl" id="txtUserPasswordUpd"
                                    class="form-control" placeholder="Contraseña">
                            </div>
                        </div>
                        <div class="row">
                            <label for="slctUserPrivilegesUpdlbl">Privilegio: </label>
                        </div>
                        <div class="row">
                            <div class="col-8">
                                <select name="slctUserPrivilegesUpdlbl" id="slctUserPrivilegesUpd"
                                    class="form-select form-select-md" required>
                                    <option value="" selected disabled> Selecciona un privilegio para el usuario--
                                    </option>
                                    <option value="">Selecciona una opción</option>
                                    <option value="Administrador">Administrador</option>
                                    <option value="Vendedor">Vendedor</option>
                                    <option value="Limpieza">Limpieza</option>
                                    <option value="Servicios adicionales">Servicios adicionales</option>
                                    <option value="Dueño de cabañas">Dueño de cabañas</option>
                                    <option value="Inversionistas">Inversionistas</option>
                                    <option value="Colaborador dueño">Colaborador de dueño de cabañas</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <label id="relatedLabelUpd" for="slctUserAdminUpd">Administrador ligado: </label>
                        </div>
                        <div class="row">
                            <div class="col-8" id="relatedSelectContainerUpd">
                                <select id="slctUserAdminUpd" name="slctUserAdminUpd"
                                    class="form-select form-select-md">
                                    <option value="" selected="true" disabled="true"> Selecciona un administrador para
                                        el usuario --</option>
                                    {{#if admins}}
                                    {{#each admins}}
                                    <option value="{{this._id}}">{{this.firstName}} {{this.lastName}}</option>
                                    {{/each}}
                                    {{else}}
                                    <option value="0">No se encontraron administradores</option>
                                    {{/if}}
                                </select>
                            </div>
                        </div>

                        <div class="row mt-2">
                            <label for="select-investorTypeUpd" id="labelSelectInvestorTypeUpd" class="d-none">Tipo de
                                Inversionista: </label>
                        </div>

                        <div class="row">
                            <div class="col-8 d-none" id="containerSelectInvestorTypeUpd">
                                <select id="select-investorTypeUpd" name="select-investorTypeUpd"
                                    class="form-select form-select-md">
                                    <option value="Asimilado">Tipo Asimilado</option>
                                    <option value="RESICO Fisico">RESICO Físico</option>
                                    <option value="PF con AE y PM">PF con AE y PM</option>
                                </select>
                            </div>
                        </div>

                        <div class="row mt-2">
                            <label for="exampleColorInput" class="form-label">Color de colaborador: </label>
                            <div class="col-3">
                                <input type="color" class="form-control form-control-color" id="colaboratorColorUpd"
                                    value="#563d7c" title="Choose your color">
                            </div>
                        </div>
                        <div class="form-item">
                            <p id="txtUpdUserError" name="errMsg" class="error"></p>
                        </div>
                        <div class="modal_footer" style="display: flex; justify-content: right; margin: 10px 0;">
                            <button type="submit" class="btn btn-primary" id="btnUpdateUser">Modificar Usuario</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-item">
            <p id="txtUpdUserError" name="errMsg" class="error"></p>
        </div>
    </form>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Variables.
        var table = document.getElementById("tablaUsuarios");
        if (table) {
            var dataTable = new DataTable(table, {
                "order": [], // Puedes especificar aquí el orden inicial de las columnas
                "paging": true, // Habilita la paginación
                "lengthMenu": [5, 10, 25, 50], // Define el menú de longitud de página
                "pageLength": 10, // Establece la longitud de página inicial
                "dom": 'Bfrtip', // Añade los botones a la interfaz
                "buttons": [
                    {
                        extend: 'csvHtml5',
                        text: 'Exportar a CSV',

                    }
                ],
                "initComplete": function () {
                    // Aplica las clases a los botones después de la inicialización
                    var buttons = document.querySelectorAll('.dt-button');
                    buttons.forEach(function (button) {
                        button.classList.add('btn', 'btn-info');
                    });
                }
            });




            // Escucha el evento 'draw' de DataTables


            // Inicializa los botones en la primera carga de la tabla
        }

        // Functions.
        function clearModal(modal) {
            const inputs = modal.querySelectorAll('input');
            inputs.forEach(function (input) {
                input.value = "";
            });
            modal.querySelectorAll("p[name='errMsg']")[0].innerHTML = "";
        }

        // Clearing user's info when closing modal.
        const modals = document.querySelectorAll('.modal');
        modals.forEach(function (modal) {
            modal.addEventListener('hidden.bs.modal', () => {
                clearModal(modal);
            });
        });


        // Saving new user.
        var btnSaveUser = document.getElementById("btnSaveUser")
        if (btnSaveUser) {
            btnSaveUser.addEventListener("click", async (event) => {
                event.preventDefault();
                const privilege = document.getElementById("slctUserPrivileges").value.trim();
                console.log(document.getElementById("userPhoneNmb").value)
                const data = {
                    firstName: document.getElementById("txtUserName").value.trim(),
                    lastName: document.getElementById("txtUserLastname").value.trim(),
                    email: document.getElementById("txtUserEmail").value.trim(),
                    phone: document.getElementById("userPhoneNmb").value.trim(),
                    password: document.getElementById("txtUserPassword").value.trim(),
                    privilege: privilege,
                    color: document.getElementById("colaboratorColor").value.trim()
                };

                if (privilege !== "Inversionistas") {
                    data.administrator = document.getElementById("slctUserAdmin").value.trim();
                    data.adminname = $("#slctUserAdmin option:selected").text()
                } else {
                    data.investorType = document.getElementById('select-investorType').value

                }

                fetch('/api/usuarios/crear-usuario', {
                    method: 'POST',
                    headers: {
                        // Once logged in, the authorization token stored inthe session cookies will automatically be added in each HTTP request.
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => {
                        if (!response.ok) {
                            response.json().then(errorData => {
                                let errors = errorData.message;

                                if (errors === undefined) {
                                    errorData[0].message;
                                }
                                

                                console.log(errors)
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: "Error en la solicitud: " + errors + ".",
                                    confirmButtonText: 'Aceptar'
                                });
                            });
                            throw new Error('Error en la solicitud');
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire({
                            icon: 'success',
                            title: '¡Completado!',
                            text: data.message + '.',
                            confirmButtonText: 'Aceptar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                clearModal(document.getElementById("user_entry_modal"));
                                $('#user_entry_modal').modal('hide');
                                location.reload();
                            }
                        });
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Error al enviar la solicitud: ' + error.toLowerCase() + '.',
                            confirmButtonText: 'Aceptar'
                        });
                    });
            });
        }

        function getCombinedMessage(errorInput) {
            if (Array.isArray(errorInput)) {
                // Si es un array de errores, unimos los mensajes
                return errorInput.map(error => error.message).join('. ');
            } else if (errorInput && errorInput.message) {
                // Si es un único objeto con un mensaje, retornamos ese mensaje
                return errorInput.message;
            }
            return '';
        }

        var btnUpdateUser = document.getElementById("btnUpdateUser")
        if (btnUpdateUser) {
            btnUpdateUser.addEventListener("click", async (event) => {
                event.preventDefault();
                const privilege = document.getElementById("slctUserPrivilegesUpd").value.trim()

                const data = {
                    firstName: document.getElementById("txtUserNameUpd").value.trim(),
                    lastName: document.getElementById("txtUserLastnameUpd").value.trim(),
                    email: document.getElementById("txtUserEmailUpd").value.trim(),
                    password: document.getElementById("txtUserPasswordUpd").value.trim(),
                    phone: document.getElementById("userPhoneNmbUpd").value.trim(),
                    privilege: privilege,
                    color: document.getElementById("colaboratorColorUpd").value.trim()
                };

                if (privilege !== "Inversionistas") {
                    data.administrator = document.getElementById("slctUserAdminUpd").value.trim();
                    data.adminname = $("#slctUserAdminUpd option:selected").text()
                } else {
                    data.investorType = document.getElementById('select-investorTypeUpd').value

                }

                fetch('/api/usuarios/editar-usuario', {
                    method: 'PUT',
                    headers: {
                        // Once logged in, the authorization token stored inthe session cookies will automatically be added in each HTTP request.
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => {
                        if (!response.ok) {
                            response.json().then(errorData => {
                                const errors = errorData.message;
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: "Error en la solicitud: " + errors+ ".",
                                    confirmButtonText: 'Aceptar'
                                });
                            });
                            throw new Error('Error en la solicitud');
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire({
                            icon: 'success',
                            title: '¡Completado!',
                            text: data.message + '.',
                            confirmButtonText: 'Aceptar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                clearModal(document.getElementById("modify-user_entry_modal"));
                                $('#modify-user_entry_modal').modal('hide');
                                location.reload();
                            }
                        });
                    })
                    .catch(error => {
                        console.log(error)
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Error al enviar la solicitud: ' + error.toLowerCase() + '.',
                            confirmButtonText: 'Aceptar'
                        });
                    });
            });
        }

        // Deleting client info.
        /** 
        const deleteButtons = document.querySelectorAll('#tablaUsuarios .btn-danger');
        console.log(deleteButtons)
        deleteButtons.forEach(function (button) {
            button.addEventListener('click', function () {
                const data = {
                    email: this.dataset.clientEmail
                };

                fetch('/api/usuarios/eliminar-usuario', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => {
                        if (!response.ok) {
                            response.json().then(errorData => {
                                const errors = errorData.error;
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: "Error en la solicitud: " + errors[0].message.toLowerCase() + ".",
                                    confirmButtonText: 'Aceptar'
                                });
                            });
                            throw new Error('Error en la solicitud');
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire({
                            icon: 'success',
                            title: '¡Completado!',
                            text: data.message + '.',
                            confirmButtonText: 'Aceptar'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Error al enviar la solicitud: ' + error.toLowerCase() + '.',
                            confirmButtonText: 'Aceptar'
                        });
                    });
            });
        });

        **/

        const selectPrivileges = document.getElementById('slctUserPrivileges');
        const relatedLabel = document.getElementById('relatedLabel');
        const relatedSelectContainer = document.getElementById('relatedSelectContainer');

        const labelInvestorType = document.getElementById('labelSelectInvestorType');
        const containerSelectInvestorType = document.getElementById('containerSelectInvestorType');
        const selectInvestorType = document.getElementById('select-investorType');


        const selectPrivilegesUpd = document.getElementById('slctUserPrivilegesUpd');
        const relatedLabelUpd = document.getElementById('relatedLabelUpd');
        const relatedSelectContainerUpd = document.getElementById('relatedSelectContainerUpd');

        const labelInvestorTypeUpd = document.getElementById('labelSelectInvestorTypeUpd');
        const containerSelectInvestorTypeUpd = document.getElementById('containerSelectInvestorTypeUpd');
        const selectInvestorTypeUpd = document.getElementById('select-investorTypeUpd');

        // Pasar los datos de admins y owners como cadenas JSON
        const owners = {{{ json owners }}};
        const admins = {{{ json admins }}};

    selectPrivileges.addEventListener('change', function () {
        console.log('change');
        if (this.value === 'Colaborador dueño') {
            labelInvestorType.classList.add('d-none');
            containerSelectInvestorType.classList.add('d-none');
            relatedLabel.classList.remove('d-none');
            relatedSelectContainer.classList.remove('d-none');

            relatedLabel.textContent = 'Dueño ligado:';
            updateSelectOptions(owners, 'Seleccione un dueño para el usuario --');
        } else if (this.value === "Inversionistas") {
            labelInvestorType.classList.remove('d-none');
            containerSelectInvestorType.classList.remove('d-none');
            relatedLabel.classList.add('d-none');
            relatedSelectContainer.classList.add('d-none');
            // Falta añadir d-none al relatedContainer

        } else {
            labelInvestorType.classList.add('d-none');
            containerSelectInvestorType.classList.add('d-none');
            relatedLabel.classList.remove('d-none');
            relatedSelectContainer.classList.remove('d-none');

            relatedLabel.textContent = 'Administrador ligado:';
            updateSelectOptions(admins, 'Seleccione un administrador para el usuario --');
        }
    });
    selectPrivilegesUpd.addEventListener('change', function () {
        console.log('change');
        if (this.value === 'Colaborador dueño') {
            labelInvestorTypeUpd.classList.add('d-none');
            containerSelectInvestorTypeUpd.classList.add('d-none');
            relatedLabelUpd.classList.remove('d-none');
            relatedSelectContainerUpd.classList.remove('d-none');

            relatedLabelUpd.textContent = 'Dueño ligado:';
            updateSelectOptionsUpd(owners, 'Seleccione un dueño para el usuario --');
        } else if (this.value === "Inversionistas") {
            labelInvestorTypeUpd.classList.remove('d-none');
            containerSelectInvestorTypeUpd.classList.remove('d-none');
            relatedLabelUpd.classList.add('d-none');
            relatedSelectContainerUpd.classList.add('d-none');
            // Falta añadir d-none al relatedContainer

        } else {
            labelInvestorTypeUpd.classList.add('d-none');
            containerSelectInvestorTypeUpd.classList.add('d-none');
            relatedLabelUpd.classList.remove('d-none');
            relatedSelectContainerUpd.classList.remove('d-none');

            relatedLabelUpd.textContent = 'Administrador ligado:';
            updateSelectOptionsUpd(admins, 'Seleccione un administrador para el usuario --');
        }
    });

    function updateSelectOptions(options, placeholder) {
        let selectHTML = `<select id="slctUserAdmin" name="slctUserAdmin" class="form-select form-select-md">`;
        selectHTML += `<option value="" selected="true" disabled="true">${placeholder}</option>`;
        if (options.length > 0) {
            options.forEach(option => {
                selectHTML += `<option value="${option._id}">${option.firstName} ${option.lastName}</option>`;
            });
        } else {
            selectHTML += `<option value="0">No se encontraron opciones</option>`;
        }
        selectHTML += `</select>`;
        relatedSelectContainer.innerHTML = selectHTML;
    }

    function updateSelectOptionsUpd(options, placeholder) {
        let selectHTML = `<select id="slctUserAdminUpd" name="slctUserAdminUpd" class="form-select form-select-md">`;
        selectHTML += `<option value="" selected="true" disabled="true">${placeholder}</option>`;
        if (options.length > 0) {
            options.forEach(option => {
                selectHTML += `<option value="${option._id}">${option.firstName} ${option.lastName}</option>`;
            });
        } else {
            selectHTML += `<option value="0">No se encontraron opciones</option>`;
        }
        selectHTML += `</select>`;
        relatedSelectContainerUpd.innerHTML = selectHTML;
    }




    });

    function showClientEmail(button) {
        const firstName = button.getAttribute('data-client-firstname');
        const lastName = button.getAttribute('data-client-lastname');
        const email = button.getAttribute('data-client-email');
        const privilege = button.getAttribute('data-client-privilege');
        const adminName = button.getAttribute('data-client-adminname');
        const color = button.getAttribute('data-client-color');
        const investorType = button.getAttribute('data-client-investorType');
        const phone = button.getAttribute('data-client-phone');

        const owners = {{{ json owners }}};
        const admins = {{{ json admins }}};

        const selectPrivilegesUpd = document.getElementById('slctUserPrivilegesUpd');
        const relatedLabelUpd = document.getElementById('relatedLabelUpd');
        const relatedSelectContainerUpd = document.getElementById('relatedSelectContainerUpd');

        const labelInvestorTypeUpd = document.getElementById('labelSelectInvestorTypeUpd');
        const containerSelectInvestorTypeUpd = document.getElementById('containerSelectInvestorTypeUpd');
        const selectInvestorTypeUpd = document.getElementById('select-investorTypeUpd');

        if (privilege === 'Colaborador dueño') {
            labelInvestorTypeUpd.classList.add('d-none');
            containerSelectInvestorTypeUpd.classList.add('d-none');
            relatedLabelUpd.classList.remove('d-none');
            relatedSelectContainerUpd.classList.remove('d-none');

            relatedLabelUpd.textContent = 'Dueño ligado:';
            updateSelectOptionsUpd(owners, 'Seleccione un dueño para el usuario --');
        } else if (privilege === "Inversionistas") {
            labelInvestorTypeUpd.classList.remove('d-none');
            containerSelectInvestorTypeUpd.classList.remove('d-none');
            relatedLabelUpd.classList.add('d-none');
            relatedSelectContainerUpd.classList.add('d-none');
            // Falta añadir d-none al relatedContainer

        } else {
            labelInvestorTypeUpd.classList.add('d-none');
            containerSelectInvestorTypeUpd.classList.add('d-none');
            relatedLabelUpd.classList.remove('d-none');
            relatedSelectContainerUpd.classList.remove('d-none');

            relatedLabelUpd.textContent = 'Administrador ligado:';
            updateSelectOptionsUpd(admins, 'Seleccione un administrador para el usuario --');
        }


        document.querySelector('#txtUserNameUpd').value = firstName
        document.querySelector('#txtUserLastnameUpd').value = lastName
        document.querySelector('#txtUserEmailUpd').value = email
        document.querySelector('#slctUserPrivilegesUpd').value = privilege
        document.querySelector('#slctUserAdminUpd').value = adminName;
        document.querySelector('#colaboratorColorUpd').value = color;
        document.querySelector('#select-investorTypeUpd').value = investorType;
        document.querySelector('#userPhoneNmbUpd').value = phone.replace("+52", "");


    }

    function updateSelectOptionsUpd(options, placeholder) {
        let selectHTML = `<select id="slctUserAdminUpd" name="slctUserAdminUpd" class="form-select form-select-md">`;
        selectHTML += `<option value="" selected="true" disabled="true">${placeholder}</option>`;
        if (options.length > 0) {
            options.forEach(option => {
                selectHTML += `<option value="${option._id}">${option.firstName} ${option.lastName}</option>`;
            });
        } else {
            selectHTML += `<option value="0">No se encontraron opciones</option>`;
        }
        selectHTML += `</select>`;
        relatedSelectContainerUpd.innerHTML = selectHTML;
    }

    async function deleteUser(button) {
        const confirmation = await Swal.fire({
            title: '¿Estás seguro de eliminar este usuario?',
            text: "Esta acción no se puede deshacer.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
        })

        if (confirmation.isConfirmed){

            console.log(button)
            const email = button.getAttribute('data-client-email');
            console.log(email)
            const data = {
                email: email
            };

            fetch('/api/usuarios/eliminar-usuario', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        response.json().then(errorData => {
                            const errors = errorData.error;
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: "Error en la solicitud: " + errors[0].message.toLowerCase() + ".",
                                confirmButtonText: 'Aceptar'
                            });
                        });
                        throw new Error('Error en la solicitud');
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: data.message + '.',
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload();
                        }
                    });
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al enviar la solicitud: ' + error.toLowerCase() + '.',
                        confirmButtonText: 'Aceptar'
                    });
                });
        }

    }

</script>