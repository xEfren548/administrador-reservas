<div class="bg-black text-white">
    <div class="min-h-screen flex flex-col items-center p-4">
        <h1 class="text-3xl font-bold text-center mb-8">Cotizador de Cabañas</h1>

        <!-- Contenedor del buscador -->
        <div class="w-auto max-w-6xl bg-gray-900 rounded-lg shadow-lg border border-gray-700 p-6">
            <form class="flex flex-col md:flex-row gap-4">
                <!-- Campo: Categorías (dropdown con checkboxes) -->
                <div class="flex-1 relative">
                    <label class="block text-sm font-medium text-gray-400">Categorías</label>
                    <div class="relative mt-1">
                        <!-- Botón para abrir/cerrar el dropdown -->
                        <button id="dropdown-button" type="button"
                            class="w-full p-2 bg-gray-800 border border-gray-700 rounded-md text-white text-left flex items-center justify-between">
                            <span>Seleccionar categorías</span>
                            <svg class="h-5 w-5">...</svg>
                        </button>

                        <!-- Dropdown con checkboxes -->
                        <div id="dropdown-content"
                            class="absolute z-10 mt-2 min-w-[240px] max-w-96 bg-gray-800 border border-gray-700 rounded-md shadow-lg hidden left-0 right-0 overflow-visiblegi">
                            <div class="p-2">
                                <!-- Checkbox "Mostrar todo" -->
                                <label class="flex items-center space-x-2 p-2 hover:bg-gray-700 rounded-md">
                                    <input type="checkbox" name="categorias" value="all"
                                        class="form-checkbox text-blue-500 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                                        checked />
                                    <span>Mostrar todo</span>
                                </label>

                                <!-- Checkboxes de categorías -->
                                {{#each tipologias}}
                                <label for="categoria-{{@index}}"
                                    class="flex items-center space-x-2 p-2 hover:bg-gray-700 rounded-md cursor-pointer">
                                    <input type="checkbox" id="categoria-{{@index}}" name="categorias"
                                        value="{{this.tipologia}}"
                                        class="form-checkbox text-blue-500 bg-gray-700 border-gray-600 rounded focus:ring-blue-500" />
                                    <span>{{this.tipologia}}</span>
                                </label>
                                {{/each}}

                            </div>
                        </div>
                    </div>
                </div>

                <!-- Campo: Fecha de llegada -->
                <div class="flex-1">
                    <label class="block text-sm font-medium text-gray-400">Fechas</label>
                    <input type="text" id="fecha-input" placeholder="Seleccionar fechas"
                        class="mt-1 block w-72 p-2 bg-gray-800 border border-gray-700 rounded-md text-white placeholder-current flatpickr-input" />
                </div>

                <!-- Campo: Fecha de salida -->
                <input type="hidden" id="fecha-llegada">
                <input type="hidden" id="fecha-salida">


                <!-- Campo: Huéspedes -->
                <div class="flex-1">
                    <label class="block text-sm font-medium text-gray-400">Huéspedes</label>
                    <div class="p-2 bg-gray-800 border border-gray-700 rounded-md text-white">
                        <!-- Título y descripción -->
                        {{!-- <div class="text-sm">Huéspedes</div> --}}

                        <!-- Contador de huéspedes -->
                        <div class="flex items-center justify-between w-32 h-auto">
                            <!-- Botón para disminuir -->
                            <button id="decrementar"
                                class="p-1 bg-gray-700 rounded-md hover:bg-gray-600 transition-colors"
                                aria-label="Disminuir número de huéspedes">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20"
                                    fill="currentColor">
                                    <path fill-rule="evenodd" d="M5 10a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1z"
                                        clip-rule="evenodd" />
                                </svg>
                            </button>

                            <!-- Número de huéspedes -->
                            <span id="numero-huespedes" class="text-lg">1</span>

                            <!-- Botón para aumentar -->
                            <button id="incrementar"
                                class="p-1 bg-gray-700 rounded-md hover:bg-gray-600 transition-colors"
                                aria-label="Aumentar número de huéspedes">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20"
                                    fill="currentColor">
                                    <path fill-rule="evenodd"
                                        d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                                        clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="flex-1 justify-center items-center text-center ">
                    <label class="block text-sm font-medium text-gray-400">Mostrar solo disponibles</label>
                    <input type="checkbox" id="buscar-solo-disponibles"
                        class="form-checkbox text-blue-500 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                        checked />
                </div>

                <!-- Botón de búsqueda -->
                <div class="flex items-end">
                    <button type="submit" id="buscar-chalets-btn"
                        class="w-full md:w-auto p-3 text-white rounded-md transition-colors flex items-center justify-center bg-gradient-to-r from-purple-600 to-blue-500 hover:from-purple-700 hover:to-blue-600 shadow-lg hover:shadow-xl">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20"
                            fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                                clip-rule="evenodd" />
                        </svg>
                        Buscar
                    </button>
                </div>
            </form>
        </div>
        <div id="resultados" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4"></div>
    </div>

</div>

<!-- Modal -->
<div id="modal-reserva" class="fixed inset-0 z-50 hidden">
    <!-- Fondo oscuro -->
    <div class="fixed inset-0 bg-black bg-opacity-50">

        <!-- Contenedor del modal -->
        <div class="fixed inset-0 flex items-center justify-center p-4">
            <div class="bg-gray-900 text-white rounded-lg shadow-lg w-full max-w-2xl max-h-screen overflow-y-auto">
                <!-- Encabezado del modal -->
                <div class="p-4 border-b border-gray-700">
                    <h2 class="text-xl font-semibold">Reservar Habitación</h2>
                </div>

                <!-- Cuerpo del modal -->
                <div class="p-4 space-y-4">
                    <!-- Sección: Tipo de Reserva -->
                    <div class="w-11/12 mx-auto"> <!-- 90% del ancho y centrado -->
                        <label
                            class="block text-sm font-medium text-white-400 mb-2 flex items-center justify-center">Tipo
                            de Reserva</label>
                        <div class="relative w-full flex items-center justify-center">
                            <input type="checkbox" id="toggleReserva" class="sr-only">
                            <div class="w-full max-w-lg bg-gray-700 rounded-full p-1 flex justify-between items-center">
                                <span id="label-depo"
                                    class="flex-1 text-center text-white text-sm px-4 py-2 rounded-l-full cursor-pointer transition-all duration-300 bg-gradient-to-r from-purple-500 to-pink-500">
                                    Por depo
                                </span>
                                <span id="label-reserva"
                                    class="flex-1 text-center text-white text-sm px-4 py-2 rounded-r-full cursor-pointer transition-all duration-300">
                                    Reserva
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="hidden" id="modalClientContainer">
                        <div
                            class="w-full max-w-lg mx-auto bg-gray-900 rounded-lg shadow-lg border border-gray-700 p-6">
                            <div class="mb-4 select-container">
                                <label for="lblClient" class="block text-sm font-medium text-gray-400">Cliente</label>
                                <input type="text" id="lblClient"
                                    class="w-full p-2 bg-gray-800 border border-gray-700 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                    autocomplete="off" placeholder="Buscar y seleccionar cliente..." required>

                                <!-- Contenedor de opciones -->
                                <div class="relative">
                                    <div id="selectOptions"
                                        class="select-options absolute w-full bg-gray-800 border border-gray-700 rounded-md shadow-lg mt-1 hidden max-h-48 overflow-y-auto">
                                        {{#if clientes}}
                                        {{#each clientes}}
                                        <div class="select-option px-4 py-2 hover:bg-gray-700 cursor-pointer text-white"
                                            data-value="{{this.email}}"
                                            data-label="{{this.firstName}} {{this.lastName}} ({{this.email}})">
                                            {{this.firstName}} {{this.lastName}} ({{this.email}})
                                        </div>
                                        {{/each}}
                                        {{else}}
                                        <div class="select-optionpx-4 py-2 text-gray-400">No se encontraron clientes
                                        </div>
                                        {{/if}}
                                    </div>
                                </div>

                                <input type="hidden" name="lblClient" id="lblClientValue">
                            </div>

                            <!-- Botón para dar de alta un cliente -->
                            <div class="flex justify-center">
                                <button
                                    class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md transition"
                                    id="clientEntryModalBtn">
                                    Alta de Cliente
                                </button>
                            </div>
                        </div>
                    </div>

                    <div id="container-alta-cliente-provisional"
                        class="w-full max-w-lg mx-auto bg-gray-900 rounded-lg shadow-lg border border-gray-700 p-6">
                        <h3 class="text-xl font-semibold text-white mb-4 text-center">Cliente</h3>

                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <!-- Nombre -->
                            <div>
                                <label for="nombre-cliente-provisional"
                                    class="block text-sm font-medium text-gray-400">Nombre</label>
                                <input type="text" id="nombre-cliente-provisional"
                                    class="w-full p-2 bg-gray-800 border border-gray-700 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                    placeholder="Nombre de cliente">
                            </div>

                            <!-- Apellido -->
                            <div>
                                <label for="apellido-cliente-provisional"
                                    class="block text-sm font-medium text-gray-400">Apellido</label>
                                <input type="text" id="apellido-cliente-provisional"
                                    class="w-full p-2 bg-gray-800 border border-gray-700 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                    placeholder="Apellido de cliente">
                            </div>
                        </div>
                    </div>



                    <!-- Sección: Información de la Reserva -->
                    <div>
                        <div
                            class="w-full max-w-lg mx-auto bg-gray-900 rounded-lg shadow-lg border border-gray-700 p-6">
                            <div class="mb-4">
                                <h3 class="text-xl font-semibold text-white mb-4 text-center">Información de la reserva
                                </h3>

                                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <div>
                                        <label for="fecha-llegada-input"
                                            class="block text-sm font-medium text-gray-400">Check in</label>
                                        <span id="fecha-llegada-input"
                                            class="w-full p-2 bg-gray-800 text-white focus:ring-2 focus:ring-blue-500 flex items-center justify-center"></span>
                                    </div>

                                    <div>
                                        <label for="fecha-salida-input"
                                            class="block text-sm font-medium text-gray-400">Check out</label>
                                        {{!-- <input type="text" id="fecha-salida-input"
                                            class="w-full p-2 bg-gray-800 border border-gray-700 rounded-md text-white focus:ring-2 focus:ring-blue-500">
                                        --}}
                                        <span id="fecha-salida-input"
                                            class="w-full p-2 bg-gray-800 text-white focus:ring-2 focus:ring-blue-500 flex items-center justify-center text-center"></span>
                                    </div>

                                    <div>
                                        <label for="huespedes-input"
                                            class="block text-sm font-medium text-gray-400">Huéspedes</label>
                                        <span id="huespedes-input"
                                            class="w-full p-2 bg-gray-800 text-white focus:ring-2 focus:ring-blue-500 flex items-center justify-center"></span>

                                    </div>

                                    <div>
                                        <label for="nights-input"
                                            class="block text-sm font-medium text-gray-400">Noches</label>
                                        <span id="nights-input"
                                            class="w-full p-2 bg-gray-800 text-white focus:ring-2 focus:ring-blue-500 flex items-center justify-center"></span>

                                    </div>

                                    <input type="hidden" id="nombre-habitacion-input">
                                    <input type="hidden" id="min-pax-input">
                                    <input type="hidden" id="max-pax-input">
                                    <input type="hidden" id="costo-total-input">
                                    <input type="hidden" id="precio-total-nocoms-input">

                                </div>

                                <h3 class="text-2xl font-bold text-white mb-4 mt-4 text-center">Precio total: <span
                                        id="precio-total" class="text-blue-500 font-bold text-2xl"></span></h3>

                            </div>
                        </div>

                        <!-- Pie del modal -->
                        <div class="p-4 border-t border-gray-700 flex justify-end space-x-2">
                            <button id="cerrar-modal"
                                class="px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600">
                                Cerrar
                            </button>
                            <button id="confirmar-reserva"
                                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                                Confirmar Reserva
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Container -->
<div id="clientEntryModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        <!-- Modal Overlay -->
        <div class="fixed inset-0 transition-opacity bg-black bg-opacity-50" aria-hidden="true"></div>

        <!-- Modal Content -->
        <div
            class="inline-block w-full max-w-3xl p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-gray-800 rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-3xl">
            <!-- Modal Header -->
            <div class="flex items-center justify-between pb-4 border-b border-gray-700">
                <h3 class="text-xl font-semibold leading-6 text-white">Alta de cliente</h3>
                <button type="button" onclick="closeModal()"
                    class="text-gray-400 hover:text-gray-200 focus:outline-none">
                    <span class="text-2xl">&times;</span>
                </button>
            </div>

            <!-- Modal Body -->
            <div class="mt-4">
                <form id="frmCreateClient" action="/api/clientes/crear-cliente" method="post">
                    <div class="space-y-4">
                        <!-- Name -->
                        <div>
                            <label for="txtClientName" class="block text-sm font-medium text-gray-400">Nombre</label>
                            <input type="text" name="txtClientName" id="txtClientName"
                                class="w-full p-2 mt-1 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                placeholder="Nombre">
                        </div>

                        <!-- Lastname -->
                        <div>
                            <label for="txtClientLastname"
                                class="block text-sm font-medium text-gray-400">Apellido</label>
                            <input type="text" name="txtClientLastname" id="txtClientLastname"
                                class="w-full p-2 mt-1 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                placeholder="Apellido">
                        </div>

                        <!-- Phone -->
                        <div>
                            <label for="txtClientPhone" class="block text-sm font-medium text-gray-400">Teléfono</label>
                            <input type="tel" name="txtClientPhone" id="txtClientPhone"
                                class="w-full p-2 mt-1 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                placeholder="Teléfono">
                        </div>

                        <!-- Address -->
                        <div>
                            <label for="txtClientAddress"
                                class="block text-sm font-medium text-gray-400">Dirección</label>
                            <input type="text" name="txtClientAddress" id="txtClientAddress"
                                class="w-full p-2 mt-1 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                placeholder="Dirección">
                        </div>

                        <!-- Email -->
                        <div>
                            <label for="txtClientEmail" class="block text-sm font-medium text-gray-400">Email</label>
                            <input type="text" name="txtClientEmail" id="txtClientEmail"
                                class="w-full p-2 mt-1 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                placeholder="Email">
                        </div>

                        <!-- ID Type -->
                        <div>
                            <label for="slctClientIdType" class="block text-sm font-medium text-gray-400">Tipo de
                                identificación</label>
                            <select name="slctClientIdType" id="slctClientIdType"
                                class="w-full p-2 mt-1 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                required>
                                <option value="" selected disabled>Selecciona el tipo de identificación del cliente
                                </option>
                                <option value="INE">INE</option>
                                <option value="Pasaporte">Pasaporte</option>
                                <option value="Licencia de conducir">Licencia de conducir</option>
                            </select>
                        </div>

                        <!-- ID Number -->
                        <div>
                            <label for="txtClientIdNumber" class="block text-sm font-medium text-gray-400">Número de
                                identificación</label>
                            <input type="text" name="txtClientIdNumber" id="txtClientIdNumber"
                                class="w-full p-2 mt-1 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-blue-500"
                                placeholder="Número de identificación">
                        </div>
                    </div>

                    <!-- Error Message -->
                    <div class="mt-4">
                        <p id="txtInsertClientError" class="text-sm text-red-500"></p>
                    </div>

                    <!-- Modal Footer -->
                    <div class="flex justify-end mt-6 space-x-3">
                        <button type="button" onclick="closeModal()"
                            class="px-4 py-2 text-sm font-medium text-white bg-gray-600 rounded-md hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-500">Regresar</button>
                        <button type="button" id="btnSaveClient"
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500">Agregar
                            Cliente</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://npmcdn.com/flatpickr/dist/l10n/es.js"></script>
<script>
    // Configuración de Flatpickr
    const fechaInput = document.getElementById("fecha-input");

    flatpickr("#fecha-input", {
        mode: "range", // Selección de rango de fechas
        dateFormat: "d/m/Y", // Formato de fecha: dd/mm/aaaa
        locale: "es", // Idioma español
        minDate: "today", // Fecha mínima: hoy
        disableMobile: true, // Evita el comportamiento nativo en móviles
        onChange: function (selectedDates, dateStr, instance) {
            const fechaLlegadaInput = document.getElementById("fecha-llegada");
            const fechaSalidaInput = document.getElementById("fecha-salida");

            if (selectedDates.length === 2) {
                // Formatear las fechas usando formatDate
                const fechaLlegada = instance.formatDate(selectedDates[0], "d/m/Y");
                const fechaSalida = instance.formatDate(selectedDates[1], "d/m/Y");

                // Actualizar el valor del campo de entrada manualmente
                fechaInput.value = `${fechaLlegada} a ${fechaSalida}`;

                fechaLlegadaInput.value = fechaLlegada;
                fechaSalidaInput.value = fechaSalida;


                console.log("Fecha de llegada:", fechaLlegada);
                console.log("Fecha de salida:", fechaSalida);
            }
        },
    });

    // Variables
    const numeroHuespedes = document.getElementById("numero-huespedes");
    const botonDecrementar = document.getElementById("decrementar");
    const botonIncrementar = document.getElementById("incrementar");

    let contador = 1; // Valor inicial

    // Función para actualizar el contador
    const actualizarContador = () => {
        numeroHuespedes.textContent = contador;
    };

    // Evento para disminuir el número de huéspedes
    botonDecrementar.addEventListener("click", (e) => {
        e.preventDefault();
        if (contador > 1) {
            contador--;
            actualizarContador();
        }
    });

    // Evento para aumentar el número de huéspedes
    botonIncrementar.addEventListener("click", (e) => {
        e.preventDefault();
        if (contador < 20) { // Límite máximo de 10 huéspedes
            contador++;
            actualizarContador();
        }
    });

    // FUNCIONES PARA CATEGORIAS DESPLEGABLES
    document.addEventListener("DOMContentLoaded", function () {
        // Evita que el formulario se recargue
        document.querySelector("form").addEventListener("submit", function (event) {
            event.preventDefault();
        });

        const dropdownButton = document.getElementById("dropdown-button");
        const dropdownContent = document.getElementById("dropdown-content");
        const mostrarTodoCheckbox = document.querySelector('input[name="categorias"][value="all"]');
        const categoriaCheckboxes = document.querySelectorAll('input[name="categorias"]:not([value="all"])');

        // Mostrar / Ocultar dropdown
        dropdownButton.addEventListener("click", function (event) {
            event.stopPropagation();
            dropdownContent.classList.toggle("hidden");
        });

        // Cerrar el dropdown si se hace clic fuera
        document.addEventListener("click", function (event) {
            if (!dropdownContent.contains(event.target) && !dropdownButton.contains(event.target)) {
                dropdownContent.classList.add("hidden");
            }
        });

        // Cuando se selecciona cualquier categoría distinta a "Mostrar todo"
        categoriaCheckboxes.forEach(checkbox => {
            checkbox.addEventListener("change", function () {
                if (this.checked) {
                    mostrarTodoCheckbox.checked = false; // Deseleccionar "Mostrar todo" si se selecciona otra categoría
                }
            });
        });

        // Cuando se selecciona "Mostrar todo"
        mostrarTodoCheckbox.addEventListener("change", function () {
            if (this.checked) {
                categoriaCheckboxes.forEach(checkbox => {
                    checkbox.checked = false; // Deseleccionar todas las categorías si "Mostrar todo" es seleccionado
                });
            }
        });

        // ENVIO DE INFORMACION PARA BUSCAR CABAÑAS DISPONIBLES

        const buscarChaletsBtn = document.getElementById("buscar-chalets-btn");

        buscarChaletsBtn.addEventListener("click", async function (event) {
            event.preventDefault();

            const checkboxesSeleccionados = document.querySelectorAll('input[name="categorias"]:checked');
            const categoriasSeleccionadas = Array.from(checkboxesSeleccionados).map(checkbox => checkbox.value);
            const fechaLlegada = document.getElementById("fecha-llegada").value;
            const fechaSalida = document.getElementById("fecha-salida").value;
            const huespedes = document.getElementById("numero-huespedes").textContent;
            const buscarSoloDisponiblesChk = document.getElementById("buscar-solo-disponibles").checked;

            console.log("Categorias seleccionadas:", categoriasSeleccionadas);
            console.log("Fecha de llegada:", fechaLlegada);
            console.log("Fecha de salida:", fechaSalida);
            console.log("Número de húspedes:", huespedes);
            console.log("Buscar solo disponibles:", buscarSoloDisponiblesChk);

            if (categoriasSeleccionadas.length === 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'No ha seleccionado ninguna categoría',
                    text: 'Por favor, seleccione al menos una categoría.',
                    confirmButtonText: 'Aceptar'
                });
                return;
            }

            if (!fechaLlegada || !fechaSalida) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Faltan fechas',
                    text: 'Por favor, seleccione las fechas de llegada y salida.',
                    confirmButtonText: 'Aceptar'
                });
                return;
            }

            if (!huespedes) {
                Swal.fire({
                    icon: 'warning',
                    title: 'No ha seleccionado el número de húspedes',
                    text: 'Por favor, seleccione el número de húspedes.',
                    confirmButtonText: 'Aceptar'
                });
                return;
            }

            const datos = {
                categorias: categoriasSeleccionadas,
                fechaLlegada: fechaLlegada,
                fechaSalida: fechaSalida,
                huespedes: parseInt(huespedes, 10), // Convertir a número
                soloDisponibles: buscarSoloDisponiblesChk,
            };

            console.log("Datos a enviar:", datos);

            try {
                Swal.fire({
                    title: 'Cargando...',
                    text: 'Buscando cabañas disponibles...',
                    icon: 'info',
                    showConfirmButton: false
                })
                // Enviar los datos al backend usando fetch
                const respuesta = await fetch("/api/eventos/cotizaciones", {
                    method: "POST", // Método HTTP
                    headers: {
                        "Content-Type": "application/json", // Indicar que el cuerpo es JSON
                    },
                    body: JSON.stringify(datos), // Convertir el objeto a JSON
                });

                // Verificar si la respuesta es exitosa
                if (!respuesta.ok) {
                    const errorData = await respuesta.json();
                    throw new Error("Error en la solicitud: " + errorData.message);
                }

                // Obtener la respuesta del backend (si es necesario)
                const resultado = await respuesta.json();
                console.log("Respuesta del backend:", resultado);

                Swal.close();

                // Aquí puedes manejar la respuesta del backend (por ejemplo, mostrar las habitaciones disponibles)
                mostrarResultados(resultado.chalets, resultado.evento);

            } catch (error) {
                Swal.close();
                console.error("Error al enviar los datos:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    confirmButtonText: 'Aceptar'
                })
            }
        });

        function mostrarResultados(habitaciones, evento) {
            const contenedorResultados = document.getElementById("resultados");
            contenedorResultados.innerHTML = ""; // Limpiar resultados anteriores

            if (habitaciones.length === 0) {
                const noResultados = document.createElement("p");
                noResultados.textContent = "No se encontraron cabañas disponibles.";
                contenedorResultados.appendChild(noResultados);
                return;
            }

            habitaciones.forEach((habitacion) => {
                const tarjeta = document.createElement("div");
                tarjeta.classList.add(
                    "bg-gray-800",
                    "rounded-lg",
                    "shadow-lg",
                    "overflow-hidden"
                );

                // Imagen de la habitación (puedes usar una imagen real si está disponible)
                const imageContainer = document.createElement("div");
                imageContainer.classList.add("relative", "w-full", "image-slider");

                const images = Array.isArray(habitacion.images) ? habitacion.images : [habitacion.images];
                const fallbackImage = "https://www.bosquestapalpa.com.mx/bosquestapalpa/contenido/8a62e2784_blog_.jpg";

                const createImageModal = () => {
                    // Check if modal already exists
                    if (document.getElementById('image-modal')) return;
                    
                    const modal = document.createElement("div");
                    modal.id = "image-modal";
                    modal.classList.add("fixed", "inset-0", "bg-black", "bg-opacity-90", "z-50", "hidden", "flex", "items-center", "justify-center", "flex-col");
                    
                    const modalContent = document.createElement("div");
                    modalContent.classList.add("w-full", "max-w-4xl", "h-full", "max-h-screen", "flex", "flex-col", "items-center", "justify-center", "p-4");
                    
                    const closeBtn = document.createElement("button");
                    closeBtn.innerHTML = "×";
                    closeBtn.classList.add("absolute", "top-4", "right-6", "text-white", "text-4xl", "hover:text-gray-300", "focus:outline-none");
                    closeBtn.onclick = () => modal.classList.add("hidden");
                    
                    const imageContainer = document.createElement("div");
                    imageContainer.classList.add("relative", "w-full", "h-4/5", "flex", "items-center", "justify-center");
                    
                    const modalImage = document.createElement("img");
                    modalImage.id = "modal-image";
                    modalImage.classList.add("max-h-full", "max-w-full", "object-contain");
                    
                    const prevBtn = document.createElement("button");
                    prevBtn.innerHTML = "&#10094;";
                    prevBtn.id = "modal-prev";
                    prevBtn.classList.add("absolute", "left-0", "top-1/2", "transform", "-translate-y-1/2", "bg-black", "bg-opacity-50", "text-white", "p-4", "rounded", "hover:bg-opacity-70");
                    
                    const nextBtn = document.createElement("button");
                    nextBtn.innerHTML = "&#10095;";
                    nextBtn.id = "modal-next";
                    nextBtn.classList.add("absolute", "right-0", "top-1/2", "transform", "-translate-y-1/2", "bg-black", "bg-opacity-50", "text-white", "p-4", "rounded", "hover:bg-opacity-70");
                    
                    const counter = document.createElement("div");
                    counter.id = "modal-counter";
                    counter.classList.add("mt-4", "text-white", "text-center");
                    
                    imageContainer.appendChild(modalImage);
                    imageContainer.appendChild(prevBtn);
                    imageContainer.appendChild(nextBtn);
                    
                    modalContent.appendChild(imageContainer);
                    modalContent.appendChild(counter);
                    
                    modal.appendChild(closeBtn);
                    modal.appendChild(modalContent);
                    
                    document.body.appendChild(modal);
                    
                    // Close modal when clicking on the backdrop (outside of content)
                    modal.addEventListener("click", (e) => {
                        if (e.target === modal) {
                            modal.classList.add("hidden");
                        }
                    });
                };

                // Create the modal once
                createImageModal();

                // Function to open the modal with specific images
                const openImageModal = (imageUrls, startIndex = 0) => {
                    const modal = document.getElementById('image-modal');
                    const modalImage = document.getElementById('modal-image');
                    const counter = document.getElementById('modal-counter');
                    const prevBtn = document.getElementById('modal-prev');
                    const nextBtn = document.getElementById('modal-next');
                    
                    let currentIndex = startIndex;
                    
                    // Update the image and counter
                    const updateModalImage = () => {
                        modalImage.src = imageUrls[currentIndex];
                        counter.textContent = `${currentIndex + 1} / ${imageUrls.length}`;
                        
                        // Handle image loading errors
                        modalImage.onerror = () => {
                            console.warn(`La imagen modal ${modalImage.src} no se pudo cargar. Usando imagen de respaldo.`);
                            modalImage.src = fallbackImage;
                        };
                    };
                    
                    // Set up navigation
                    prevBtn.onclick = (e) => {
                        e.stopPropagation();
                        currentIndex = (currentIndex - 1 + imageUrls.length) % imageUrls.length;
                        updateModalImage();
                    };
                    
                    nextBtn.onclick = (e) => {
                        e.stopPropagation();
                        currentIndex = (currentIndex + 1) % imageUrls.length;
                        updateModalImage();
                    };
                    
                    // Show/hide navigation buttons based on image count
                    if (imageUrls.length <= 1) {
                        prevBtn.classList.add("hidden");
                        nextBtn.classList.add("hidden");
                        counter.classList.add("hidden");
                    } else {
                        prevBtn.classList.remove("hidden");
                        nextBtn.classList.remove("hidden");
                        counter.classList.remove("hidden");
                    }
                    
                    // Set initial image
                    updateModalImage();
                    
                    // Show modal
                    modal.classList.remove("hidden");
                    
                    // Add keyboard navigation
                    const handleKeydown = (e) => {
                        if (e.key === "ArrowLeft") {
                            prevBtn.click();
                        } else if (e.key === "ArrowRight") {
                            nextBtn.click();
                        } else if (e.key === "Escape") {
                            modal.classList.add("hidden");
                            document.removeEventListener("keydown", handleKeydown);
                        }
                    };
                    
                    document.addEventListener("keydown", handleKeydown);
                    
                    // Remove event listener when modal is closed
                    const onModalHidden = () => {
                        if (modal.classList.contains("hidden")) {
                            document.removeEventListener("keydown", handleKeydown);
                            modal.removeEventListener("transitionend", onModalHidden);
                        }
                    };
                    
                    modal.addEventListener("transitionend", onModalHidden);
                };


                if (images.length > 1) {    
                    const carousel = document.createElement("div");
                    carousel.classList.add("carousel", "w-full", "h-48", "relative");

                    // Prepare full image URLs for modal
                    const fullImageUrls = images.map(imgSrc => `https://navarro.integradev.site/navarro/${imgSrc}`);

                    // Agregar todas las imágenes al carrusel
                    images.forEach((imgSrc, index) => {
                        const slide = document.createElement("div");
                        slide.classList.add("carousel-slide", "absolute", "w-full", "h-full", "cursor-pointer");
                        slide.style.display = index === 0 ? "block" : "none";

                        const img = document.createElement("img");
                        img.src = `https://navarro.integradev.site/navarro/${imgSrc}`;
                        img.alt = `${habitacion.name} - Imagen ${index + 1}`;
                        img.classList.add("w-full", "h-48", "object-cover");

                        img.onerror = () => {
                            console.warn(`La imagen ${img.src} no se pudo cargar. Usando imagen de respaldo.`);
                            img.src = fallbackImage;
                            // Update fullImageUrls if fallback is used
                            fullImageUrls[index] = fallbackImage;
                        };

                        // Add click event to open modal
                        slide.addEventListener("click", () => {
                            openImageModal(fullImageUrls, index);
                        });

                        slide.appendChild(img);
                        carousel.appendChild(slide);
                    });

                    // Agregar botones de navegación
                    const prevBtn = document.createElement("button");
                    prevBtn.innerHTML = "&#10094;";
                    prevBtn.classList.add("carousel-btn", "prev", "absolute", "left-0", "top-1/2", "bg-black", "bg-opacity-50", "text-white", "p-2", "rounded", "z-10");

                    const nextBtn = document.createElement("button");
                    nextBtn.innerHTML = "&#10095;";
                    nextBtn.classList.add("carousel-btn", "next", "absolute", "right-0", "top-1/2", "bg-black", "bg-opacity-50", "text-white", "p-2", "rounded", "z-10");

                    carousel.appendChild(prevBtn);
                    carousel.appendChild(nextBtn);

                    // Agregar lógica para navegar por las imágenes
                    let currentIndex = 0;
                    const slides = carousel.querySelectorAll(".carousel-slide");

                    prevBtn.addEventListener("click", (e) => {
                        e.stopPropagation(); // Prevent opening modal when clicking navigation
                        slides[currentIndex].style.display = "none";
                        currentIndex = (currentIndex - 1 + slides.length) % slides.length;
                        slides[currentIndex].style.display = "block";
                    });

                    nextBtn.addEventListener("click", (e) => {
                        e.stopPropagation(); // Prevent opening modal when clicking navigation
                        slides[currentIndex].style.display = "none";
                        currentIndex = (currentIndex + 1) % slides.length;
                        slides[currentIndex].style.display = "block";
                    });

                    imageContainer.appendChild(carousel);
                } else {
                    // Si solo hay una imagen, mostrarla directamente
                    const img = document.createElement("img");
                    img.src = `https://navarro.integradev.site/navarro/${images[0]}`;
                    img.alt = habitacion.name;
                    img.classList.add("w-full", "h-48", "object-cover", "cursor-pointer");

                    // Prepare full image URL for modal
                    let fullImageUrl = img.src;

                    img.onerror = () => {
                        console.warn(`La imagen ${img.src} no se pudo cargar. Usando imagen de respaldo.`);
                        img.src = fallbackImage;
                        fullImageUrl = fallbackImage;
                    };

                    // Add click event to open modal
                    img.addEventListener("click", () => {
                        openImageModal([fullImageUrl]);
                    });

                    imageContainer.appendChild(img);
                }

                tarjeta.appendChild(imageContainer);

                // Continúa con el resto del código para mostrar otros detalles de la habitación...

                // Añadir la tarjeta al contenedor de resultados
                contenedorResultados.appendChild(tarjeta);

                // Contenido de la tarjeta
                const contenido = document.createElement("div");
                contenido.classList.add("p-4");

                // Nombre de la habitación
                const nombre = document.createElement("h3");
                nombre.classList.add("text-xl", "font-semibold", "text-white");
                nombre.textContent = habitacion.name;
                contenido.appendChild(nombre);

                // Descripción de la cabaña (nuevo)
                if (habitacion.accomodationDescription) {
                    const descripcion = document.createElement("p");
                    descripcion.classList.add("text-gray-300", "mt-2", "text-sm");
                    descripcion.textContent = habitacion.accomodationDescription;
                    contenido.appendChild(descripcion);
                }

                // Precio por noche
                const precio = document.createElement("p");
                precio.classList.add("text-white-400", "mt-2", "font-semibold");
                precio.textContent = `$${habitacion.totalPrice} por ${evento.nights} noche(s)`;
                contenido.appendChild(precio);

                // Iconos de características (nuevo)
                const iconosContainer = document.createElement("div");
                iconosContainer.classList.add("flex", "flex-wrap", "gap-3", "mt-3", "text-gray-300");

                // Camas
                const camasItem = document.createElement("div");
                camasItem.classList.add("flex", "items-center", "gap-1");
                camasItem.innerHTML = `<i class="fas fa-bed"></i> ${habitacion.nBeds || 0}`;
                iconosContainer.appendChild(camasItem);

                // Baños
                const banosItem = document.createElement("div");
                banosItem.classList.add("flex", "items-center", "gap-1");
                banosItem.innerHTML = `<i class="fas fa-toilet"></i> ${habitacion.nRestrooms || 0}`;
                iconosContainer.appendChild(banosItem);

                // Ocupación mínima y máxima
                const ocupacionItem = document.createElement("div");
                ocupacionItem.classList.add("flex", "items-center", "gap-1");
                ocupacionItem.innerHTML = `<i class="fas fa-users"></i> ${habitacion.minOccupancy || habitacion.minPax || 1}-${habitacion.maxOccupancy || habitacion.maxPax || 1} huéspedes`;
                iconosContainer.appendChild(ocupacionItem);

                contenido.appendChild(iconosContainer);

                // Capacidad máxima
                /** 
                const capacidad = document.createElement("p");
                capacidad.classList.add("text-gray-400");
                capacidad.textContent = `${habitacion.minPax}-${habitacion.maxPax} huéspedes`;
                contenido.appendChild(capacidad);
                */

                if (habitacion.accomodationFeatures) {
                    const featuresContainer = document.createElement("div");
                    featuresContainer.classList.add("mt-3", "border-t", "border-gray-700", "pt-3");

                    const featuresTitle = document.createElement("h4");
                    featuresTitle.classList.add("text-white", "font-semibold", "mb-2");
                    featuresTitle.textContent = "Características";
                    featuresContainer.appendChild(featuresTitle);

                    // Función para procesar cada categoría de características
                    const processFeaturesCategory = (categoryData, categoryName) => {
                        if (!categoryData || Object.keys(categoryData).length === 0) return null;

                        const categoryContainer = document.createElement("div");
                        categoryContainer.classList.add("mb-2");

                        const categoryTitle = document.createElement("h5");
                        categoryTitle.classList.add("text-gray-300", "text-sm", "font-medium");
                        categoryTitle.textContent = categoryName;
                        categoryContainer.appendChild(categoryTitle);

                        const featuresList = document.createElement("div");
                        featuresList.classList.add("grid", "grid-cols-2", "gap-1", "text-sm");

                        Object.entries(categoryData).forEach(([feature, value]) => {
                            if (feature === 'id' || feature === '_id' || feature.startsWith('_') || feature === 'ID') {
                                return;
                            }

                            if (typeof value === 'boolean') {
                                if (!value) {
                                    return;
                                }
                                const featureItem = document.createElement("div");
                                featureItem.classList.add("flex", "items-center", "gap-1");

                                const icon = document.createElement("span");
                                icon.classList.add(value ? "text-green-500" : "text-red-500");
                                icon.textContent = value ? "✓" : "✗";
                                featureItem.appendChild(icon);

                                const featureText = document.createElement("span");
                                featureText.classList.add("text-gray-400");
                                // Convertir camelCase a texto con espacios
                                featureText.textContent = feature
                                    .replace(/([A-Z])/g, ' $1')
                                    .replace(/^./, str => str.toUpperCase());
                                featureItem.appendChild(featureText);

                                featuresList.appendChild(featureItem);
                            } else if (typeof value === 'string' || typeof value === 'number') {
                                const featureItem = document.createElement("div");
                                featureItem.classList.add("col-span-2");

                                const featureText = document.createElement("span");
                                featureText.classList.add("text-gray-400");
                                // Convertir camelCase a texto con espacios
                                const featureName = feature
                                    .replace(/([A-Z])/g, ' $1')
                                    .replace(/^./, str => str.toUpperCase());
                                featureText.textContent = `${featureName}: ${value}`;
                                featureItem.appendChild(featureText);

                                featuresList.appendChild(featureItem);
                            }
                        });

                        categoryContainer.appendChild(featuresList);
                        return categoryContainer;
                    };

                    // Procesar cada categoría de características
                    const categories = {
                        'Características generales': habitacion.accomodationFeatures?.generalFeatures,
                        'Vistas': habitacion.accomodationFeatures?.views,
                        'Actividades': habitacion.accomodationFeatures?.activities,
                        'Estacionamiento': habitacion.accomodationFeatures?.parking,
                        'Cocina': habitacion.accomodationFeatures?.kitchen,
                        'Habitaciones': habitacion.accomodationFeatures?.restroomFeatures,
                        'Deportes': habitacion.accomodationFeatures?.sport,
                        'Sala': habitacion.accomodationFeatures?.livingRoom
                    };

                    // Botón para mostrar/ocultar características
                    const toggleButton = document.createElement("button");
                    toggleButton.classList.add(
                        "w-full",
                        "bg-gray-700",
                        "text-white",
                        "py-1",
                        "rounded",
                        "mt-2",
                        "mb-2",
                        "flex",
                        "items-center",
                        "justify-center",
                        "hover:bg-gray-600",
                        "transition-colors"
                    );
                    toggleButton.textContent = "Ver características";
                    toggleButton.innerHTML = `Ver características <span class="ml-1">▼</span>`;

                    const featuresDetails = document.createElement("div");
                    featuresDetails.classList.add("hidden");

                    let hasVisibleCategories = false;

                    Object.entries(categories).forEach(([categoryName, categoryData]) => {
                        const categoryElement = processFeaturesCategory(categoryData, categoryName);
                        if (categoryElement) {
                            featuresDetails.appendChild(categoryElement);
                            hasVisibleCategories = true;
                        }
                    });

                    if (hasVisibleCategories) {
                        // Evento para mostrar/ocultar características
                        toggleButton.addEventListener("click", () => {
                            if (featuresDetails.classList.contains("hidden")) {
                                featuresDetails.classList.remove("hidden");
                                toggleButton.innerHTML = `Ocultar características <span class="ml-1">▲</span>`;
                            } else {
                                featuresDetails.classList.add("hidden");
                                toggleButton.innerHTML = `Ver características <span class="ml-1">▼</span>`;
                            }
                        });

                        featuresContainer.appendChild(toggleButton);
                        featuresContainer.appendChild(featuresDetails);
                        contenido.appendChild(featuresContainer);
                    }
                }

                // Botón de reservar
                let botonReservar = document.createElement("button");
                botonReservar.classList.add(
                    "mt-4",
                    "w-full",
                    "bg-blue-600",
                    "text-white",
                    "py-2",
                    "px-4",
                    "rounded-md",
                    "hover:bg-blue-700",
                    "transition-colors"
                );

                botonReservar.dataset.habitacionId = habitacion.id;
                botonReservar.dataset.nNights = evento.nights;
                botonReservar.dataset.precioTotal = habitacion.totalPrice;
                botonReservar.dataset.costoTotal = habitacion.totalCost;
                botonReservar.dataset.arrivalDate = evento.fechaLlegada;
                botonReservar.dataset.departureDate = evento.fechaSalida;
                botonReservar.dataset.huespedes = evento.huespedes;
                botonReservar.dataset.nombreHabitacion = habitacion.name;
                botonReservar.dataset.minPax = habitacion.minPax;
                botonReservar.dataset.maxPax = habitacion.maxPax;
                botonReservar.dataset.precioTotalSinComisiones = habitacion.totalPriceNoComs;


                botonReservar.addEventListener("click", () => {
                    // Aquí puedes realizar la reserva
                    console.log("Reservar habitación:", habitacion.name);

                    abrirModal(botonReservar);
                });
                botonReservar.textContent = "Más información";
                contenido.appendChild(botonReservar);

                // Agregar contenido a la tarjeta
                tarjeta.appendChild(contenido);

                // Agregar tarjeta al contenedor de resultados
                contenedorResultados.appendChild(tarjeta);
            });

            // MANEJO DE MODAL
            // Obtener elementos del DOM
            const modalReserva = document.getElementById("modal-reserva");
            const cerrarModalBtn = document.getElementById("cerrar-modal");
            const confirmarReservaBtn = document.getElementById("confirmar-reserva");

            const fechaLlegadaSpan = document.getElementById("fecha-llegada-input");
            const fechaSalidaSpan = document.getElementById("fecha-salida-input");
            const huespedesSpan = document.getElementById("huespedes-input");
            const precioTotalInput = document.getElementById("precio-total");
            const nNightsInput = document.getElementById("nights-input");
            const habitacionInput = document.getElementById("nombre-habitacion-input");
            const minPaxInput = document.getElementById("min-pax-input");
            const maxPaxInput = document.getElementById("max-pax-input");
            const costoTotalInput = document.getElementById("costo-total-input");
            const precioTotalNoComs = document.getElementById("precio-total-nocoms-input");

            // Función para abrir el modal
            function abrirModal(boton) {
                console.log(boton);
                //modalReserva.classList.remove("hidden");
                console.log("Precio total: ", boton.dataset.precioTotal)
                precioTotalInput.textContent = `$${boton.dataset.precioTotal}`
                fechaLlegadaSpan.textContent = boton.dataset.arrivalDate;
                fechaSalidaSpan.textContent = boton.dataset.departureDate;
                huespedesSpan.textContent = boton.dataset.huespedes;
                nNightsInput.textContent = boton.dataset.nNights;
                habitacionInput.value = boton.dataset.nombreHabitacion;
                minPaxInput.value = boton.dataset.minPax;
                maxPaxInput.value = boton.dataset.maxPax;
                costoTotalInput.value = boton.dataset.costoTotal
                precioTotalNoComs.value = boton.dataset.precioTotalSinComisiones;

                let html = `
                <p>¿Desea solicitar más información sobre la cabaña ${boton.dataset.nombreHabitacion}?</p>
                <h3 class="text-xl font-semibold text-black mt-4 mb-2">Información de la reserva</h3>
                <p>Fecha de llegada: ${boton.dataset.arrivalDate}</p>
                <p>Fecha de salida: ${boton.dataset.departureDate}</p>
                <p>Huespedes: ${boton.dataset.huespedes}</p>
                <p class="mb-2">Noches: ${boton.dataset.nNights}</p>

                <b><p>Al confirmar, se redirigirá a Whatsapp para finalizar la reserva</p></b>
                `

                Swal.fire({
                    title: 'Confirmar solicitud de información',
                    html: html,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Confirmar',
                    cancelButtonText: 'Cancelar',
                })
            };



            // Función para cerrar el modal
            function cerrarModal() {
                console.log("Cerrar modal");
                modalReserva.classList.add("hidden");

            }

            // Evento para abrir el modal al hacer clic en "Reservar"


            // Evento para cerrar el modal al hacer clic en "Cerrar"
            cerrarModalBtn.addEventListener("click", () => {
                console.log("Cerrar modal");
                modalReserva.classList.add("hidden");
            });

            // Evento para cerrar el modal al hacer clic fuera del modal
            modalReserva.addEventListener("click", (event) => {
                if (event.target === modalReserva) {
                    cerrarModal();
                }
            });

            // Evento para confirmar la reserva
            confirmarReservaBtn.addEventListener("click", async () => {
                const tipoReservaChk = document.getElementById("toggleReserva");
                const isDeposit = (!tipoReservaChk.checked) ? true : false;
                let totalEl = document.getElementById("precio-total").textContent;
                let total = totalEl;
                if (totalEl.startsWith("$")) {
                    total = total.slice(1);
                }

                const fechaLlegada = document.getElementById("fecha-llegada-input").textContent
                const fechaSalida = document.getElementById("fecha-salida-input").textContent
                console.log(fechaLlegada, fechaSalida)
                const arrivalDate = moment.utc(fechaLlegada, "DD-MM-YYYY").format("YYYY-MM-DD");
                const departureDate = moment.utc(fechaSalida, "DD-MM-YYYY").format("YYYY-MM-DD");


                const dataReserva = {
                    isDeposit: isDeposit,
                    clientEmail: document.getElementById("lblClientValue").value,
                    arrivalDate: arrivalDate,
                    departureDate: departureDate,
                    pax: document.getElementById("huespedes-input").textContent,
                    minPax: document.getElementById("min-pax-input").value,
                    maxOccupation: document.getElementById("max-pax-input").value,
                    total: total,
                    nNights: document.getElementById("nights-input").textContent,
                    chaletName: document.getElementById("nombre-habitacion-input").value
                }

                const dataPorDepo = {
                    isDeposit: isDeposit,
                    clientFirstName: document.getElementById('nombre-cliente-provisional').value.trim(),
                    clientLastName: document.getElementById('apellido-cliente-provisional').value.trim(),
                    arrivalDate: arrivalDate,
                    departureDate: departureDate,
                    pax: document.getElementById('huespedes-input').textContent,
                    maxOccupation: document.getElementById("max-pax-input").value,
                    total: total,
                    nNights: document.getElementById('nights-input').textContent,
                    chaletName: document.getElementById('nombre-habitacion-input').value
                }

                const data = (isDeposit) ? dataPorDepo : dataReserva;
                console.log(data);
                if (isDeposit) {
                    if (dataPorDepo.clientFirstName == "" || dataPorDepo.clientLastName == "") {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Es necesario ingresar el nombre y apellido del cliente',
                            confirmButtonText: 'Aceptar'
                        })
                        return;
                    }
                } else {
                    if (dataReserva.clientEmail == "") {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Es necesario seleccionar un cliente.',
                            confirmButtonText: 'Aceptar'
                        })
                        return;
                    }
                }

                try {
                    const confirmation = await Swal.fire({
                        icon: 'question',
                        title: 'Confirmar reserva',
                        text: '¿Estás seguro de realizar la reserva?',
                        showCancelButton: true,
                        confirmButtonText: 'Sí',
                        cancelButtonText: 'No'
                    })

                    if (!confirmation.isConfirmed) {
                        return;
                    }

                    Swal.fire({
                        icon: 'info',
                        title: 'Procesando reserva',
                        text: 'Por favor, espere...',
                        allowOutsideClick: false,
                        showConfirmButton: false,

                    })

                    const response = await fetch('/api/eventos', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        console.log(errorData)
                        let errors = []

                        if (errorData.message) {
                            errors.push(errorData.message);
                        } else {
                            errors = errorData.error.map(err => err.message);
                        }

                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: "Error en la solicitud: " + errors.join(' ') + ".",
                            confirmButtonText: 'Aceptar'
                        });
                        throw new Error(errors);
                    }

                    const dataR = await response.json();
                    console.log('Respuesta exitosa del servidor:', dataR);

                    const reservationId = dataR.reservationId;

                    const totalCostoBaseInput = document.getElementById('costo-total-input');
                    const totalSinComisiones = document.getElementById('precio-total-nocoms-input');

                    const comisionBody = {
                        costoBase: totalCostoBaseInput.value,
                        totalSinComisiones: totalSinComisiones.value,
                        precioAsignado: data.total,
                        chaletName: data.chaletName,
                        idReserva: reservationId,
                        arrivalDate: data.arrivalDate,
                        departureDate: data.departureDate,
                        nNights: data.nNights

                    }

                    const agregarComisiones = await fetch('/api/utilidades/reserva', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(comisionBody)
                    })

                    if (!agregarComisiones.ok) {
                        const additionalErrorData = await agregarComisiones.json();
                        const additionalErrors = additionalErrorData.error;
                        Swal.fire({
                            icon: 'error',
                            title: 'Additional Error',
                            text: "Error en la solicitud adicional: " + additionalErrors[0].message.toLowerCase() + ".",
                            confirmButtonText: 'Aceptar'
                        });
                        throw new Error('Error en la solicitud adicional');
                    }

                    const additionalData = await agregarComisiones.json();
                    console.log('Additional data received:', additionalData);

                    Swal.close()

                    Swal.fire({
                        icon: 'success',
                        title: 'Reserva creada',
                        text: dataR.message,
                        showCancelButton: false,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = `/api/eventos/${dataR.reservationId}`;
                        }
                    });
                } catch (error) {
                    console.error(error);
                    Swal.close();
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: `Ha ocurrido un error al crear la reserva: ${error.message}`,
                        showCancelButton: false,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Aceptar'
                    });
                }
            });
        }
        // FUNCIONALIDAD TOGGLE SWITCH
        const toggleInput = document.getElementById("toggleReserva");
        const labelDepo = document.getElementById("label-depo");
        const labelReserva = document.getElementById("label-reserva");

        const clienteReservaContainer = document.getElementById("modalClientContainer");
        const clienteProvisionalContainer = document.getElementById("container-alta-cliente-provisional");

        function toggleReserva() {
            if (toggleInput.checked) {
                clienteReservaContainer.classList.remove("hidden");
                clienteProvisionalContainer.classList.add("hidden");
                labelDepo.classList.remove("bg-gradient-to-r", "from-purple-500", "to-pink-500");
                labelReserva.classList.add("bg-gradient-to-r", "from-purple-500", "to-pink-500");
            } else {
                clienteReservaContainer.classList.add("hidden");
                clienteProvisionalContainer.classList.remove("hidden");
                labelReserva.classList.remove("bg-gradient-to-r", "from-purple-500", "to-pink-500");
                labelDepo.classList.add("bg-gradient-to-r", "from-purple-500", "to-pink-500");
            }
        }

        // Manejar clics en los labels
        labelDepo.addEventListener("click", function () {
            toggleInput.checked = false;
            toggleReserva();
        });

        labelReserva.addEventListener("click", function () {
            toggleInput.checked = true;
            toggleReserva();
        });

        // Inicializar estado
        toggleReserva();

        // FUNCIONES PARA FILTRAR CLIENTES
        const searchInput = document.getElementById('lblClient');
        const optionsContainer = document.querySelector('.select-options');
        const hiddenInput = document.getElementById('lblClientValue');
        let allOptions = Array.from(document.querySelectorAll('.select-option'));

        window.addNewClientOption = function (clientData) {
            // Create new option element
            const newOption = document.createElement('div');
            newOption.className = 'select-option px-4 py-2 hover:bg-gray-700 cursor-pointer text-white';

            newOption.dataset.value = clientData.email;
            newOption.dataset.label = `${clientData.firstName} ${clientData.lastName} (${clientData.email})`;
            newOption.textContent = `${clientData.firstName} ${clientData.lastName} (${clientData.email})`;

            // Add the new option to the container
            optionsContainer.appendChild(newOption);

            // Update allOptions array
            allOptions = Array.from(document.querySelectorAll('.select-option'));

            // Set the new option as selected
            searchInput.value = newOption.dataset.label;
            hiddenInput.value = newOption.dataset.value;
        };

        function filterOptions(searchText) {
            console.log("Entrando a filterOptions")
            const filteredOptions = allOptions.filter(option => {
                const optionText = option.textContent.toLowerCase();
                return optionText.includes(searchText.toLowerCase());
            });

            // Hide all options first
            allOptions.forEach(option => option.style.display = 'none');

            // Show filtered options
            filteredOptions.forEach(option => option.style.display = 'block');

            // Show/hide options container based on whether there are results
            optionsContainer.style.display = filteredOptions.length > 0 ? 'block' : 'none';
        }

        // Input event handler
        searchInput.addEventListener('input', (e) => {
            filterOptions(e.target.value);
        });

        // Focus event handler
        searchInput.addEventListener('focus', () => {
            console.log("Focus en searchInput")
            optionsContainer.style.display = 'block';
            filterOptions(searchInput.value);
        });

        // Click handler for options
        optionsContainer.addEventListener('click', (e) => {
            const option = e.target.closest('.select-option');
            if (option) {
                const value = option.dataset.value;
                const label = option.dataset.label || option.textContent;

                searchInput.value = label;
                hiddenInput.value = value;
                optionsContainer.style.display = 'none';
            }
        });

        // Close options when clicking outside
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.select-container') && !e.target.closest('.select-option')) {
                optionsContainer.style.display = 'none';
            }
        });

        // Keyboard navigation
        searchInput.addEventListener('keydown', (e) => {
            const visibleOptions = Array.from(optionsContainer.querySelectorAll('.select-option')).filter(
                option => option.style.display !== 'none'
            );
            const currentIndex = visibleOptions.findIndex(option => option.classList.contains('selected'));

            switch (e.key) {
                case 'ArrowDown':
                    e.preventDefault();
                    if (currentIndex < visibleOptions.length - 1) {
                        visibleOptions.forEach(opt => opt.classList.remove('selected'));
                        visibleOptions[currentIndex + 1].classList.add('selected');
                    }
                    break;
                case 'ArrowUp':
                    e.preventDefault();
                    if (currentIndex > 0) {
                        visibleOptions.forEach(opt => opt.classList.remove('selected'));
                        visibleOptions[currentIndex - 1].classList.add('selected');
                    }
                    break;
                case 'Enter':
                    e.preventDefault();
                    const selectedOption = visibleOptions.find(opt => opt.classList.contains('selected'));
                    if (selectedOption) {
                        const value = selectedOption.dataset.value;
                        const label = selectedOption.dataset.label || selectedOption.textContent;
                        searchInput.value = label;
                        hiddenInput.value = value;
                        optionsContainer.style.display = 'none';
                    }
                    break;
            }
        });

        // Open Modal
        function openModal() {
            document.getElementById('clientEntryModal').classList.remove('hidden');
        }


        // Example: Open modal on button click
        document.getElementById('clientEntryModalBtn').addEventListener('click', openModal);

        // FUNCIONES PARA GUARDAR CLIENTES
        var btnSaveClient = document.getElementById("btnSaveClient");
        if (btnSaveClient) {
            btnSaveClient.addEventListener("click", async (event) => {
                event.preventDefault();

                const data = {
                    firstName: document.getElementById("txtClientName").value,
                    lastName: document.getElementById("txtClientLastname").value,
                    phone: document.getElementById("txtClientPhone").value,
                    address: document.getElementById("txtClientAddress").value,
                    email: document.getElementById("txtClientEmail").value,
                    identificationType: document.getElementById("slctClientIdType").value,
                    identificationNumber: document.getElementById("txtClientIdNumber").value
                };

                try {
                    const response = await fetch('/api/clientes/crear-cliente', {
                        method: 'POST',
                        headers: {
                            // Once logged in, the authorization token stored inthe session cookies will automatically be added in each HTTP request.
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    })

                    if (!response.ok) {
                        const errorData = await response.json(); // Extract the error data
                        const errorMessage = errorData.error && errorData.error[0] && errorData.error[0].message
                            ? errorData.error[0].message
                            : 'Error en la solicitud'; // Fallback if message is not found
                        throw new Error(errorMessage);
                    }

                    const dataR = await response.json();
                    console.log(dataR);


                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: dataR.message + '.',
                        confirmButtonText: 'Regresar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            closeModal();
                            //$('#event_entry_modal').modal('show');
                            // Update the clients dropdown
                            // const newOption = document.createElement("option");
                            // newOption.value = dataR.client.email;
                            // newOption.text = dataR.client.firstName + " " + dataR.client.lastName + "(" + dataR.client.email + ")";
                            // newOption.selected = true;

                            // document.getElementById("lblClient").appendChild(newOption);

                            window.addNewClientOption({
                                email: dataR.client.email,
                                firstName: dataR.client.firstName,
                                lastName: dataR.client.lastName
                            });

                        }
                    });
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al enviar la solicitud: ' + error.message,
                        confirmButtonText: 'Aceptar'
                    });
                }
            });
        }
    });

    // Close Modal
    function closeModal() {
        document.getElementById('clientEntryModal').classList.add('hidden');
    }

    function addCarouselStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .image-slider {
                position: relative;
                height: 12rem;
            }
            .carousel-btn {
                z-index: 10;
                transform: translateY(-50%);
                cursor: pointer;
            }
            .carousel-btn:hover {
                background-color: rgba(0,0,0,0.7);
            }
        `;
        document.head.appendChild(style);
    }

    document.addEventListener('DOMContentLoaded', addCarouselStyles);


</script>