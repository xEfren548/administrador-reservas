<div class="row flex-column justify-content-center mt-3 " style="width: 95%;">
    <h1 class="mt-5">Gráficas de Utilidades</h1>
    <div class="row flex-nowrap mb-3 ">
        <div class="col-6 h-100 w-75">
            <canvas id="chart-line" class="w-100 h-100" style="max-width: 100%; max-height: 400px;"></canvas>
        </div>

        <div class="col-6 h-100 w-75">
            <p>Comisiones del mes: <strong>${{totalEarnings}}</strong></p>
            <canvas id="doughnut-chart" class="w-100 h-100" style="max-width: 100%; max-height: 200px;"></canvas>
        </div>

    </div>

    
    <h1 class="mt-5">Comparativas</h1>
    <div class="row mb-5">
        <div class="col-12 col-md-12 col-lg-12 col-xl-12 mb-3" style="width: 800px; height: 400px;">
            <canvas id="monthly-comparison-chart" class="utCharts"></canvas>
        </div>
    </div>

    <div class="col-12">

        <h1 class="mt-3">Mis Utilidades</h1>
        <div class="row mb-3">
            <div class="col-md-2">
                <label for="startDate" class="form-label">Fecha Inicio:</label>
                <input type="date" class="form-control" id="startDate">
            </div>
            <div class="col-md-2">
                <label for="endDate" class="form-label">Fecha Fin:</label>
                <input type="date" class="form-control" id="endDate">
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button id="clearDates" class="btn btn-secondary"><span><i class="fa fa-eraser" aria-hidden="true"></i></span></button>
            </div>
        </div>
        <div class="table-responsive">

            <table class="table table-dark table-hover text-center" id="tablaUtilidades">
                <thead class="table-light">
                    <tr>
                        <th scope="col">Habitación</th>
                        <th scope="col">Admin Ligado</th>
                        <th scope="col">Concepto</th>
                        <th scope="col">Id Reserva</th>
                        <th scope="col">Monto</th>
                        <th scope="col">Noches reservadas</th>
                        <th scope="col">Check In</th>
                        <th scope="col">Check Out</th>
                        <th scope="col">Usuario</th>

                    </tr>
                </thead>
                <tbody>
                    {{#if utilidades.length}}
                    {{#each utilidades}}
                    <tr>
                        <td>{{this.nombreHabitacion}}</td>
                        <td>{{this.chaletAdmin}}</td>
                        <td>{{this.concepto}}</td>
                        <td>{{this.idReserva}}</td>
                        <td>${{this.monto}}</td>
                        <td>{{this.nochesReservadas}}</td>
                        <td>{{this.fecha}}</td>
                        <td>{{this.checkOut}}</td>
                        <td>{{this.nombreUsuario}}</td>
                    </tr>
                    {{/each}}
                    {{else}}
                    <tr>
                        <td colspan="9">No se encontraron utilidades</td>
                    </tr>
                    {{/if}}
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="4"><b>Total</b></td>
                        <td id="totalMonto"></td>
                        <td colspan="4"></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        var table = document.getElementById("tablaUtilidades");
        if (table) {
            var dataTable = new DataTable(table, {
                "ordering": false,
                "paging": true, // Habilita la paginación
                "lengthMenu": [5, 10, 25, 50], // Define el menú de longitud de página
                "pageLength": 10, // Establece la longitud de página inicial
                "dom": 'Bfrtip', // Añade los botones a la interfaz
                "search": {
                    "smart": true
                },
                "buttons": [
                    {
                        extend: 'csvHtml5',
                        text: 'Exportar a CSV',
                    },
                    {
                        extend: 'pdfHtml5',
                        text: 'Exportar a PDF',
                        title: function () {
                            var minDate = document.getElementById('startDate').value;
                            var maxDate = document.getElementById('endDate').value;
                            let mensaje = ""
                            if (minDate && maxDate) {
                                mensaje = `Reporte de utilidades del ${moment(minDate).format('DD-MM-YYYY')} al ${moment(maxDate).format('DD-MM-YYYY')}`;
                            } else if (minDate) {
                                mensaje = `Reporte de utilidades desde ${moment(minDate).format('DD-MM-YYYY')}`;
                            } else if (maxDate) {
                                mensaje = `Reporte de utilidades hasta el ${moment(maxDate).format('DD-MM-YYYY')}`;
                            } else {
                                mensaje = 'Reporte de utilidades globales';
                            }
                            return mensaje;
                        },

                    }
                ],
                "initComplete": function () {
                // Aplica las clases a los botones después de la inicialización
                    var buttons = document.querySelectorAll('.dt-button');
                    buttons.forEach(function (button) {
                        button.classList.add('btn', 'btn-info');
                    });

                    
                },
                "drawCallback": function () {
                    // Calculate and update the total monto
                    var api = this.api();
                    var total = api.column(4, { search: 'applied' }).data().reduce(function (a, b) {
                        return a + parseFloat(b.replace(/[^\d.-]/g, '')); // Remove any currency symbols before parsing
                    }, 0);
                    document.getElementById('totalMonto').textContent = `$${total.toFixed(2)}`;
                    updateChart(api);
                }
            });

            DataTable.ext.search.push(function(settings, data, dataIndex) {
                console.log("min date before: ", document.getElementById('startDate').value);
                var minDate = moment(document.getElementById('startDate').value, "YYYY-MM-DD").startOf('day');
                var maxDate = moment(document.getElementById('endDate').value, "YYYY-MM-DD").endOf('day');
                var targetDate = moment(data[6], "DD/MM/YYYY").startOf('day'); // Assuming date is in the 3rd column
                console.log("min date: ", minDate);
                console.log("max date: ", maxDate);


                if ((isNaN(minDate) && isNaN(maxDate)) ||
                    (isNaN(minDate) && targetDate <= maxDate) ||
                    (minDate <= targetDate && isNaN(maxDate)) ||
                    (minDate <= targetDate && targetDate <= maxDate)) {
                    return true;
                }
                return false;
            });

            document.getElementById('startDate').addEventListener('change', function() {
                dataTable.draw();
            });

            document.getElementById('endDate').addEventListener('change', function() {
                dataTable.draw();
            });

            document.getElementById('clearDates').addEventListener('click', function() {
                document.getElementById('startDate').value = '';
                document.getElementById('endDate').value = '';
                dataTable.draw();
            });
        }

        initComparisonCharts();
        addComparisonControls();
    });



    let utilidadesPorMes = {{json utilidadesPorMes}}
    console.log(utilidadesPorMes)
    chartInstance = new Chart(document.getElementById("chart-line").getContext("2d"), {
        type: "line",
        data: {
            labels: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
            datasets: [{
                label: "Comisión del mes",
                tension: 0.4,
                borderWidth: 4,
                pointRadius: 5,
                pointBackgroundColor: "rgba(255, 99, 132, 0.8)",
                pointBorderColor: "transparent",
                borderColor: "rgba(255, 99, 132, 0.8)",
                backgroundColor: "transparent",
                fill: true,
                data: Array(12).fill(0), // Initialize with zeros
                maxBarThickness: 6
            }],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false,
                }
            },
            interaction: {
                intersect: false,
                mode: 'index',
            },
            scales: {
                y: {
                    grid: {
                        drawBorder: false,
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: false,
                        borderDash: [5, 5],
                        color: 'rgba(255, 99, 132, 0.2)'
                    },
                    ticks: {
                        beginAtZero: true,
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                        color: "#f8f9fa"
                    },
                },
                x: {
                    grid: {
                        drawBorder: false,
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: false,
                        borderDash: [5, 5],
                        color: 'rgba(255, 99, 132, 0.2)'
                    },
                    ticks: {
                        display: true,
                        color: '#f8f9fa',
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                    }
                },
            },
        }
    });

    function updateChart(api) {
        console.log("UpdateChart data: ")
        var monthlyData = Array(12).fill(0); // Initialize array for 12 months

        api.rows({ search: 'applied' }).every(function (rowIdx, tableLoop, rowLoop) {
            var data = this.data();
            var date = moment(data[6], "DD/MM/YYYY"); // Assuming date is in the 4rd column
            var monthIndex = date.month(); // Get the month index (0-based)
            var amount = parseFloat(data[4].replace(/[^\d.-]/g, '')); // Parse the amount


            if (!isNaN(monthIndex) && !isNaN(amount)) {
                monthlyData[monthIndex] += amount; // Accumulate amount for each month
            }
        });


        // Update the chart data and redraw
        if (chartInstance) {
            chartInstance.data.datasets[0].data = monthlyData;
            chartInstance.update();
        }
    }

    let monthlyComparisonChart;

    function initComparisonCharts() {
        // Initialize the monthly comparison chart
        const monthlyComparisonCtx = document.getElementById('monthly-comparison-chart')?.getContext('2d');
        if (monthlyComparisonCtx) {
            monthlyComparisonChart = new Chart(monthlyComparisonCtx, {
                type: 'bar',
                data: {
                    labels: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
                    datasets: [
                        {
                            label: 'Período actual',
                            data: Array(12).fill(0),
                            backgroundColor: 'rgba(75, 192, 192, 0.6)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Período comparativo',
                            data: Array(12).fill(0),
                            backgroundColor: 'rgba(255, 99, 132, 0.6)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Comparativa Mensual',
                            color: '#f8f9fa'
                        },
                        legend: {
                            display: true,
                            labels: {
                                color: '#f8f9fa'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#f8f9fa'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#f8f9fa'
                            }
                        }
                    }
                }
            });
        }
    }

    function addComparisonControls() {
        // Create controls for comparison date range
        const controlsContainer = document.createElement('div');
        controlsContainer.className = 'comparison-controls mb-4';
        controlsContainer.innerHTML = `
            <h4>Período de comparación</h4>
            <div class="d-flex align-items-center">
                <div class="me-3">
                    <label for="compStartDate">Fecha inicial:</label>
                    <input type="date" id="compStartDate" class="form-control">
                </div>
                <div class="me-3">
                    <label for="compEndDate">Fecha final:</label>
                    <input type="date" id="compEndDate" class="form-control">
                </div>
                <div class="mt-4">
                    <button id="applyComparison" class="btn btn-primary">Aplicar</button>
                    <button id="clearComparison" class="btn btn-secondary ms-2">Limpiar</button>
                </div>
            </div>
        `;
        
        // Insert controls before the comparison charts
        const firstChartContainer = document.getElementById('monthly-comparison-chart')?.closest('.row');
        if (firstChartContainer && firstChartContainer.parentNode) {
            firstChartContainer.parentNode.insertBefore(controlsContainer, firstChartContainer);
        }
        
        // Add event listeners
        document.getElementById('applyComparison')?.addEventListener('click', function() {
            loadComparisonData();
        });
        
        document.getElementById('clearComparison')?.addEventListener('click', function() {
            document.getElementById('compStartDate').value = '';
            document.getElementById('compEndDate').value = '';
            resetComparisonCharts();
        });
    }

    function loadComparisonData() {
        const compStartDate = document.getElementById('compStartDate').value;
        const compEndDate = document.getElementById('compEndDate').value;
        
        if (!compStartDate || !compEndDate) {
            alert('Por favor seleccione fechas de inicio y fin para la comparación');
            return;
        }
        
        // Get the DataTable API instance
        const table = document.getElementById("tablaUtilidades");
        if (!table) return;
        
        const dataTable = new DataTable.Api(table);
        
        // Store current filter dates
        const currentStartDate = document.getElementById('startDate').value;
        const currentEndDate = document.getElementById('endDate').value;
        
        // Get data for current period
        const currentPeriodData = getFilteredData(dataTable, currentStartDate, currentEndDate);
        
        // Apply comparison dates temporarily
        document.getElementById('startDate').value = compStartDate;
        document.getElementById('endDate').value = compEndDate;
        
        // Trigger filtering without redrawing visible table
        const comparisonPeriodData = getFilteredData(dataTable, compStartDate, compEndDate);
        
        // Restore original filter dates
        document.getElementById('startDate').value = currentStartDate;
        document.getElementById('endDate').value = currentEndDate;
        dataTable.draw();
        
        // Update comparison charts
        updateComparisonCharts(currentPeriodData, comparisonPeriodData);
    }

    function getFilteredData(dataTable, startDate, endDate) {
        const rows = dataTable.rows().data();
        const filteredData = [];
        
        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            const rowDate = moment(row[6], "DD/MM/YYYY").startOf('day');
            const minDate = startDate ? moment(startDate, "YYYY-MM-DD").startOf('day') : null;
            const maxDate = endDate ? moment(endDate, "YYYY-MM-DD").endOf('day') : null;
            
            if ((!minDate && !maxDate) ||
                (!minDate && rowDate <= maxDate) ||
                (minDate <= rowDate && !maxDate) ||
                (minDate <= rowDate && rowDate <= maxDate)) {
                filteredData.push(row);
            }
        }
        
        return filteredData;
    }

    function updateComparisonCharts(currentData, comparisonData) {
        // Update monthly comparison chart
        updateMonthlyComparisonChart(currentData, comparisonData);
        
    }

    function updateMonthlyComparisonChart(currentData, comparisonData) {
        // Initialize arrays for 12 months
        const currentMonthlyData = Array(12).fill(0);
        const comparisonMonthlyData = Array(12).fill(0);
        
        // Process current period data
        currentData.forEach(row => {
            const date = moment(row[6], "DD/MM/YYYY");
            const monthIndex = date.month();
            const amount = parseFloat(row[4].replace(/[^\d.-]/g, ''));
            
            if (!isNaN(monthIndex) && !isNaN(amount)) {
                currentMonthlyData[monthIndex] += amount;
            }
        });
        
        // Process comparison period data
        comparisonData.forEach(row => {
            const date = moment(row[6], "DD/MM/YYYY");
            const monthIndex = date.month();
            const amount = parseFloat(row[4].replace(/[^\d.-]/g, ''));
            
            if (!isNaN(monthIndex) && !isNaN(amount)) {
                comparisonMonthlyData[monthIndex] += amount;
            }
        });
        
        // Update the chart
        if (monthlyComparisonChart) {
            monthlyComparisonChart.data.datasets[0].data = currentMonthlyData;
            monthlyComparisonChart.data.datasets[1].data = comparisonMonthlyData;
            
            // Set title with date ranges
            const currentDateRange = getDateRangeText('current');
            const compDateRange = getDateRangeText('comparison');
            monthlyComparisonChart.options.plugins.title.text = `Comparativa Mensual (${currentDateRange} vs ${compDateRange})`;
            
            monthlyComparisonChart.update();
        }
    }

    function resetComparisonCharts() {
        // Reset monthly comparison chart
        if (monthlyComparisonChart) {
            monthlyComparisonChart.data.datasets[0].data = Array(12).fill(0);
            monthlyComparisonChart.data.datasets[1].data = Array(12).fill(0);
            monthlyComparisonChart.options.plugins.title.text = 'Comparativa Mensual';
            monthlyComparisonChart.update();
        }
        
        // Reset user comparison chart
        if (roomComparisonChart) {
            roomComparisonChart.data.labels = [];
            roomComparisonChart.data.datasets[0].data = [];
            roomComparisonChart.data.datasets[1].data = [];
            roomComparisonChart.options.plugins.title.text = 'Comparativa por Habitación';
            roomComparisonChart.update();
        }
    }
        function getDateRangeText(type) {
        let startElement, endElement;
        
        if (type === 'current') {
            startElement = document.getElementById('startDate');
            endElement = document.getElementById('endDate');
        } else {
            startElement = document.getElementById('compStartDate');
            endElement = document.getElementById('compEndDate');
        }
        
        const startDate = startElement.value;
        const endDate = endElement.value;
        
        if (startDate && endDate) {
            return `${moment(startDate).format('DD/MM/YY')} - ${moment(endDate).format('DD/MM/YY')}`;
        } else if (startDate) {
            return `Desde ${moment(startDate).format('DD/MM/YY')}`;
        } else if (endDate) {
            return `Hasta ${moment(endDate).format('DD/MM/YY')}`;
        } else {
            return 'Todo el período';
        }
    }
    const ctx = document.getElementById('doughnut-chart').getContext('2d');
    const totalEarnings = {{ totalEarnings }};
    const limit = {{ limit }};
    const remaining = limit - totalEarnings;

    const doughnutChartData = {
        labels: ['Ganancias'],
        datasets: [{
            data: [totalEarnings, remaining],
            backgroundColor: [
                'rgba(75, 192, 192, 0.6)', // Color para ganancias
                'rgba(255, 255, 255, 0.0)'  // Color transparente para restante
            ],
            borderColor: [
                'rgba(75, 192, 192, 1)',
                'rgba(255, 255, 255, 0.0)'  // Color transparente para restante
            ],
            borderWidth: 1
        }]
    };

    const doughnutChartOptions = {
        responsive: true,
        maintainAspectRatio: true, // Mantener la relación de aspecto
        plugins: {
            legend: {
                display: false, // Ocultar la leyenda
            },
            tooltip: {
                callbacks: {
                    label: function (tooltipItem) {
                        // Mostrar solo la etiqueta de ganancias
                        if (tooltipItem.label === 'Ganancias') {
                            const value = tooltipItem.raw;
                            return `${value}`;
                        }
                        return null;
                    }
                }
            }
        }
    };

    new Chart(ctx, {
        type: 'doughnut',
        data: doughnutChartData,
        options: doughnutChartOptions
    });



</script>