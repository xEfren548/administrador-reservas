<div class="row flex-column justify-content-center mt-3 " style="width: 95%;">
    <h1 class="mt-5">Gráficas de Utilidades</h1>
    <div class="row flex-nowrap mb-3 ">
        <div class="col-6 h-100 w-75">
            <canvas id="chart-line" class="w-100 h-100" style="max-width: 100%; max-height: 400px;"></canvas>
        </div>

        <div class="col-6 h-100 w-75">
            <p>Comisiones del mes: <strong>${{totalEarnings}}</strong></p>
            <canvas id="doughnut-chart" class="w-100 h-100" style="max-width: 100%; max-height: 200px;"></canvas>
        </div>

    </div>


    <div class="col-12">

        <h1 class="mt-3">Mis Utilidades</h1>
        <table class="table table-dark table-hover text-center" id="tablaUtilidades">
            <thead class="table-light">
                <tr>
                    <th scope="col">Concepto</th>
                    <th scope="col">Monto</th>
                    <th scope="col">Fecha</th>
                    <th scope="col">Usuario</th>

                </tr>
            </thead>
            <tbody>
                {{#if utilidades.length}}
                {{#each utilidades}}
                <tr>
                    <td>{{this.concepto}}</td>
                    <td>${{this.monto}}</td>
                    <td>{{this.fecha}}</td>
                    <td>{{this.nombreUsuario}}</td>


                </tr>
                {{/each}}
                {{else}}
                <tr>
                    <td colspan="4">No se encontraron utilidades</td>
                </tr>

                {{/if}}
            </tbody>
        </table>
    </div>
</div>




{{!-- Modals --}}
<div class="modal fade" id="editarRackLimpiezaModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <form id="frmUpdateUser" action="/api/usuarios/editar-usuario" method="put" class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Modificar Estatus</h5>
                <button type="button" class="close" onclick="$('#editarRackLimpiezaModal').modal('hide');"
                    aria-label="Close">
                    &times;
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row mt-2">
                        <div class="col-sm-12 mb-2">
                            <div class="mb-3">
                                <label for="" class="form-label">Modificar estatus: </label>
                                <select class="form-select form-select-md" name="modificar-status"
                                    id="modificar-status">
                                    <option selected value="0" disabled>Selecciona uno: </option>
                                    <option value="Pendiente">Pendiente</option>
                                    <option value="En proceso">En proceso</option>
                                    <option value="Completado">Completado</option>
                                </select>
                            </div>

                        </div>

                        <div class="form-item">
                            <p id="txtUpdUserError" name="errMsg" class="error"></p>
                        </div>
                        <div class="modal_footer" style="display: flex; justify-content: right; margin: 10px 0;">
                            <button type="button" class="btn btn-primary" id="btnUpdateService">Modificar
                                estatus</button>

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-item">
            <p id="txtUpdUserError" name="errMsg" class="error"></p>
        </div>
    </form>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        var table = document.getElementById("tablaUtilidades");
        if (table) {
            var dataTable = new DataTable(table, {
                "order": [[2, 'des']], // Puedes especificar aquí el orden inicial de las columnas
                "paging": true, // Habilita la paginación
                "lengthMenu": [5, 10, 25, 50], // Define el menú de longitud de página
                "pageLength": 10 // Establece la longitud de página inicial
            });
        }
    });

    function mostrarInfoServicio(serviceId) {
        // Use serviceId to perform actions specific to the clicked service
        console.log("Service ID:", serviceId);
        const modificarStatusSelect = document.querySelector("#modificar-status");
        const btnUpdateService = document.querySelector("#btnUpdateService");


        btnUpdateService.addEventListener("click", function (e) {
            e.preventDefault();
            const status = modificarStatusSelect.value;
            console.log("Status:", status);



            try {
                fetch(`/api/rackservicios/${serviceId}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        status: status
                    })
                })

                if (status == "0") {
                    throw new Error("Selecciona un status para continuar.");
                }

                Swal.fire({
                    icon: 'success',
                    title: '¡Completado!',
                    text: 'Estatus actualizado correctamente.',
                    confirmButtonText: 'Aceptar'
                }).then((result) => {
                    // Verificar si el usuario hizo clic en el botón de confirmación
                    if (result.isConfirmed) {
                        // Actualizar la página
                        location.reload();
                    }
                });
            } catch (error) {
                console.error(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    confirmButtonText: 'Aceptar'
                });

            }
        });
    }


    let utilidadesPorMes = {{json utilidadesPorMes}}
    console.log(utilidadesPorMes)
    var lineChartData = {
        labels: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
        datasets: [{
            label: "Comisión del mes",
            tension: 0.4,
            borderWidth: 4,
            pointRadius: 5,
            pointBackgroundColor: "rgba(255, 99, 132, 0.8)",
            pointBorderColor: "transparent",
            borderColor: "rgba(255, 99, 132, 0.8)",
            backgroundColor: "transparent",
            fill: true,
            data: utilidadesPorMes,
            maxBarThickness: 6
        }],
    };

    // Opciones para el gráfico de líneas
    var lineChartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false,
            }
        },
        interaction: {
            intersect: false,
            mode: 'index',
        },
        scales: {
            y: {
                grid: {
                    drawBorder: false,
                    display: true,
                    drawOnChartArea: true,
                    drawTicks: false,
                    borderDash: [5, 5],
                    color: 'rgba(255, 99, 132, 0.2)'
                },
                ticks: {
                    beginAtZero: true,
                    padding: 10,
                    font: {
                        size: 14,
                        weight: 300,
                        family: "Roboto",
                        style: 'normal',
                        lineHeight: 2
                    },
                    color: "#f8f9fa"
                },
            },
            x: {
                grid: {
                    drawBorder: false,
                    display: true,
                    drawOnChartArea: true,
                    drawTicks: false,
                    borderDash: [5, 5],
                    color: 'rgba(255, 99, 132, 0.2)'
                },
                ticks: {
                    display: true,
                    color: '#f8f9fa',
                    padding: 10,
                    font: {
                        size: 14,
                        weight: 300,
                        family: "Roboto",
                        style: 'normal',
                        lineHeight: 2
                    },
                }
            },
        },
    };


    var ctxLine = document.getElementById("chart-line").getContext("2d");
    new Chart(ctxLine, {
        type: "line",
        data: lineChartData,
        options: lineChartOptions,
    });

    const ctx = document.getElementById('doughnut-chart').getContext('2d');
    const totalEarnings = {{ totalEarnings }};
    const limit = {{ limit }};
    const remaining = limit - totalEarnings;

    const doughnutChartData = {
        labels: ['Ganancias'],
        datasets: [{
            data: [totalEarnings, remaining],
            backgroundColor: [
                'rgba(75, 192, 192, 0.6)', // Color para ganancias
                'rgba(255, 255, 255, 0.0)'  // Color transparente para restante
            ],
            borderColor: [
                'rgba(75, 192, 192, 1)',
                'rgba(255, 255, 255, 0.0)'  // Color transparente para restante
            ],
            borderWidth: 1
        }]
    };

    const doughnutChartOptions = {
        responsive: true,
        maintainAspectRatio: true, // Mantener la relación de aspecto
        plugins: {
            legend: {
                display: false, // Ocultar la leyenda
            },
            tooltip: {
                callbacks: {
                    label: function (tooltipItem) {
                        // Mostrar solo la etiqueta de ganancias
                        if (tooltipItem.label === 'Ganancias') {
                            const value = tooltipItem.raw;
                            return `${value}`;
                        }
                        return null;
                    }
                }
            }
        }
    };

    new Chart(ctx, {
        type: 'doughnut',
        data: doughnutChartData,
        options: doughnutChartOptions
    });



</script>