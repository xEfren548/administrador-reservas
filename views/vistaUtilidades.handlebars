<div class="row flex-column justify-content-center mt-3 " style="width: 95%;">
    <h1 class="mt-5">Gráficas de Utilidades</h1>
    <div class="row flex-nowrap mb-3 ">
        <div class="col-6 h-100 w-75">
            <canvas id="chart-line" class="w-100 h-100" style="max-width: 100%; max-height: 400px;"></canvas>
        </div>

        <div class="col-6 h-100 w-75">
            <p>Comisiones del mes: <strong>${{totalEarnings}}</strong></p>
            <canvas id="doughnut-chart" class="w-100 h-100" style="max-width: 100%; max-height: 200px;"></canvas>
        </div>

    </div>


    <div class="col-12">

        <h1 class="mt-3">Mis Utilidades</h1>
        <div class="row mb-3">
            <div class="col-md-2">
                <label for="startDate" class="form-label">Fecha Inicio:</label>
                <input type="date" class="form-control" id="startDate">
            </div>
            <div class="col-md-2">
                <label for="endDate" class="form-label">Fecha Fin:</label>
                <input type="date" class="form-control" id="endDate">
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button id="clearDates" class="btn btn-secondary"><span><i class="fa fa-eraser" aria-hidden="true"></i></span></button>
            </div>
        </div>
        <div class="table-responsive">

            <table class="table table-dark table-hover text-center" id="tablaUtilidades">
                <thead class="table-light">
                    <tr>
                        <th scope="col">Habitación</th>
                        <th scope="col">Admin Ligado</th>
                        <th scope="col">Concepto</th>
                        <th scope="col">Id Reserva</th>
                        <th scope="col">Monto</th>
                        <th scope="col">Noches reservadas</th>
                        <th scope="col">Check In</th>
                        <th scope="col">Check Out</th>
                        <th scope="col">Usuario</th>

                    </tr>
                </thead>
                <tbody>
                    {{#if utilidades.length}}
                    {{#each utilidades}}
                    <tr>
                        <td>{{this.nombreHabitacion}}</td>
                        <td>{{this.chaletAdmin}}</td>
                        <td>{{this.concepto}}</td>
                        <td>{{this.idReserva}}</td>
                        <td>${{this.monto}}</td>
                        <td>{{this.nochesReservadas}}</td>
                        <td>{{this.fecha}}</td>
                        <td>{{this.checkOut}}</td>
                        <td>{{this.nombreUsuario}}</td>
                    </tr>
                    {{/each}}
                    {{else}}
                    <tr>
                        <td colspan="9">No se encontraron utilidades</td>
                    </tr>
                    {{/if}}
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="4"><b>Total</b></td>
                        <td id="totalMonto"></td>
                        <td colspan="4"></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        var table = document.getElementById("tablaUtilidades");
        if (table) {
            var dataTable = new DataTable(table, {
                "ordering": false,
                "paging": true, // Habilita la paginación
                "lengthMenu": [5, 10, 25, 50], // Define el menú de longitud de página
                "pageLength": 10, // Establece la longitud de página inicial
                "dom": 'Bfrtip', // Añade los botones a la interfaz
                "search": {
                    "smart": true
                },
                "buttons": [
                    {
                        extend: 'csvHtml5',
                        text: 'Exportar a CSV',
                    },
                    {
                        extend: 'pdfHtml5',
                        text: 'Exportar a PDF',
                        title: function () {
                            var minDate = document.getElementById('startDate').value;
                            var maxDate = document.getElementById('endDate').value;
                            let mensaje = ""
                            if (minDate && maxDate) {
                                mensaje = `Reporte de utilidades del ${moment(minDate).format('DD-MM-YYYY')} al ${moment(maxDate).format('DD-MM-YYYY')}`;
                            } else if (minDate) {
                                mensaje = `Reporte de utilidades desde ${moment(minDate).format('DD-MM-YYYY')}`;
                            } else if (maxDate) {
                                mensaje = `Reporte de utilidades hasta el ${moment(maxDate).format('DD-MM-YYYY')}`;
                            } else {
                                mensaje = 'Reporte de utilidades globales';
                            }
                            return mensaje;
                        },

                    }
                ],
                "initComplete": function () {
                // Aplica las clases a los botones después de la inicialización
                    var buttons = document.querySelectorAll('.dt-button');
                    buttons.forEach(function (button) {
                        button.classList.add('btn', 'btn-info');
                    });

                    
                },
                "drawCallback": function () {
                    // Calculate and update the total monto
                    var api = this.api();
                    var total = api.column(4, { search: 'applied' }).data().reduce(function (a, b) {
                        return a + parseFloat(b.replace(/[^\d.-]/g, '')); // Remove any currency symbols before parsing
                    }, 0);
                    document.getElementById('totalMonto').textContent = `$${total.toFixed(2)}`;
                }
            });

            DataTable.ext.search.push(function(settings, data, dataIndex) {
                var minDate = moment(document.getElementById('startDate').value, "YYYY-MM-DD").startOf('day');
                var maxDate = moment(document.getElementById('endDate').value, "YYYY-MM-DD").endOf('day');
                var targetDate = moment(data[2], "DD/MM/YYYY").startOf('day'); // Assuming date is in the 3rd column

                if ((isNaN(minDate) && isNaN(maxDate)) ||
                    (isNaN(minDate) && targetDate <= maxDate) ||
                    (minDate <= targetDate && isNaN(maxDate)) ||
                    (minDate <= targetDate && targetDate <= maxDate)) {
                    return true;
                }
                return false;
            });

            document.getElementById('startDate').addEventListener('change', function() {
                dataTable.draw();
            });

            document.getElementById('endDate').addEventListener('change', function() {
                dataTable.draw();
            });

            document.getElementById('clearDates').addEventListener('click', function() {
                document.getElementById('startDate').value = '';
                document.getElementById('endDate').value = '';
                dataTable.draw();
            });
        }
    });

    function mostrarInfoServicio(serviceId) {
        // Use serviceId to perform actions specific to the clicked service
        console.log("Service ID:", serviceId);
        const modificarStatusSelect = document.querySelector("#modificar-status");
        const btnUpdateService = document.querySelector("#btnUpdateService");


        btnUpdateService.addEventListener("click", function (e) {
            e.preventDefault();
            const status = modificarStatusSelect.value;
            console.log("Status:", status);



            try {
                fetch(`/api/rackservicios/${serviceId}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        status: status
                    })
                })

                if (status == "0") {
                    throw new Error("Selecciona un status para continuar.");
                }

                Swal.fire({
                    icon: 'success',
                    title: '¡Completado!',
                    text: 'Estatus actualizado correctamente.',
                    confirmButtonText: 'Aceptar'
                }).then((result) => {
                    // Verificar si el usuario hizo clic en el botón de confirmación
                    if (result.isConfirmed) {
                        // Actualizar la página
                        location.reload();
                    }
                });
            } catch (error) {
                console.error(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    confirmButtonText: 'Aceptar'
                });

            }
        });
    }


    let utilidadesPorMes = {{json utilidadesPorMes}}
    console.log(utilidadesPorMes)
    var lineChartData = {
        labels: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
        datasets: [{
            label: "Comisión del mes",
            tension: 0.4,
            borderWidth: 4,
            pointRadius: 5,
            pointBackgroundColor: "rgba(255, 99, 132, 0.8)",
            pointBorderColor: "transparent",
            borderColor: "rgba(255, 99, 132, 0.8)",
            backgroundColor: "transparent",
            fill: true,
            data: utilidadesPorMes,
            maxBarThickness: 6
        }],
    };

    // Opciones para el gráfico de líneas
    var lineChartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false,
            }
        },
        interaction: {
            intersect: false,
            mode: 'index',
        },
        scales: {
            y: {
                grid: {
                    drawBorder: false,
                    display: true,
                    drawOnChartArea: true,
                    drawTicks: false,
                    borderDash: [5, 5],
                    color: 'rgba(255, 99, 132, 0.2)'
                },
                ticks: {
                    beginAtZero: true,
                    padding: 10,
                    font: {
                        size: 14,
                        weight: 300,
                        family: "Roboto",
                        style: 'normal',
                        lineHeight: 2
                    },
                    color: "#f8f9fa"
                },
            },
            x: {
                grid: {
                    drawBorder: false,
                    display: true,
                    drawOnChartArea: true,
                    drawTicks: false,
                    borderDash: [5, 5],
                    color: 'rgba(255, 99, 132, 0.2)'
                },
                ticks: {
                    display: true,
                    color: '#f8f9fa',
                    padding: 10,
                    font: {
                        size: 14,
                        weight: 300,
                        family: "Roboto",
                        style: 'normal',
                        lineHeight: 2
                    },
                }
            },
        },
    };


    var ctxLine = document.getElementById("chart-line").getContext("2d");
    new Chart(ctxLine, {
        type: "line",
        data: lineChartData,
        options: lineChartOptions,
    });

    const ctx = document.getElementById('doughnut-chart').getContext('2d');
    const totalEarnings = {{ totalEarnings }};
    const limit = {{ limit }};
    const remaining = limit - totalEarnings;

    const doughnutChartData = {
        labels: ['Ganancias'],
        datasets: [{
            data: [totalEarnings, remaining],
            backgroundColor: [
                'rgba(75, 192, 192, 0.6)', // Color para ganancias
                'rgba(255, 255, 255, 0.0)'  // Color transparente para restante
            ],
            borderColor: [
                'rgba(75, 192, 192, 1)',
                'rgba(255, 255, 255, 0.0)'  // Color transparente para restante
            ],
            borderWidth: 1
        }]
    };

    const doughnutChartOptions = {
        responsive: true,
        maintainAspectRatio: true, // Mantener la relación de aspecto
        plugins: {
            legend: {
                display: false, // Ocultar la leyenda
            },
            tooltip: {
                callbacks: {
                    label: function (tooltipItem) {
                        // Mostrar solo la etiqueta de ganancias
                        if (tooltipItem.label === 'Ganancias') {
                            const value = tooltipItem.raw;
                            return `${value}`;
                        }
                        return null;
                    }
                }
            }
        }
    };

    new Chart(ctx, {
        type: 'doughnut',
        data: doughnutChartData,
        options: doughnutChartOptions
    });



</script>