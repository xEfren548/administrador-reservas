<h1 class="ml-2 text-white text-xl font-bold">Definición de % de Aumento</h1>
<div class="bg-gray-900 p-4 rounded-lg mb-4">
    <button class="bg-blue-500 text-white px-4 py-2 rounded-lg mr-2" data-modal="acciones_modal">Agregar
        plataforma</button>
    <button class="bg-gray-700 text-white px-4 py-2 rounded-lg" data-modal="delete-prices-modal">Eliminar
        plataforma</button>
</div>

<label class="block text-white mt-4">Habitación:</label>
<select class="bg-gray-800 text-white p-2 rounded-lg w-full" id="habitacion-select">
    <option>Seleccione una habitación --</option>
    {{#each chalets}}
    <option value="{{this.id}}">{{this.name}}</option>
    {{/each}}
</select>

{{#each chalets}}
<div class="mt-6 hidden" id="calendar-container-{{this.id}}" data-id="{{this.id}}">
    <div class="overflow-x-auto bg-gray-900 p-4 rounded-lg">
        <button class="bg-blue-500 text-white px-4 py-2 rounded-lg mb-4"
            onclick="scrollToToday('{{this.id}}')">Hoy</button>
        <table class="w-full border border-gray-700 text-white">
            <thead>
                <tr class="bg-gray-800">
                    <th class="border border-gray-700 p-2">Función</th>
                </tr>
            </thead>
            <tbody id="calendar-body-{{this.id}}">
                <!-- Se llenará con JavaScript -->
            </tbody>
        </table>
    </div>
</div>
{{/each}}

<script>
    function generateCalendar(chaletName) {
        const today = new Date();
        const daysBefore = 365;
        const daysAfter = 365;
        const fechas = [];

        for (let i = -daysBefore; i <= daysAfter; i++) {
            let date = new Date(today);
            date.setDate(today.getDate() + i);
            fechas.push(date.toLocaleDateString('es-ES', { day: '2-digit', month: 'short', year: 'numeric' }));
        }

        let tableHeader = '<tr class="bg-white text-gray-800"><th class="border border-gray-700 p-2">Función</th>';
        fechas.forEach(fecha => {
            tableHeader += `<th class="border border-gray-700 p-2">${fecha}</th>`;
        });
        tableHeader += '</tr>';

        let tableRows = '';
        const fields = ['Costo Base', 'Precio Base', 'Costo Base 2+ noches', 'Precio Base 2+ noches'];
        const dummyPrices = [1800, 2250, 1800, 2250];

        fields.forEach((field, index) => {
            tableRows += `<tr><td class="border border-gray-700 p-2">${field}</td>`;
            fechas.forEach(() => {
                tableRows += `<td class="border border-gray-700 p-2">${dummyPrices[index]}</td>`;
            });
            tableRows += '</tr>';
        });

        document.querySelector(`#calendar-container-${chaletName} thead`).innerHTML = tableHeader;
        document.querySelector(`#calendar-body-${chaletName}`).innerHTML = tableRows;
    }

    document.getElementById('habitacion-select').addEventListener('change', function () {
        const selectedChalet = this.value;
        document.querySelectorAll('[id^="calendar-container-"]').forEach(container => {
            container.classList.add('hidden');
        });
        if (selectedChalet !== "Seleccione una habitación --") {
            generateCalendar(selectedChalet);
            document.getElementById(`calendar-container-${selectedChalet}`).classList.remove('hidden');
        }
    });

    function scrollToToday(chaletId) {
        const today = new Date().toISOString().split('T')[0];
        const headers = document.querySelectorAll(`#calendar-container-${chaletId} th[data-date]`);
        headers.forEach(th => {
            if (th.dataset.date.startsWith(today)) {
                th.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        });
    }

    // CARGAR DATOS DE CABAÑA (PRECIOS)

    const habitaciones = {{{ json habitaciones }}};
	const preciosHabitaciones = {{{ json preciosHabitaciones }}}
	const preciosEspeciales = {{{ json preciosEspeciales }}}

    function cargarDatosHabitacion(habitacion) {
		try {
			const roomName = habitacion.propertyDetails.name;
			const roomId = habitacion._id;

			const costoBase = habitacion.others.baseCost;
			const costoBase2 = habitacion.others.baseCost2nights;
			const precioBase = habitacion.others.basePrice;
			const precioBase2nights = habitacion.others.basePrice2nights;

			const headerRow = document.getElementById(`header-row-${roomName}`);


			// Generar las fechas desde 1 año antes hasta 2 años después
			const startDate = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate());
			const endDate = new Date(today.getFullYear() + 2, today.getMonth(), today.getDate());

			let currentDate = startDate;

			const costoBaseRow = document.getElementById(`costo-base-row-${roomName}`);
			const precioBaseRow = document.getElementById(`precio-base-row-${roomName}`);
			const costoBase2Row = document.getElementById(`costo-base2-row-${roomName}`);
			const precioBase2nightsRow = document.getElementById(`precio-base2nights-row-${roomName}`);

			const tbodyTable = document.getElementById(`tbody-${roomName}`);
			const costoBaseEspecialRow = document.getElementById(`costobase-especialesrow-${roomName}`);
			const precioBaseEspecialRow = document.getElementById(`preciobase-especialesrow-${roomName}`);
			const costoBase2EspecialRow = document.getElementById(`costobase2-especialesrow-${roomName}`);
			const precioBase2EspecialRow = document.getElementById(`preciobase2-especialesrow-${roomName}`);

			const preciosPorHabitacion = preciosHabitaciones.filter(precio => precio.habitacionId === roomId);
			preciosPorHabitacion.forEach(precio => {
				precio.fecha = convertirFechaMexicoCity(precio.fecha);
			});

			const preciosEspecialesPorHabitacion = preciosEspeciales.filter(precio => precio.habitacionId === roomId)
			preciosEspecialesPorHabitacion.map(precio => {
				precio.fecha = convertirFechaMexicoCity(precio.fecha)
			})

			let preciosEspecialesPorPersonas = {};
			if (preciosEspecialesPorHabitacion.length > 0) {
				// Group by habitacionId first, then by noPersonas for each habitacion
				preciosEspecialesPorPersonas = preciosEspecialesPorHabitacion.reduce((result, item) => {
					const { habitacionId, noPersonas } = item;

					// Initialize the room group if it doesn't exist
					if (!result[habitacionId]) {
						result[habitacionId] = {};
					}

					// Initialize the noPersonas group within the room if it doesn't exist
					if (!result[habitacionId][noPersonas]) {
						result[habitacionId][noPersonas] = [];
					}

					// Push the current item into the appropriate group
					result[habitacionId][noPersonas].push(item);

					return result;
				}, {});

				if (Object.keys(preciosEspecialesPorPersonas[roomId]).length > 0) {
					for (const key in preciosEspecialesPorPersonas[roomId]) {
						const rowTexto = document.createElement("tr")
						rowTexto.id = `row-especiales-${roomName}`
						const textoTh = document.createElement('th');
						const textoPersonas = `Precios especiales para ${key} personas`;
						textoTh.classList.add("sticky-column");
						textoTh.textContent = textoPersonas;

						const rowCostoBase = document.createElement("tr");
						rowCostoBase.id = `costo-base-especialestd-${roomName}-${key}pax`
						const tdCostoBase = document.createElement("td");
						tdCostoBase.textContent = "Precio Base"
						tdCostoBase.classList.add("sticky-column");
						rowCostoBase.appendChild(tdCostoBase);

						const rowPrecioBase = document.createElement("tr");
						const tdPrecioBase = document.createElement("td");
						tdPrecioBase.textContent = "Costo Base"
						tdPrecioBase.classList.add("sticky-column");
						rowPrecioBase.id = `precio-base-especialestd-${roomName}-${key}pax`
						rowPrecioBase.appendChild(tdPrecioBase);

						const rowCostoBase2 = document.createElement("tr");
						const tdCostoBase2 = document.createElement("td");
						tdCostoBase2.textContent = "Costo Base 2 Noches"
						tdCostoBase2.classList.add("sticky-column");
						rowCostoBase2.id = `costo-base2-especialestd-${roomName}-${key}pax`
						rowCostoBase2.appendChild(tdCostoBase2);

						const rowPrecioBase2 = document.createElement("tr");
						const tdPrecioBase2 = document.createElement("td");
						tdPrecioBase2.textContent = "Precio Base 2 Noches"
						tdPrecioBase2.classList.add("sticky-column");
						rowPrecioBase2.id = `precio-base2-especialestd-${roomName}-${key}pax`
						rowPrecioBase2.appendChild(tdPrecioBase2)

						rowTexto.appendChild(textoTh);
						tbodyTable.appendChild(rowTexto);
						tbodyTable.appendChild(rowCostoBase);
						tbodyTable.appendChild(rowPrecioBase);
						tbodyTable.appendChild(rowCostoBase2);
						tbodyTable.appendChild(rowPrecioBase2);
					}
				}

			}

			// Insertar las fechas y precios de la habitación seleccionada
			while (currentDate <= endDate) {
				const dayOfWeek = currentDate.getDay();
				const isWeekend = dayOfWeek === 5 || dayOfWeek === 6;
				// Crear un th para cada día
				const th = document.createElement('th');
				th.id = generateId(currentDate);
				const options = { day: 'numeric', month: 'short', year: 'numeric' };
				th.textContent = currentDate.toLocaleDateString('es-ES', options);

				headerRow.appendChild(th);

				// Crear celdas correspondientes para cada precio
				const costoBaseTd = document.createElement('td');
				const precioBaseTd = document.createElement('td');
				const costoBase2Td = document.createElement('td');
				const precioBase2nightsTd = document.createElement('td');

				const currentDateMx = convertirFechaMexicoCity(currentDate);

				if (isWeekend) {
					costoBaseTd.style.backgroundColor = "rgba(240, 240, 240, 0.1)";
					precioBaseTd.style.backgroundColor = "rgba(240, 240, 240, 0.1)";
					costoBase2Td.style.backgroundColor = "rgba(240, 240, 240, 0.1)";
					precioBase2nightsTd.style.backgroundColor = "rgba(240, 240, 240, 0.1)";
				}


				const precioEncontrado = preciosPorHabitacion.find(precio => precio.fecha === currentDateMx);
				if (precioEncontrado) {
					costoBaseTd.textContent = precioEncontrado.costo_base;
					costoBaseRow.appendChild(costoBaseTd);

					precioBaseTd.textContent = precioEncontrado.precio_modificado;
					precioBaseRow.appendChild(precioBaseTd);

					costoBase2Td.textContent = precioEncontrado.costo_base_2noches;
					costoBase2Row.appendChild(costoBase2Td);

					precioBase2nightsTd.textContent = precioEncontrado.precio_base_2noches;
					precioBase2nightsRow.appendChild(precioBase2nightsTd);
				} else {
					costoBaseTd.textContent = costoBase;
					costoBaseRow.appendChild(costoBaseTd);

					precioBaseTd.textContent = precioBase;
					precioBaseRow.appendChild(precioBaseTd);

					costoBase2Td.textContent = costoBase2;
					costoBase2Row.appendChild(costoBase2Td);

					precioBase2nightsTd.textContent = precioBase2nights;
					precioBase2nightsRow.appendChild(precioBase2nightsTd);
				}

				if (preciosEspecialesPorHabitacion.length > 0) {
					for (const personas in preciosEspecialesPorPersonas[roomId]) {
						const precioData = preciosEspecialesPorPersonas[roomId][personas];
						const rowCostoBase = document.getElementById(`costo-base-especialestd-${roomName}-${personas}pax`);
						const rowPrecioBase = document.getElementById(`precio-base-especialestd-${roomName}-${personas}pax`);
						const rowCostoBase2 = document.getElementById(`costo-base2-especialestd-${roomName}-${personas}pax`);
						const rowPrecioBase2 = document.getElementById(`precio-base2-especialestd-${roomName}-${personas}pax`);

						const costoBaseEspecialTd = document.createElement("td");
						const precioBaseEspecialTd = document.createElement("td");
						const costoBase2EspecialTd = document.createElement("td");
						const precioBase2EspecialTd = document.createElement("td");

						if (isWeekend) {
							costoBaseEspecialTd.style.backgroundColor = "rgba(240, 240, 240, 0.1)";
							precioBaseEspecialTd.style.backgroundColor = "rgba(240, 240, 240, 0.1)";
							costoBase2EspecialTd.style.backgroundColor = "rgba(240, 240, 240, 0.1)";
							precioBase2EspecialTd.style.backgroundColor = "rgba(240, 240, 240, 0.1)";
						}


						const precioEspecialPorPersonaEncontrado = precioData.find(precio => precio.fecha === currentDateMx)
						if (precioEspecialPorPersonaEncontrado) {
							// Dates match, use special prices
							costoBaseEspecialTd.textContent = precioEspecialPorPersonaEncontrado.precio_modificado;
							precioBaseEspecialTd.textContent = precioEspecialPorPersonaEncontrado.precio_base_2noches;
							costoBase2EspecialTd.textContent = precioEspecialPorPersonaEncontrado.costo_base_2noches;
							precioBase2EspecialTd.textContent = precioEspecialPorPersonaEncontrado.costo_base_2noches;
						} else {
							// Use default or found prices if they don't match
							if (precioEncontrado) {
								costoBaseEspecialTd.textContent = precioEncontrado.costo_base;
								precioBaseEspecialTd.textContent = precioEncontrado.precio_modificado;
								costoBase2EspecialTd.textContent = precioEncontrado.costo_base_2noches;
								precioBase2EspecialTd.textContent = precioEncontrado.precio_base_2noches;
							} else {
								// Default prices for non-special dates
								costoBaseEspecialTd.textContent = costoBase;
								precioBaseEspecialTd.textContent = precioBase;
								costoBase2EspecialTd.textContent = costoBase2;
								precioBase2EspecialTd.textContent = precioBase2nights;
							}
						}
						// Append the cells to the respective rows
						rowCostoBase.appendChild(costoBaseEspecialTd);
						rowPrecioBase.appendChild(precioBaseEspecialTd);
						rowCostoBase2.appendChild(costoBase2EspecialTd);
						rowPrecioBase2.appendChild(precioBase2EspecialTd);
					}

				}

				currentDate.setDate(currentDate.getDate() + 1);
			}
		} catch (error) {
			Swal.fire({
				title: 'Error',
				text: 'Ocurrió un error al cargar los precios de la habitación',
				icon: 'error',
				confirmButtonText: 'Aceptar'
			})
			console.error('Error al cargar los precios de la habitación:', error);
			return;
		}

	}

    function generateId(date) {
		return `date-${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
	}


	function convertirFechaMexicoCity(fechaISO) {
		const fecha = new Date(fechaISO);
		const opciones = {
			timeZone: 'America/Mexico_City',
			year: 'numeric',
			month: '2-digit',
			day: '2-digit',
			hour: '2-digit',
			minute: '2-digit',
			second: '2-digit',
		};

		const formatter = new Intl.DateTimeFormat('es-MX', opciones);
		return formatter.format(fecha);
	}
</script>