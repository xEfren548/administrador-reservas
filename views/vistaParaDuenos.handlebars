<div class="calendar-header">
    <div class="bg-dark mb-3">
        <a name="" id="crear-reserva-dueno-btn" class="btn btn-secondary btn-sm m-3" href="#" role="button"
            data-bs-toggle="modal" data-bs-target="#event_entry_modal">Crear reserva de dueño</a>
    </div>
</div>

<div class="row flex-nowrap justify-content-center mt-3 " style="width: 100%;">
    <div class="col-10">
        <h1>Reservas</h1>
        <table class="table table-dark table-hover text-center" id="tablaParaDuenos">
            <thead class="table-light">
                <tr>
                    <th scope="col">Cabaña</th>
                    <th scope="col">Fecha de llegada</th>
                    <th scope="col">Fecha de salida</th>
                    <th scope="col">Estatus</th>
                    <th scope="col">Pagos Realizados</th>
                    <th scope="col">Monto pendiente</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                {{#if eventos.length}}
                {{#each eventos}}
                <tr>
                    <td>{{this.roomName}}</td>
                    <td>{{this.arrivalDate}}</td>
                    <td>{{this.departureDate}}</td>
                    <td>{{this.status}}</td>
                    <td>${{this.pagoTotal}}</td>
                    <td>${{this.montoPendiente}}</td>
                    <td class="text-center">
                        <button type="button" class="btn btn-info btn-sm" data-event-id="{{this._id}}"
                            data-pagoTotal="{{this.pagoTotal}}" data-montoPendiente="{{this.montoPendiente}}"
                            onclick="mostrarInfoServicio('{{this._id}}')">Liquidar Reserva
                    </td>

                </tr>
                {{/each}}
                {{else}}
                <td colspan="5">No se encontraron servicios</td>
                {{/if}}
            </tbody>
        </table>
    </div>
</div>


<!-- Modals -->
<div class="modal fade" id="event_entry_modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Apartar fechas</h5>
                <button type="button" class="close" onclick="$('#event_entry_modal').modal('hide');" aria-label="Close">
                    &times;
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <div class="row mt-2">
                        <div class="col-sm-5">
                            <div class="form-group">
                                <label for="event_start_date">Fecha llegada</label>
                                <input type="date" name="event_start_date" id="event_start_date"
                                    class="form-control onlydatepicker" placeholder="Event start date">
                            </div>
                        </div>
                        <div class="col-sm-5">
                            <div class="form-group">
                                <label for="event_end_date">Fecha salida</label>
                                <input type="date" name="event_end_date" id="event_end_date" class="form-control"
                                    placeholder="Event end date">
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="event_end_date">Noches: </label>
                                <input type="number" name="event_nights" id="event_nights" class="form-control"
                                    placeholder="" min="1" disabled>
                            </div>
                        </div>
                    </div>
                    <h3 class="mt-3">Habitación</h3>
                    <div class="row">
                        <div class="col-sm-4">
                            <div class="form-group">
                                <p id="verificar-disponibilidad" style="display: none;">Verificando disponibilidad...
                                </p>

                                <label for="tipologia_habitacion">Tipología</label>
                                <select name="tipologia_habitacion" id="tipologia_habitacion"
                                    class="form-select form-select-md" required>
                                    <option value="" selected="true" disabled="true"> Selecciona una cabaña para
                                        modificar --</option>
                                    {{#if chalets}}
                                    {{#each chalets}}
                                    <option value="{{this.propertyDetails.name}}" data-bs-pax="{{this.propertyDetails.maxOccupancy}}" data-bs-id="{{this._id}}">
                                        {{this.propertyDetails.name}}</option>
                                    {{/each}}
                                    {{else}}
                                    <option value="0">No se encontraron cabañas</option>
                                    {{/if}}
                                </select>
                            </div>
                        </div>

                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="ocupacion_habitacion">Ocupación Máx.</label>
                                <input type="number" name="ocupacion_habitacion" id="ocupacion_habitacion"
                                    class="form-control" placeholder="Ocupación" readonly>
                                <input type="hidden" id="id_cabana">
                            </div>
                        </div>
                    </div> <!-- Cierre row -->

                    

                    <div class="form-item">
                        <p id="txtReservationError" name="errMsg" class="error"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="save-event-btn">
                    <span class="spinner-grow spinner-grow-sm d-none" role="status" aria-hidden="true"></span>
                    <span class="spinner-text">Crear Reserva</span>

                </button>
            </div>
        </div>
    </div>
</div>
<!-- End popup dialog box -->


<script>
    document.addEventListener("DOMContentLoaded", function () {
        var table = document.getElementById("tablaParaDuenos");
        if (table) {
            var dataTable = new DataTable(table, {
                "order": [], // Puedes especificar aquí el orden inicial de las columnas
                "paging": true, // Habilita la paginación
                "lengthMenu": [5, 10, 25, 50], // Define el menú de longitud de página
                "pageLength": 10 // Establece la longitud de página inicial
            });
        }
    });

    document.getElementById('save-event-btn').addEventListener('click', async function () {
        // Mostrar el spinner y deshabilitar el botón
        const spinner = document.querySelector('#save-event-btn .spinner-grow');
        const spinnerText = document.querySelector('#save-event-btn .spinner-text');
        spinner.classList.remove('d-none');
        spinnerText.textContent = 'Loading...';
        this.disabled = true; // Deshabilitar el botón

        try {
            // Esperar a que obtenerComisiones() se resuelva            

            // Crear un objeto con los datos del formulario
            const formData = {
                arrivalDate: document.getElementById('event_start_date').value.trim(),
                departureDate: document.getElementById('event_end_date').value.trim(),
                nNights: document.getElementById("event_nights").value.trim(),
                chaletName: document.getElementById('tipologia_habitacion').value.trim(),
                maxOccupation: document.getElementById('ocupacion_habitacion').value.trim(),
                units: document.getElementById('habitacion_unidades').value.trim(),
            };


            const response = await fetch('/api/eventos/reservadueno', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                const errors = errorData.error;
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: "Error en la solicitud: " + errors[0].message.toLowerCase() + ".",
                    confirmButtonText: 'Aceptar'
                });
                throw new Error('Error en la solicitud');
            }

            const data = await response.json();
            console.log('Respuesta exitosa del servidor:', data);

            const reservationId = data.reservationId;


            Swal.fire({
                icon: 'success',
                title: 'Reserva creada',
                text: data.message,
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Aceptar'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.reload();
                }
            });

        } catch (error) {
            console.error('Ha ocurrido un error: ', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: `Ha ocurrido un error al crear la reserva: ${error.message}`,
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Aceptar'
            });

        } finally {
            // Ocultar el spinner y habilitar el botón nuevamente en caso de error
            spinner.classList.add('d-none');
            spinnerText.textContent = 'Crear Reserva'; // Limpiar el texto
            document.getElementById('save-event-btn').disabled = false; // Habilitar el botón
        }
    });

    async function mostrarInfoServicio(id) {
        console.log(id)
        const button = document.querySelector(`button[data-event-id="${id}"]`);

        var pagoTotal = button.getAttribute('data-pagoTotal');
        var montoPendiente = button.getAttribute('data-montoPendiente');

        // Aquí puedes usar los valores como necesites
        console.log('Pago Total:', pagoTotal);
        console.log('Monto Pendiente:', montoPendiente);

        const confirmacion = await Swal.fire({
            title: 'Advertencia',
            text: `¿Confirmas haber recibido la cantidad de $${montoPendiente}? Esta acción agregará un pago a la reserva. `,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Liquidar'
        })

        if (confirmacion.isConfirmed) {
            // Aquí puedes usar los valores como necesites
            console.log('Confirmacion:', confirmacion);
            try {
                const response = await fetch(`/api/pagos/liquidar/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        fechaPago: Date.now(),
                        importe: montoPendiente,
                        metodoPago: 'Efectivo',
                        reservacionId: id,
                        notas: 'Pago recibido en efectivo por el dueño de la cabaña'
                    })
                })

                if (response.ok) {
                    Swal.fire({
                        icon:'success',
                        title: 'Pagado',
                        text: 'El pago se realizó correctamente',
                    }).then(result => {
                        window.location.reload()
                    })
                } else {
                    throw new Error('Error al hacer el pago')
                }

            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message,
                })
            }
        }
    }

    const nightsInput = document.querySelector('#event_nights');
    const arrivalDate = document.getElementById('event_start_date')
    const departureDate = document.getElementById('event_end_date')

    arrivalDate.addEventListener('input', calculateNightDifference);
    departureDate.addEventListener('input', calculateNightDifference);

    function calculateNightDifference() {
        console.log('Desde calcular noches')
        const arrivalValue = new Date(arrivalDate.value);
        const departureValue = new Date(departureDate.value);

        // Verifica si las fechas son válidas
        if (!isNaN(arrivalValue) && !isNaN(departureValue) && departureValue >= arrivalValue) {
            const timeDifference = departureValue.getTime() - arrivalValue.getTime();
            const nightDifference = Math.ceil(timeDifference / (1000 * 3600 * 24)); // Calcula la diferencia en días

            nightsInput.value = nightDifference
        } else {
            nightsInput.value = 0
        }
    }


</script>