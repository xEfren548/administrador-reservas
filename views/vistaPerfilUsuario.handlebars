<div class="user-profile d-flex align-items-center">
    <div class="d-flex justify-content-center container-pp-image">
        {{#if req.session.profileImageUrl}}
            <img src="{{req.session.profileImageUrl}}" alt="profile-img" class="rounded-circle" id="profile-img">
            <div class="overlay"><a href="#" data-bs-toggle="modal" data-bs-target="#imageModal">Cambiar foto</a></div>
        {{else}}
            <img src="/images/default-pp.jpg" alt="profile-img" class="rounded-circle" id="profile-img">
            <div class="overlay"><a href="#" data-bs-toggle="modal" data-bs-target="#imageModal">Cambiar foto</a></div>
        {{/if}}
    </div>
    <div class="form-item">
        <h2>{{req.session.firstName}}  {{req.session.lastName}}</h2>
        <button class="btn-edit" data-bs-toggle="modal" data-bs-target="#mdlUpdateFullName"><span   class="material-symbols-outlined">edit</span></button>
    </div>
    <hr>
    <div class="form-item">
        <input id="txtUserEmail" name="txtUserEmail" type="email"   value="{{req.session.email}}" disabled>
        <button class="btn-edit" data-bs-toggle="modal" data-bs-target="#mdlUpdateEmail"><span   class="material-symbols-outlined">edit</span></button>
        <label for="txtUserEmail">Dirección de correo electrónico</label>
    </div>           
    <div class="form-item">
        <input id="txtUserPassword" name="txtUserPassword" type="password" value="xxxxxxxxxx" disabled>
        <button class="btn-edit" data-bs-toggle="modal" data-bs-target="#mdlUpdatePassword"><span class="material-symbols-outlined">edit</span></button>
        <label for="txtUserPassword">Contraseña</label>
    </div>        
</div>

<!-- Update full name modal -->
<div class="modal fade" id="mdlUpdateFullName" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <form id="frmUpdUSerFullName" action="/api/perfil-usuario/editar-nombre" method="put" class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content update-info">
            <div class="modal-header">
                <h2 class="modal-title " id="modalLabel">Editar nombre completo</h2>
                <button type="button" class="btn-cancel" onclick="$('#mdlUpdateFullName').modal('hide');" aria-label="Close"><span class="material-symbols-outlined">close</span></button>
            </div>
            <div class="modal-body">
                <div class="form-item">
                    <label for="txtNewUserName">Nuevo(s) nombre(s)</label>
                    <input id="txtNewUserName" name="txtNewUserName" type="email">
                </div>
                <div class="form-item">
                    <label for="txtNewUserLastName">Nuevo(s) apellido(s)</label>
                    <input id="txtNewUserLastName" name="txtNewUserLastName" type="email">
                </div>
                <div class="form-item">
                    <p id="txtUpdFullNameError" name="errMsg" class="error"></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-save" id="btnUpdFullName">Guardar cambios</button>
            </div>
        </div>
    </form>
</div>

<!-- Update email modal -->
<div class="modal fade" id="mdlUpdateEmail" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <form id="frmUpdUserEmail" action="/api/perfil-usuario/editar-email" method="put" class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content update-info">
            <div class="modal-header">
                <h2 class="modal-title " id="modalLabel">Editar dirección de correo electrónico</h2>
                <button type="button" class="btn-cancel" onclick="$('#mdlUpdateEmail').modal('hide');" aria-label="Close"><span class="material-symbols-outlined">close</span></button>
            </div>
            <div class="modal-body">
                <div class="form-item">
                    <label for="txtUserCurrentEmail">Dirección de correo electrónico actual</label>
                    <input id="txtUserCurrentEmail" name="txtUserCurrentEmail" type="email">
                </div>
                <div class="form-item">
                    <label for="txtNewUserEmail">Nueva dirección de correo electrónico</label>
                    <input id="txtNewUserEmail" name="txtNewUserEmail" type="email">
                </div>
                <div class="form-item">
                    <label for="txtConfirmNewUserEmail">Confirmar nueva dirección de correo electrónico</label>
                    <input id="txtConfirmNewUserEmail" name="txtConfirmNewUserEmail" type="email">
                </div>
                <div class="form-item">
                    <p id="txtUpdEmailError" name="errMsg" class="error"></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-save" id="btnUpdEmail">Guardar cambios</button>
            </div>
        </div>
    </form>
</div>

<!-- Update password modal -->
<div class="modal fade" id="mdlUpdatePassword" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <form id="frmUpdUserPwd" action="/api/perfil-usuario/editar-contrasena" method="put" class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content update-info">
            <div class="modal-header">
                <h2 class="modal-title " id="modalLabel">Editar contraseña</h2>
                <button type="button" class="btn-cancel" onclick="$('#mdlUpdatePassword').modal('hide');" aria-label="Close"><span class="material-symbols-outlined">close</span></button>
            </div>
            <div class="modal-body">
                <div class="form-item">
                    <label for="txtUserCurrentPassword">Contraseña actual</label>
                    <input id="txtUserCurrentPassword" name="txtUserCurrentPassword" type="password">
                </div>
                <div class="form-item">
                    <label for="txtUserNewPassword">Nueva contraseña</label>
                    <input id="txtUserNewPassword" name="txtUserNewPassword" type="password">
                </div>
                <div class="form-item">
                    <label for="txtConfirmUserNewPassword">Confirmar nueva contraseña</label>
                    <input id="txtConfirmUserNewPassword" name="txtConfirmUserNewPassword" type="password">
                </div>
                <div class="form-item">
                    <p id="txtUpdPasswordError" name="errMsg" class="error"></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-save" id="btnUpdPwd">Guardar cambios</button>
            </div>
        </div>
    </form>
</div>

<!-- Modal cambio de imagen -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="imageModalLabel">Vista previa de la imagen</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body text-center">
				<!-- Imagen de vista previa -->
                {{#if req.session.profileImageUrl}}
                    <img id="preview-img" src="{{req.session.profileImageUrl}}" alt="Vista previa de imagen" class="img-fluid rounded-circle mb-3" style="width: 150px; height: 150px;">
                {{else}}
				<img id="preview-img" src="/images/default-pp.jpg" alt="Vista previa de imagen" class="img-fluid rounded-circle mb-3" style="width: 150px; height: 150px;">
                {{/if}}
				<!-- Input para cargar imagen -->
				<input type="file" id="fileInput" class="form-control" accept="image/*">
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
				<button type="button" class="btn btn-primary" onclick="saveImage()">Guardar cambios</button>
			</div>
		</div>
	</div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Functions.
        function clearModal(modal){
            const inputs = modal.querySelectorAll('input');
            inputs.forEach(function(input) {
                input.value = "";
            });
            modal.querySelectorAll("p[name='errMsg']")[0].innerHTML = "";
        }

        // Clearing user's info when closing modal.
        const modals = document.querySelectorAll('.modal');
        modals.forEach(function(modal) {
            modal.addEventListener('hidden.bs.modal', () => {
                clearModal(modal);
            });
        });

        // Updating user's full name.
        const btnUpdFullName = document.getElementById("btnUpdFullName");
        if (btnUpdFullName) {
            btnUpdFullName.addEventListener("click", function(event) {
                event.preventDefault();
                const data = {
                    firstName: document.getElementById("txtNewUserName").value.trim(),
                    lastName: document.getElementById("txtNewUserLastName").value.trim()
                };

                fetch("/api/perfil-usuario/editar-nombre", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    if (!response.ok) {
                        response.json().then(errorData => {
                            const errors = errorData.error;
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: "Error en la solicitud: " + errors[0].message.toLowerCase() + ".",
                                confirmButtonText: 'Aceptar'
                            });   
                        });                    
                        throw new Error('Error en la solicitud');
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: data.message + '.',
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            clearModal(document.getElementById("mdlUpdateFullName"));
                            $('#mdlUpdateFullName').modal('hide');
                            location.reload();
                        }
                    }); 
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al enviar la solicitud: ' + error.toLowerCase() + '.',
                        confirmButtonText: 'Aceptar'
                    }); 
                });                      
            });
        }

        // Updating user's email address.
        const btnUpdEmail = document.getElementById("btnUpdEmail");
        if (btnUpdEmail) {
            btnUpdEmail.addEventListener("click", function(event) {
                event.preventDefault();
                const data = {
                    oldEmail: document.getElementById("txtUserCurrentEmail").value.trim(),
                    newEmail: document.getElementById("txtNewUserEmail").value.trim(),
                    confirmNewEmail: document.getElementById("txtConfirmNewUserEmail").value.trim(),
                };

                fetch("/api/perfil-usuario/editar-email", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    if (!response.ok) {
                        response.json().then(errorData => {
                            const errors = errorData.error;
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: "Error en la solicitud: " + errors[0].message.toLowerCase() + ".",
                                confirmButtonText: 'Aceptar'
                            });   
                        });                    
                        throw new Error('Error en la solicitud');
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: data.message + '.',
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            clearModal(document.getElementById("mdlUpdateEmail"));
                            $('#mdlUpdateEmail').modal('hide');
                            location.reload();
                        }
                    }); 
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al enviar la solicitud: ' + error.toLowerCase() + '.',
                        confirmButtonText: 'Aceptar'
                    }); 
                });          
            });
        }

        // Updating user's password.
        const btnUpdPwd = document.getElementById("btnUpdPwd");
        if (btnUpdPwd) {
            btnUpdPwd.addEventListener("click", function(event) {
                event.preventDefault();
                const data = {
                    oldPassword: document.getElementById("txtUserCurrentPassword").value.trim(),
                    newPassword: document.getElementById("txtUserNewPassword").value.trim(),
                    confirmNewPassword: document.getElementById("txtConfirmUserNewPassword").value.trim(),
                };

                fetch("/api/perfil-usuario/editar-contrasena", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    if (!response.ok) {
                        response.json().then(errorData => {
                            const errors = errorData.error;
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: "Error en la solicitud: " + errors[0].message.toLowerCase() + ".",
                                confirmButtonText: 'Aceptar'
                            });   
                        });                    
                        throw new Error('Error en la solicitud');
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Completado!',
                        text: data.message + '.',
                        confirmButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            clearModal(document.getElementById("mdlUpdatePassword"));
                            $('#mdlUpdatePassword').modal('hide');
                            location.reload();
                        }
                    }); 
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al enviar la solicitud: ' + error.toLowerCase() + '.',
                        confirmButtonText: 'Aceptar'
                    }); 
                });           
            });
        }

        // Updating user's profile picture.
        const btnUpdProfilePic = document.getElementById("profile-img");

    });

    const profileImg = document.getElementById('profile-img');
	const previewImg = document.getElementById('preview-img');
	const fileInput = document.getElementById('fileInput');

	// Evento para mostrar la vista previa al seleccionar una nueva imagen
fileInput.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (file) {
        // Validate file type and size
        const validTypes = ['image/jpeg', 'image/png'];
        if (!validTypes.includes(file.type)) {
            Swal.fire({
                icon: 'error',
                title: 'Formato no soportado',
                text: 'Por favor, selecciona una imagen en formato JPG o PNG.',
                confirmButtonText: 'Aceptar'
            });
            fileInput.value = ''; // Clear the input
            return;
        }
        if (file.size > 2 * 1024 * 1024) { // Limit file size to 2MB
            Swal.fire({
                icon: 'error',
                title: 'Archivo demasiado grande',
                text: 'Por favor, selecciona una imagen de menos de 2MB.',
                confirmButtonText: 'Aceptar'
            });
            fileInput.value = ''; // Clear the input
            return;
        }

        // Show the preview in the modal
        const reader = new FileReader();
        reader.onload = function(e) {
            previewImg.src = e.target.result;
        };
        reader.readAsDataURL(file);
    }
});

async function saveImage() {
    const file = fileInput.files[0];

    if (!file) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se ha seleccionado ninguna imagen.',
            confirmButtonText: 'Aceptar'
        });
        return;
    }

    try {
        const formData = new FormData();
        formData.append('profileImage', file);

        Swal.fire({
            title: 'Subiendo imagen...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        // Send the PUT request to the API endpoint
        const response = await fetch('/api/perfil-usuario/editar-imagen', {
            method: 'PUT',
            body: formData
        });

        Swal.close(); // Close the loading indicator

        if (!response.ok) {
            const data = await response.json();
            console.log(data);
            throw new Error(`Error al actualizar la imagen: ${data.message}`);
        }

        profileImg.src = previewImg.src; // Update profile image on the main page
        const modal = bootstrap.Modal.getInstance(document.getElementById('imageModal'));
        modal.hide(); // Close the modal
        Swal.fire({
            icon: 'success',
            title: '¡Completado!',
            text: 'Imagen actualizada correctamente.',
            confirmButtonText: 'Aceptar'
        }).then((result) => {
            if (result.isConfirmed) {
                location.reload();
            }
        })
    } catch (error) {
        console.error(error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Error al actualizar la imagen.',
            confirmButtonText: 'Aceptar'
        });
    }
}

</script>